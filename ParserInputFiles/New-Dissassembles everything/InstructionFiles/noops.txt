
./noops.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_millis>
  c0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_millis+0x1>
  c4:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_millis+0x2>
  c8:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_millis+0x3>
	unsigned char f = timer0_fract;
  cc:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
  d4:	2d 37       	cpi	r18, 0x7D	; 125
  d6:	58 f5       	brcc	.+86     	; 0x12e <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
  de:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <timer0_fract>
	timer0_millis = m;
  e2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer0_millis>
  e6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer0_millis+0x1>
  ea:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer0_millis+0x2>
  ee:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer0_millis+0x3>
	timer0_overflow_count++;
  f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
  fa:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
  fe:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 10c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 110:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 114:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
}
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 12e:	26 e8       	ldi	r18, 0x86	; 134
 130:	23 0f       	add	r18, r19
		m += 1;
 132:	02 96       	adiw	r24, 0x02	; 2
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	d2 cf       	rjmp	.-92     	; 0xde <__vector_16+0x38>

0000013a <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 13a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 13c:	84 b5       	in	r24, 0x24	; 36
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 142:	84 b5       	in	r24, 0x24	; 36
 144:	81 60       	ori	r24, 0x01	; 1
 146:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 154:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 15e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 162:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 16c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 176:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 180:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 184:	84 60       	ori	r24, 0x04	; 4
 186:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 18a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 194:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS1);
 19e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS0);
 1a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

000001c0 <__LDST>:
    "__Mov: \n"
    "mov %0, %1 \n"
    "mov %0, %1 \n"
    "mov %0, %1 \n"
    "ret \n"
    : "=d" (a): "d" (b)
 1c0:	ca e2       	ldi	r28, 0x2A	; 42
 1c2:	ca e2       	ldi	r28, 0x2A	; 42
 1c4:	ca e2       	ldi	r28, 0x2A	; 42
 1c6:	08 95       	ret
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1c8:	00 e0       	ldi	r16, 0x00	; 0
 1ca:	10 e0       	ldi	r17, 0x00	; 0
  // put your setup code here, to run once:
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
}
void loop(){
  int randNumber1, randNumber2;
 1cc:	0c 94 19 01 	jmp	0x232	; 0x232 <__main>

000001d0 <__Noops>:
  noInterrupts();
  digitalWrite(LED_BUILTIN, LOW);   
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
  asm(
    "jmp __main \n"
    );
 1d0:	00 00       	nop
 1d2:	00 00       	nop
 1d4:	00 00       	nop
 1d6:	08 95       	ret
    "nop \n"
    "nop \n"
    "nop \n"
    "ret \n"
    );
  asm volatile(
 1d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <b>
 1dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <b+0x1>

000001e0 <__Add>:
 1e0:	88 0f       	add	r24, r24
 1e2:	88 0f       	add	r24, r24
 1e4:	88 0f       	add	r24, r24
 1e6:	08 95       	ret
 1e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    "add %0, %1 \n"
    "add %0, %1 \n"
    "ret \n"
    : "=d" (a): "d" (b)
  );
  asm volatile(
 1f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <b>
 1f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <b+0x1>

000001f8 <__Mult>:
 1f8:	88 02       	muls	r24, r24
 1fa:	88 02       	muls	r24, r24
 1fc:	88 02       	muls	r24, r24
 1fe:	08 95       	ret
 200:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    "__Mult: \n"
    "muls %0, %1 \n"
    "muls %0, %1 \n"
    "muls %0, %1 \n"
    "ret \n"
    : "=d" (a): "d" (b)
 208:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <b>
 20c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <b+0x1>
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 214:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>

00000218 <__Mov>:
 218:	08 95       	ret
 21a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 21e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 222:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <b+0x1>
 226:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <b>
    "__Mov: \n"
    "mov %0, %1 \n"
    "mov %0, %1 \n"
    "mov %0, %1 \n"
    "ret \n"
    : "=d" (a): "d" (b)
 22a:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 22e:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>

00000232 <__main>:
    "nop \n"
    "nop \n"
    "nop \n"
    "nop \n"
    "nop \n"
    "nop \n"
 232:	00 00       	nop
 234:	00 00       	nop
 236:	00 00       	nop
 238:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__Noops>
	...
 268:	00 00       	nop
 26a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__Add>
	...
 29a:	00 00       	nop
 29c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__Mult>
	...
 2cc:	00 00       	nop
 2ce:	0e 94 0c 01 	call	0x218	; 0x218 <__Mov>
	...
 2fe:	00 00       	nop
 300:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__LDST>
	...
 330:	00 00       	nop
 332:	01 15       	cp	r16, r1
 334:	11 05       	cpc	r17, r1
 336:	09 f4       	brne	.+2      	; 0x33a <__main+0x108>
 338:	49 cf       	rjmp	.-366    	; 0x1cc <__LDST+0xc>
 33a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 33e:	46 cf       	rjmp	.-372    	; 0x1cc <__LDST+0xc>

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
