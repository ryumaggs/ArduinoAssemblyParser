
./LADS_control_flow_if_false_loop.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	24 00       	.word	0x0024	; ????
  6e:	27 00       	.word	0x0027	; ????
  70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
  90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
  a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  b4:	00 00 00 00                                         ....

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a5 31       	cpi	r26, 0x15	; 21
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 02 01 	call	0x204	; 0x204 <main>
  d8:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <digitalWrite.constprop.0>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  e0:	e1 eb       	ldi	r30, 0xB1	; 177
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
  e6:	ed e9       	ldi	r30, 0x9D	; 157
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
  ec:	e9 e8       	ldi	r30, 0x89	; 137
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
  f2:	ee 23       	and	r30, r30
  f4:	c9 f0       	breq	.+50     	; 0x128 <digitalWrite.constprop.0+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  f6:	22 23       	and	r18, r18
  f8:	39 f0       	breq	.+14     	; 0x108 <digitalWrite.constprop.0+0x28>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
  fa:	23 30       	cpi	r18, 0x03	; 3
  fc:	01 f1       	breq	.+64     	; 0x13e <digitalWrite.constprop.0+0x5e>
  fe:	a8 f4       	brcc	.+42     	; 0x12a <digitalWrite.constprop.0+0x4a>
 100:	21 30       	cpi	r18, 0x01	; 1
 102:	19 f1       	breq	.+70     	; 0x14a <digitalWrite.constprop.0+0x6a>
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	29 f1       	breq	.+74     	; 0x152 <digitalWrite.constprop.0+0x72>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 58       	subi	r30, 0x8E	; 142
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	a5 91       	lpm	r26, Z+
 114:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 116:	2f b7       	in	r18, 0x3f	; 63
	cli();
 118:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
 11a:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 11c:	81 11       	cpse	r24, r1
 11e:	26 c0       	rjmp	.+76     	; 0x16c <digitalWrite.constprop.0+0x8c>
		*out &= ~bit;
 120:	90 95       	com	r25
 122:	9e 23       	and	r25, r30
	} else {
		*out |= bit;
 124:	9c 93       	st	X, r25
	}

	SREG = oldSREG;
 126:	2f bf       	out	0x3f, r18	; 63
}
 128:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 12a:	27 30       	cpi	r18, 0x07	; 7
 12c:	a9 f0       	breq	.+42     	; 0x158 <digitalWrite.constprop.0+0x78>
 12e:	28 30       	cpi	r18, 0x08	; 8
 130:	c9 f0       	breq	.+50     	; 0x164 <digitalWrite.constprop.0+0x84>
 132:	24 30       	cpi	r18, 0x04	; 4
 134:	49 f7       	brne	.-46     	; 0x108 <digitalWrite.constprop.0+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 136:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 13a:	2f 7d       	andi	r18, 0xDF	; 223
 13c:	03 c0       	rjmp	.+6      	; 0x144 <digitalWrite.constprop.0+0x64>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 13e:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 142:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 144:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 148:	df cf       	rjmp	.-66     	; 0x108 <digitalWrite.constprop.0+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 14a:	24 b5       	in	r18, 0x24	; 36
 14c:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 14e:	24 bd       	out	0x24, r18	; 36
 150:	db cf       	rjmp	.-74     	; 0x108 <digitalWrite.constprop.0+0x28>
 152:	24 b5       	in	r18, 0x24	; 36
 154:	2f 7d       	andi	r18, 0xDF	; 223
 156:	fb cf       	rjmp	.-10     	; 0x14e <digitalWrite.constprop.0+0x6e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 158:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 15c:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 15e:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 162:	d2 cf       	rjmp	.-92     	; 0x108 <digitalWrite.constprop.0+0x28>
 164:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 168:	2f 7d       	andi	r18, 0xDF	; 223
 16a:	f9 cf       	rjmp	.-14     	; 0x15e <digitalWrite.constprop.0+0x7e>
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 16c:	9e 2b       	or	r25, r30
 16e:	da cf       	rjmp	.-76     	; 0x124 <digitalWrite.constprop.0+0x44>

00000170 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 186:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <timer0_millis>
 18a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer0_millis+0x1>
 18e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <timer0_millis+0x2>
 192:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 196:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 19a:	23 e0       	ldi	r18, 0x03	; 3
 19c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 19e:	2d 37       	cpi	r18, 0x7D	; 125
 1a0:	58 f5       	brcc	.+86     	; 0x1f8 <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a1 1d       	adc	r26, r1
 1a6:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 1a8:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <timer0_fract>
	timer0_millis = m;
 1ac:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <timer0_millis>
 1b0:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <timer0_millis+0x1>
 1b4:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <timer0_millis+0x2>
 1b8:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <timer0_millis+0x3>
	timer0_overflow_count++;
 1bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timer0_overflow_count>
 1c0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timer0_overflow_count+0x1>
 1c4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <timer0_overflow_count+0x2>
 1c8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <timer0_overflow_count+0x3>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
 1d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <timer0_overflow_count>
 1d6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <timer0_overflow_count+0x1>
 1da:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <timer0_overflow_count+0x2>
 1de:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <timer0_overflow_count+0x3>
}
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 1f8:	26 e8       	ldi	r18, 0x86	; 134
 1fa:	23 0f       	add	r18, r19
		m += 1;
 1fc:	02 96       	adiw	r24, 0x02	; 2
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	d2 cf       	rjmp	.-92     	; 0x1a8 <__vector_16+0x38>

00000204 <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 204:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 206:	84 b5       	in	r24, 0x24	; 36
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 20c:	84 b5       	in	r24, 0x24	; 36
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 212:	85 b5       	in	r24, 0x25	; 37
 214:	82 60       	ori	r24, 0x02	; 2
 216:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 218:	85 b5       	in	r24, 0x25	; 37
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 21e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 222:	81 60       	ori	r24, 0x01	; 1
 224:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 228:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 22c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 230:	82 60       	ori	r24, 0x02	; 2
 232:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 236:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 240:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 244:	81 60       	ori	r24, 0x01	; 1
 246:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 24a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 254:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 25e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 262:	84 60       	ori	r24, 0x04	; 4
 264:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS1);
 268:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS0);
 272:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 276:	81 60       	ori	r24, 0x01	; 1
 278:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 27c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 280:	80 68       	ori	r24, 0x80	; 128
 282:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 286:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 28a:	ed e9       	ldi	r30, 0x9D	; 157
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 290:	e9 e8       	ldi	r30, 0x89	; 137
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 296:	88 23       	and	r24, r24
 298:	99 f0       	breq	.+38     	; 0x2c0 <main+0xbc>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	fc 01       	movw	r30, r24
 2a2:	e8 59       	subi	r30, 0x98	; 152
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
 2a6:	a5 91       	lpm	r26, Z+
 2a8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 2aa:	fc 01       	movw	r30, r24
 2ac:	ee 58       	subi	r30, 0x8E	; 142
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	85 91       	lpm	r24, Z+
 2b2:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 2b4:	8f b7       	in	r24, 0x3f	; 63
                cli();
 2b6:	f8 94       	cli
		*reg |= bit;
 2b8:	ec 91       	ld	r30, X
 2ba:	e2 2b       	or	r30, r18
 2bc:	ec 93       	st	X, r30
		SREG = oldSREG;
 2be:	8f bf       	out	0x3f, r24	; 63
void setup() {
  // put your setup code here, to run once:
  //Serial.begin(9600);          //  setup serial
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
  x = 0;
 2c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2c4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2c8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 2cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
  digitalWrite(LED_BUILTIN, LOW);   
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
  //Code goes here
  for(unsigned int ii=0; ii<15; ii++){
    a = 0x00000000;
    b = 0xffffffff; 
 2d0:	cc 24       	eor	r12, r12
 2d2:	ca 94       	dec	r12
 2d4:	dc 2c       	mov	r13, r12
 2d6:	76 01       	movw	r14, r12
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	d0 e0       	ldi	r29, 0x00	; 0

void loop() {
  // put your main code here, to run repeatedly:
  
  // Create trigger
  noInterrupts();
 2dc:	f8 94       	cli
  digitalWrite(LED_BUILTIN, LOW);   
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 70 00 	call	0xe0	; 0xe0 <digitalWrite.constprop.0>
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 70 00 	call	0xe0	; 0xe0 <digitalWrite.constprop.0>
 2ea:	8f e0       	ldi	r24, 0x0F	; 15
 2ec:	90 e0       	ldi	r25, 0x00	; 0
  //Code goes here
  for(unsigned int ii=0; ii<15; ii++){
    a = 0x00000000;
 2ee:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <a>
 2f2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <a+0x1>
 2f6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <a+0x2>
 2fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <a+0x3>
    b = 0xffffffff; 
 2fe:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <b>
 302:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <b+0x1>
 306:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <b+0x2>
 30a:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <b+0x3>
    a |= b;
 30e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <b>
 312:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <b+0x1>
 316:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <b+0x2>
 31a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <b+0x3>
 31e:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <a>
 322:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <a+0x1>
 326:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <a+0x2>
 32a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <a+0x3>
 32e:	40 2b       	or	r20, r16
 330:	51 2b       	or	r21, r17
 332:	62 2b       	or	r22, r18
 334:	73 2b       	or	r23, r19
 336:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <a>
 33a:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <a+0x1>
 33e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <a+0x2>
 342:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <a+0x3>
    b = 0x00000000;
 346:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <b>
 34a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <b+0x1>
 34e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <b+0x2>
 352:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <b+0x3>
    if(x){
 356:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 35a:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 35e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_edata+0x2>
 362:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_edata+0x3>
 366:	45 2b       	or	r20, r21
 368:	46 2b       	or	r20, r22
 36a:	47 2b       	or	r20, r23
 36c:	41 f0       	breq	.+16     	; 0x37e <main+0x17a>
      //a &= b;
      b = 0xffffffff; 
 36e:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <b>
 372:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <b+0x1>
 376:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <b+0x2>
 37a:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <b+0x3>
      //a = a^b;
    }
    a &= b;
 37e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <b>
 382:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <b+0x1>
 386:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <b+0x2>
 38a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <b+0x3>
 38e:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <a>
 392:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <a+0x1>
 396:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <a+0x2>
 39a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <a+0x3>
 39e:	40 23       	and	r20, r16
 3a0:	51 23       	and	r21, r17
 3a2:	62 23       	and	r22, r18
 3a4:	73 23       	and	r23, r19
 3a6:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <a>
 3aa:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <a+0x1>
 3ae:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <a+0x2>
 3b2:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <a+0x3>
    b = 0xffffffff; 
 3b6:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <b>
 3ba:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <b+0x1>
 3be:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <b+0x2>
 3c2:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <b+0x3>
    a = a^b;
 3c6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <a>
 3ca:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <a+0x1>
 3ce:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <a+0x2>
 3d2:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <a+0x3>
 3d6:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <b>
 3da:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <b+0x1>
 3de:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <b+0x2>
 3e2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <b+0x3>
 3e6:	40 27       	eor	r20, r16
 3e8:	51 27       	eor	r21, r17
 3ea:	62 27       	eor	r22, r18
 3ec:	73 27       	eor	r23, r19
 3ee:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <a>
 3f2:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <a+0x1>
 3f6:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <a+0x2>
 3fa:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <a+0x3>
 3fe:	01 97       	sbiw	r24, 0x01	; 1
  // Create trigger
  noInterrupts();
  digitalWrite(LED_BUILTIN, LOW);   
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
  //Code goes here
  for(unsigned int ii=0; ii<15; ii++){
 400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	75 cf       	rjmp	.-278    	; 0x2ee <main+0xea>
    a = a^b;
    //asm("nop\n"); //delay
  
  }
  
  interrupts();
 404:	78 94       	sei
 406:	20 97       	sbiw	r28, 0x00	; 0
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	68 cf       	rjmp	.-304    	; 0x2dc <main+0xd8>
 40c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 410:	65 cf       	rjmp	.-310    	; 0x2dc <main+0xd8>

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
