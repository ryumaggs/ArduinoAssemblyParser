
.\LADS_Math_loop\LADS_Math_loop.ino.elf:     file format elf32-avr


Disassembly of section .data:

00800100 <__data_start>:
  800100:	01 00       	.word	0x0001	; ????
	...

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	24 00       	.word	0x0024	; ????
  6e:	27 00       	.word	0x0027	; ????
  70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
  72:	00 00       	nop
  74:	00 00       	nop
  76:	25 00       	.word	0x0025	; ????
  78:	28 00       	.word	0x0028	; ????
  7a:	2b 00       	.word	0x002b	; ????

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04       	cpc	r0, r4
  7e:	04 04       	cpc	r0, r4
  80:	04 04       	cpc	r0, r4
  82:	04 04       	cpc	r0, r4
  84:	02 02       	muls	r16, r18
  86:	02 02       	muls	r16, r18
  88:	02 02       	muls	r16, r18
  8a:	03 03       	mulsu	r16, r19
  8c:	03 03       	mulsu	r16, r19
  8e:	03 03       	mulsu	r16, r19

00000090 <digital_pin_to_bit_mask_PGM>:
  90:	01 02       	muls	r16, r17
  92:	04 08       	sbc	r0, r4
  94:	10 20       	and	r1, r0
  96:	40 80       	ld	r4, Z
  98:	01 02       	muls	r16, r17
  9a:	04 08       	sbc	r0, r4
  9c:	10 20       	and	r1, r0
  9e:	01 02       	muls	r16, r17
  a0:	04 08       	sbc	r0, r4
  a2:	10 20       	and	r1, r0

000000a4 <digital_pin_to_timer_PGM>:
  a4:	00 00       	nop
  a6:	00 08       	sbc	r0, r0
  a8:	00 02       	muls	r16, r16
  aa:	01 00       	.word	0x0001	; ????
  ac:	00 03       	mulsu	r16, r16
  ae:	04 07       	cpc	r16, r20
	...

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	ee e0       	ldi	r30, 0x0E	; 14
  cc:	f5 e0       	ldi	r31, 0x05	; 5
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a4 30       	cpi	r26, 0x04	; 4
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a4 e0       	ldi	r26, 0x04	; 4
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ad 30       	cpi	r26, 0x0D	; 13
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  ee:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <digitalWrite.constprop.1>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  f6:	e1 eb       	ldi	r30, 0xB1	; 177
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
  fc:	ed e9       	ldi	r30, 0x9D	; 157
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
 102:	e9 e8       	ldi	r30, 0x89	; 137
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 108:	ee 23       	and	r30, r30
 10a:	c9 f0       	breq	.+50     	; 0x13e <digitalWrite.constprop.1+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 10c:	22 23       	and	r18, r18
 10e:	39 f0       	breq	.+14     	; 0x11e <digitalWrite.constprop.1+0x28>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 110:	23 30       	cpi	r18, 0x03	; 3
 112:	01 f1       	breq	.+64     	; 0x154 <digitalWrite.constprop.1+0x5e>
 114:	a8 f4       	brcc	.+42     	; 0x140 <digitalWrite.constprop.1+0x4a>
 116:	21 30       	cpi	r18, 0x01	; 1
 118:	19 f1       	breq	.+70     	; 0x160 <digitalWrite.constprop.1+0x6a>
 11a:	22 30       	cpi	r18, 0x02	; 2
 11c:	29 f1       	breq	.+74     	; 0x168 <digitalWrite.constprop.1+0x72>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	ee 58       	subi	r30, 0x8E	; 142
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	a5 91       	lpm	r26, Z+
 12a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 12c:	2f b7       	in	r18, 0x3f	; 63
	cli();
 12e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
 130:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 132:	81 11       	cpse	r24, r1
 134:	26 c0       	rjmp	.+76     	; 0x182 <digitalWrite.constprop.1+0x8c>
		*out &= ~bit;
 136:	90 95       	com	r25
 138:	9e 23       	and	r25, r30
	} else {
		*out |= bit;
 13a:	9c 93       	st	X, r25
	}

	SREG = oldSREG;
 13c:	2f bf       	out	0x3f, r18	; 63
}
 13e:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 140:	27 30       	cpi	r18, 0x07	; 7
 142:	a9 f0       	breq	.+42     	; 0x16e <digitalWrite.constprop.1+0x78>
 144:	28 30       	cpi	r18, 0x08	; 8
 146:	c9 f0       	breq	.+50     	; 0x17a <digitalWrite.constprop.1+0x84>
 148:	24 30       	cpi	r18, 0x04	; 4
 14a:	49 f7       	brne	.-46     	; 0x11e <digitalWrite.constprop.1+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 14c:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 150:	2f 7d       	andi	r18, 0xDF	; 223
 152:	03 c0       	rjmp	.+6      	; 0x15a <digitalWrite.constprop.1+0x64>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 154:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 158:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 15a:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 15e:	df cf       	rjmp	.-66     	; 0x11e <digitalWrite.constprop.1+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 160:	24 b5       	in	r18, 0x24	; 36
 162:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 164:	24 bd       	out	0x24, r18	; 36
 166:	db cf       	rjmp	.-74     	; 0x11e <digitalWrite.constprop.1+0x28>
 168:	24 b5       	in	r18, 0x24	; 36
 16a:	2f 7d       	andi	r18, 0xDF	; 223
 16c:	fb cf       	rjmp	.-10     	; 0x164 <digitalWrite.constprop.1+0x6e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 16e:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 172:	2f 77       	andi	r18, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 174:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 178:	d2 cf       	rjmp	.-92     	; 0x11e <digitalWrite.constprop.1+0x28>
 17a:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 17e:	2f 7d       	andi	r18, 0xDF	; 223
 180:	f9 cf       	rjmp	.-14     	; 0x174 <digitalWrite.constprop.1+0x7e>
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 182:	9e 2b       	or	r25, r30
 184:	da cf       	rjmp	.-76     	; 0x13a <digitalWrite.constprop.1+0x44>

00000186 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 19c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_millis>
 1a0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_millis+0x1>
 1a4:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_millis+0x2>
 1a8:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 1ac:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 1b0:	23 e0       	ldi	r18, 0x03	; 3
 1b2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 1b4:	2d 37       	cpi	r18, 0x7D	; 125
 1b6:	58 f5       	brcc	.+86     	; 0x20e <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	a1 1d       	adc	r26, r1
 1bc:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 1be:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <timer0_fract>
	timer0_millis = m;
 1c2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer0_millis>
 1c6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer0_millis+0x1>
 1ca:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer0_millis+0x2>
 1ce:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer0_millis+0x3>
	timer0_overflow_count++;
 1d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1da:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1de:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	a1 1d       	adc	r26, r1
 1e6:	b1 1d       	adc	r27, r1
 1e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1ec:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1f0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1f4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
}
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 20e:	26 e8       	ldi	r18, 0x86	; 134
 210:	23 0f       	add	r18, r19
		m += 1;
 212:	02 96       	adiw	r24, 0x02	; 2
 214:	a1 1d       	adc	r26, r1
 216:	b1 1d       	adc	r27, r1
 218:	d2 cf       	rjmp	.-92     	; 0x1be <__vector_16+0x38>

0000021a <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 21a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 21c:	84 b5       	in	r24, 0x24	; 36
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 222:	84 b5       	in	r24, 0x24	; 36
 224:	81 60       	ori	r24, 0x01	; 1
 226:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 228:	85 b5       	in	r24, 0x25	; 37
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 22e:	85 b5       	in	r24, 0x25	; 37
 230:	81 60       	ori	r24, 0x01	; 1
 232:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 234:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 23e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 242:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 246:	82 60       	ori	r24, 0x02	; 2
 248:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 24c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 250:	81 60       	ori	r24, 0x01	; 1
 252:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 256:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 260:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 264:	84 60       	ori	r24, 0x04	; 4
 266:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 26a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 274:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS1);
 27e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		sbi(ADCSRA, ADPS0);
 288:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 292:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 296:	80 68       	ori	r24, 0x80	; 128
 298:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 29c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 2a0:	ed e9       	ldi	r30, 0x9D	; 157
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 2a6:	e9 e8       	ldi	r30, 0x89	; 137
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 2ac:	88 23       	and	r24, r24
 2ae:	99 f0       	breq	.+38     	; 0x2d6 <main+0xbc>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	fc 01       	movw	r30, r24
 2b8:	e8 59       	subi	r30, 0x98	; 152
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	a5 91       	lpm	r26, Z+
 2be:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 2c0:	fc 01       	movw	r30, r24
 2c2:	ee 58       	subi	r30, 0x8E	; 142
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	85 91       	lpm	r24, Z+
 2c8:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 2ca:	8f b7       	in	r24, 0x3f	; 63
                cli();
 2cc:	f8 94       	cli
		*reg |= bit;
 2ce:	ec 91       	ld	r30, X
 2d0:	e2 2b       	or	r30, r18
 2d2:	ec 93       	st	X, r30
		SREG = oldSREG;
 2d4:	8f bf       	out	0x3f, r24	; 63
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 2d6:	c0 e0       	ldi	r28, 0x00	; 0
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
void loop() {
  // put your main code here, to run repeatedly:
  // Create trigger
  int randNumber1, randNumber2;
  randomSeed(0);
  noInterrupts();
 2da:	f8 94       	cli
  digitalWrite(LED_BUILTIN, LOW);   
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 7b 00 	call	0xf6	; 0xf6 <digitalWrite.constprop.1>
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 7b 00 	call	0xf6	; 0xf6 <digitalWrite.constprop.1>
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
 2e8:	0e 94 ca 01 	call	0x394	; 0x394 <random>
 2ec:	0e 94 ca 01 	call	0x394	; 0x394 <random>
  //Code goes here
  randNumber1 = random(65535);
  randNumber2 = random(65535);
  interrupts();
 2f0:	78 94       	sei
 2f2:	20 97       	sbiw	r28, 0x00	; 0
 2f4:	91 f3       	breq	.-28     	; 0x2da <main+0xc0>
 2f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2fa:	ef cf       	rjmp	.-34     	; 0x2da <main+0xc0>

000002fc <random_r>:
 2fc:	8f 92       	push	r8
 2fe:	9f 92       	push	r9
 300:	af 92       	push	r10
 302:	bf 92       	push	r11
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
 312:	68 81       	ld	r22, Y
 314:	79 81       	ldd	r23, Y+1	; 0x01
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	9b 81       	ldd	r25, Y+3	; 0x03
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	81 05       	cpc	r24, r1
 320:	91 05       	cpc	r25, r1
 322:	21 f4       	brne	.+8      	; 0x32c <random_r+0x30>
 324:	64 e2       	ldi	r22, 0x24	; 36
 326:	79 ed       	ldi	r23, 0xD9	; 217
 328:	8b e5       	ldi	r24, 0x5B	; 91
 32a:	97 e0       	ldi	r25, 0x07	; 7
 32c:	2d e1       	ldi	r18, 0x1D	; 29
 32e:	33 ef       	ldi	r19, 0xF3	; 243
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	0e 94 22 02 	call	0x444	; 0x444 <__divmodsi4>
 338:	49 01       	movw	r8, r18
 33a:	5a 01       	movw	r10, r20
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	a7 ea       	ldi	r26, 0xA7	; 167
 342:	b1 e4       	ldi	r27, 0x41	; 65
 344:	0e 94 41 02 	call	0x482	; 0x482 <__muluhisi3>
 348:	6b 01       	movw	r12, r22
 34a:	7c 01       	movw	r14, r24
 34c:	ac ee       	ldi	r26, 0xEC	; 236
 34e:	b4 ef       	ldi	r27, 0xF4	; 244
 350:	a5 01       	movw	r20, r10
 352:	94 01       	movw	r18, r8
 354:	0e 94 4f 02 	call	0x49e	; 0x49e <__mulohisi3>
 358:	c6 0e       	add	r12, r22
 35a:	d7 1e       	adc	r13, r23
 35c:	e8 1e       	adc	r14, r24
 35e:	f9 1e       	adc	r15, r25
 360:	f7 fe       	sbrs	r15, 7
 362:	06 c0       	rjmp	.+12     	; 0x370 <random_r+0x74>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	c8 1a       	sub	r12, r24
 368:	d1 08       	sbc	r13, r1
 36a:	e1 08       	sbc	r14, r1
 36c:	80 e8       	ldi	r24, 0x80	; 128
 36e:	f8 0a       	sbc	r15, r24
 370:	c8 82       	st	Y, r12
 372:	d9 82       	std	Y+1, r13	; 0x01
 374:	ea 82       	std	Y+2, r14	; 0x02
 376:	fb 82       	std	Y+3, r15	; 0x03
 378:	c7 01       	movw	r24, r14
 37a:	b6 01       	movw	r22, r12
 37c:	9f 77       	andi	r25, 0x7F	; 127
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	bf 90       	pop	r11
 38c:	af 90       	pop	r10
 38e:	9f 90       	pop	r9
 390:	8f 90       	pop	r8
 392:	08 95       	ret

00000394 <random>:
 394:	8f 92       	push	r8
 396:	9f 92       	push	r9
 398:	af 92       	push	r10
 39a:	bf 92       	push	r11
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 3a8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 3ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 3b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 3b4:	61 15       	cp	r22, r1
 3b6:	71 05       	cpc	r23, r1
 3b8:	81 05       	cpc	r24, r1
 3ba:	91 05       	cpc	r25, r1
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <random+0x32>
 3be:	64 e2       	ldi	r22, 0x24	; 36
 3c0:	79 ed       	ldi	r23, 0xD9	; 217
 3c2:	8b e5       	ldi	r24, 0x5B	; 91
 3c4:	97 e0       	ldi	r25, 0x07	; 7
 3c6:	2d e1       	ldi	r18, 0x1D	; 29
 3c8:	33 ef       	ldi	r19, 0xF3	; 243
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	0e 94 22 02 	call	0x444	; 0x444 <__divmodsi4>
 3d2:	49 01       	movw	r8, r18
 3d4:	5a 01       	movw	r10, r20
 3d6:	9b 01       	movw	r18, r22
 3d8:	ac 01       	movw	r20, r24
 3da:	a7 ea       	ldi	r26, 0xA7	; 167
 3dc:	b1 e4       	ldi	r27, 0x41	; 65
 3de:	0e 94 41 02 	call	0x482	; 0x482 <__muluhisi3>
 3e2:	6b 01       	movw	r12, r22
 3e4:	7c 01       	movw	r14, r24
 3e6:	ac ee       	ldi	r26, 0xEC	; 236
 3e8:	b4 ef       	ldi	r27, 0xF4	; 244
 3ea:	a5 01       	movw	r20, r10
 3ec:	94 01       	movw	r18, r8
 3ee:	0e 94 4f 02 	call	0x49e	; 0x49e <__mulohisi3>
 3f2:	c6 0e       	add	r12, r22
 3f4:	d7 1e       	adc	r13, r23
 3f6:	e8 1e       	adc	r14, r24
 3f8:	f9 1e       	adc	r15, r25
 3fa:	f7 fe       	sbrs	r15, 7
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	c8 1a       	sub	r12, r24
 402:	d1 08       	sbc	r13, r1
 404:	e1 08       	sbc	r14, r1
 406:	80 e8       	ldi	r24, 0x80	; 128
 408:	f8 0a       	sbc	r15, r24
 40a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
 40e:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
 412:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
 416:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
 41a:	c7 01       	movw	r24, r14
 41c:	b6 01       	movw	r22, r12
 41e:	9f 77       	andi	r25, 0x7F	; 127
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	08 95       	ret

00000432 <srandom>:
 432:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 436:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 43a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 43e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 442:	08 95       	ret

00000444 <__divmodsi4>:
 444:	05 2e       	mov	r0, r21
 446:	97 fb       	bst	r25, 7
 448:	1e f4       	brtc	.+6      	; 0x450 <__divmodsi4+0xc>
 44a:	00 94       	com	r0
 44c:	0e 94 39 02 	call	0x472	; 0x472 <__negsi2>
 450:	57 fd       	sbrc	r21, 7
 452:	07 d0       	rcall	.+14     	; 0x462 <__divmodsi4_neg2>
 454:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__udivmodsi4>
 458:	07 fc       	sbrc	r0, 7
 45a:	03 d0       	rcall	.+6      	; 0x462 <__divmodsi4_neg2>
 45c:	4e f4       	brtc	.+18     	; 0x470 <__divmodsi4_exit>
 45e:	0c 94 39 02 	jmp	0x472	; 0x472 <__negsi2>

00000462 <__divmodsi4_neg2>:
 462:	50 95       	com	r21
 464:	40 95       	com	r20
 466:	30 95       	com	r19
 468:	21 95       	neg	r18
 46a:	3f 4f       	sbci	r19, 0xFF	; 255
 46c:	4f 4f       	sbci	r20, 0xFF	; 255
 46e:	5f 4f       	sbci	r21, 0xFF	; 255

00000470 <__divmodsi4_exit>:
 470:	08 95       	ret

00000472 <__negsi2>:
 472:	90 95       	com	r25
 474:	80 95       	com	r24
 476:	70 95       	com	r23
 478:	61 95       	neg	r22
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <__muluhisi3>:
 482:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 486:	a5 9f       	mul	r26, r21
 488:	90 0d       	add	r25, r0
 48a:	b4 9f       	mul	r27, r20
 48c:	90 0d       	add	r25, r0
 48e:	a4 9f       	mul	r26, r20
 490:	80 0d       	add	r24, r0
 492:	91 1d       	adc	r25, r1
 494:	11 24       	eor	r1, r1
 496:	08 95       	ret

00000498 <__mulshisi3>:
 498:	b7 ff       	sbrs	r27, 7
 49a:	0c 94 41 02 	jmp	0x482	; 0x482 <__muluhisi3>

0000049e <__mulohisi3>:
 49e:	0e 94 41 02 	call	0x482	; 0x482 <__muluhisi3>
 4a2:	82 1b       	sub	r24, r18
 4a4:	93 0b       	sbc	r25, r19
 4a6:	08 95       	ret

000004a8 <__udivmodsi4>:
 4a8:	a1 e2       	ldi	r26, 0x21	; 33
 4aa:	1a 2e       	mov	r1, r26
 4ac:	aa 1b       	sub	r26, r26
 4ae:	bb 1b       	sub	r27, r27
 4b0:	fd 01       	movw	r30, r26
 4b2:	0d c0       	rjmp	.+26     	; 0x4ce <__udivmodsi4_ep>

000004b4 <__udivmodsi4_loop>:
 4b4:	aa 1f       	adc	r26, r26
 4b6:	bb 1f       	adc	r27, r27
 4b8:	ee 1f       	adc	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	a2 17       	cp	r26, r18
 4be:	b3 07       	cpc	r27, r19
 4c0:	e4 07       	cpc	r30, r20
 4c2:	f5 07       	cpc	r31, r21
 4c4:	20 f0       	brcs	.+8      	; 0x4ce <__udivmodsi4_ep>
 4c6:	a2 1b       	sub	r26, r18
 4c8:	b3 0b       	sbc	r27, r19
 4ca:	e4 0b       	sbc	r30, r20
 4cc:	f5 0b       	sbc	r31, r21

000004ce <__udivmodsi4_ep>:
 4ce:	66 1f       	adc	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	1a 94       	dec	r1
 4d8:	69 f7       	brne	.-38     	; 0x4b4 <__udivmodsi4_loop>
 4da:	60 95       	com	r22
 4dc:	70 95       	com	r23
 4de:	80 95       	com	r24
 4e0:	90 95       	com	r25
 4e2:	9b 01       	movw	r18, r22
 4e4:	ac 01       	movw	r20, r24
 4e6:	bd 01       	movw	r22, r26
 4e8:	cf 01       	movw	r24, r30
 4ea:	08 95       	ret

000004ec <__umulhisi3>:
 4ec:	a2 9f       	mul	r26, r18
 4ee:	b0 01       	movw	r22, r0
 4f0:	b3 9f       	mul	r27, r19
 4f2:	c0 01       	movw	r24, r0
 4f4:	a3 9f       	mul	r26, r19
 4f6:	70 0d       	add	r23, r0
 4f8:	81 1d       	adc	r24, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	91 1d       	adc	r25, r1
 4fe:	b2 9f       	mul	r27, r18
 500:	70 0d       	add	r23, r0
 502:	81 1d       	adc	r24, r1
 504:	11 24       	eor	r1, r1
 506:	91 1d       	adc	r25, r1
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>

Disassembly of section .bss:

00800104 <__bss_start>:
  800104:	00 00       	nop
	...

00800108 <timer0_fract>:
	...

00800109 <timer0_millis>:
  800109:	00 00       	nop
	...

Disassembly of section .comment:

00000000 <_end-0x80010d>:
   0:	47 43       	sbci	r20, 0x37	; 55
   2:	43 3a       	cpi	r20, 0xA3	; 163
   4:	20 28       	or	r2, r0
   6:	47 4e       	sbci	r20, 0xE7	; 231
   8:	55 29       	or	r21, r5
   a:	20 37       	cpi	r18, 0x70	; 112
   c:	2e 33       	cpi	r18, 0x3E	; 62
   e:	2e 30       	cpi	r18, 0x0E	; 14
	...

Disassembly of section .note.gnu.avr.deviceinfo:

00000000 <.note.gnu.avr.deviceinfo>:
   0:	04 00       	.word	0x0004	; ????
   2:	00 00       	nop
   4:	2d 00       	.word	0x002d	; ????
   6:	00 00       	nop
   8:	01 00       	.word	0x0001	; ????
   a:	00 00       	nop
   c:	41 56       	subi	r20, 0x61	; 97
   e:	52 00       	.word	0x0052	; ????
  10:	00 00       	nop
  12:	00 00       	nop
  14:	00 80       	ld	r0, Z
  16:	00 00       	nop
  18:	00 01       	movw	r0, r0
  1a:	00 00       	nop
  1c:	00 08       	sbc	r0, r0
  1e:	00 00       	nop
  20:	00 00       	nop
  22:	00 00       	nop
  24:	00 04       	cpc	r0, r0
  26:	00 00       	nop
  28:	08 00       	.word	0x0008	; ????
  2a:	00 00       	nop
  2c:	01 00       	.word	0x0001	; ????
  2e:	00 00       	nop
  30:	00 61       	ori	r16, 0x10	; 16
  32:	74 6d       	ori	r23, 0xD4	; 212
  34:	65 67       	ori	r22, 0x75	; 117
  36:	61 33       	cpi	r22, 0x31	; 49
  38:	32 38       	cpi	r19, 0x82	; 130
  3a:	70 00       	.word	0x0070	; ????
  3c:	00 00       	nop
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	24 00       	.word	0x0024	; ????
   2:	00 00       	nop
   4:	02 00       	.word	0x0002	; ????
   6:	f4 05       	cpc	r31, r4
   8:	00 00       	nop
   a:	04 00       	.word	0x0004	; ????
   c:	00 00       	nop
   e:	00 00       	nop
  10:	f6 00       	.word	0x00f6	; ????
  12:	00 00       	nop
  14:	24 01       	movw	r4, r8
  16:	00 00       	nop
  18:	1a 02       	muls	r17, r26
  1a:	00 00       	nop
  1c:	e2 00       	.word	0x00e2	; ????
	...
  26:	00 00       	nop
  28:	1c 00       	.word	0x001c	; ????
  2a:	00 00       	nop
  2c:	02 00       	.word	0x0002	; ????
  2e:	85 0c       	add	r8, r5
  30:	00 00       	nop
  32:	04 00       	.word	0x0004	; ????
  34:	00 00       	nop
  36:	00 00       	nop
  38:	0a 05       	cpc	r16, r10
  3a:	00 00       	nop
  3c:	04 00       	.word	0x0004	; ????
	...
  46:	00 00       	nop
  48:	1c 00       	.word	0x001c	; ????
  4a:	00 00       	nop
  4c:	02 00       	.word	0x0002	; ????
  4e:	40 0d       	add	r20, r0
  50:	00 00       	nop
  52:	04 00       	.word	0x0004	; ????
  54:	00 00       	nop
  56:	00 00       	nop
  58:	44 04       	cpc	r4, r4
  5a:	00 00       	nop
  5c:	2e 00       	.word	0x002e	; ????
	...
  66:	00 00       	nop
  68:	1c 00       	.word	0x001c	; ????
  6a:	00 00       	nop
  6c:	02 00       	.word	0x0002	; ????
  6e:	fb 0d       	add	r31, r11
  70:	00 00       	nop
  72:	04 00       	.word	0x0004	; ????
  74:	00 00       	nop
  76:	00 00       	nop
  78:	72 04       	cpc	r7, r2
  7a:	00 00       	nop
  7c:	10 00       	.word	0x0010	; ????
	...
  86:	00 00       	nop
  88:	1c 00       	.word	0x001c	; ????
  8a:	00 00       	nop
  8c:	02 00       	.word	0x0002	; ????
  8e:	b6 0e       	add	r11, r22
  90:	00 00       	nop
  92:	04 00       	.word	0x0004	; ????
  94:	00 00       	nop
  96:	00 00       	nop
  98:	c4 00       	.word	0x00c4	; ????
  9a:	00 00       	nop
  9c:	16 00       	.word	0x0016	; ????
	...
  a6:	00 00       	nop
  a8:	1c 00       	.word	0x001c	; ????
  aa:	00 00       	nop
  ac:	02 00       	.word	0x0002	; ????
  ae:	71 0f       	add	r23, r17
  b0:	00 00       	nop
  b2:	04 00       	.word	0x0004	; ????
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	82 04       	cpc	r8, r2
  ba:	00 00       	nop
  bc:	16 00       	.word	0x0016	; ????
	...
  c6:	00 00       	nop
  c8:	1c 00       	.word	0x001c	; ????
  ca:	00 00       	nop
  cc:	02 00       	.word	0x0002	; ????
  ce:	2c 10       	cpse	r2, r12
  d0:	00 00       	nop
  d2:	04 00       	.word	0x0004	; ????
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	98 04       	cpc	r9, r8
  da:	00 00       	nop
  dc:	10 00       	.word	0x0010	; ????
	...
  e6:	00 00       	nop
  e8:	1c 00       	.word	0x001c	; ????
  ea:	00 00       	nop
  ec:	02 00       	.word	0x0002	; ????
  ee:	e7 10       	cpse	r14, r7
  f0:	00 00       	nop
  f2:	04 00       	.word	0x0004	; ????
  f4:	00 00       	nop
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  f6:	00 00       	nop
  f8:	a8 04       	cpc	r10, r8
  fa:	00 00       	nop
	uint8_t bit = digitalPinToBitMask(pin);
  fc:	44 00       	.word	0x0044	; ????
	...
	uint8_t port = digitalPinToPort(pin);
 106:	00 00       	nop
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 108:	1c 00       	.word	0x001c	; ????
 10a:	00 00       	nop

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 10c:	02 00       	.word	0x0002	; ????
 10e:	a2 11       	cpse	r26, r2
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 110:	00 00       	nop
 112:	04 00       	.word	0x0004	; ????
 114:	00 00       	nop
 116:	00 00       	nop
 118:	ec 04       	cpc	r14, r12
 11a:	00 00       	nop
 11c:	1e 00       	.word	0x001e	; ????
	...

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 126:	00 00       	nop
 128:	1c 00       	.word	0x001c	; ????
 12a:	00 00       	nop

	uint8_t oldSREG = SREG;
 12c:	02 00       	.word	0x0002	; ????
	cli();
 12e:	5d 12       	cpse	r5, r29

	if (val == LOW) {
		*out &= ~bit;
 130:	00 00       	nop
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 132:	04 00       	.word	0x0004	; ????
 134:	00 00       	nop
		*out &= ~bit;
 136:	00 00       	nop
 138:	da 00       	.word	0x00da	; ????
	} else {
		*out |= bit;
 13a:	00 00       	nop
	}

	SREG = oldSREG;
 13c:	10 00       	.word	0x0010	; ????
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	f0 05       	cpc	r31, r0
       2:	00 00       	nop
       4:	02 00       	.word	0x0002	; ????
       6:	00 00       	nop
       8:	00 00       	nop
       a:	04 01       	movw	r0, r8
	...
      14:	02 0f       	add	r16, r18
      16:	00 00       	nop
      18:	00 01       	movw	r0, r0
      1a:	08 03       	fmul	r16, r16
      1c:	17 00       	.word	0x0017	; ????
      1e:	00 00       	nop
      20:	02 07       	cpc	r16, r18
      22:	04 14       	cp	r0, r4
      24:	00 00       	nop
      26:	00 05       	cpc	r16, r0
      28:	1b 00       	.word	0x001b	; ????
      2a:	00 00       	nop
      2c:	ff 03       	fmulsu	r23, r23
      2e:	00 06       	cpc	r0, r16
      30:	20 00       	.word	0x0020	; ????
      32:	00 00       	nop
      34:	00 00       	nop
      36:	22 00       	.word	0x0022	; ????
      38:	00 00       	nop
      3a:	01 05       	cpc	r16, r1
      3c:	03 00       	.word	0x0003	; ????
      3e:	00 81       	ld	r16, Z
      40:	00 07       	cpc	r16, r16
      42:	29 00       	.word	0x0029	; ????
      44:	00 00       	nop
      46:	00 00       	nop
      48:	14 00       	.word	0x0014	; ????
      4a:	00 00       	nop
      4c:	01 05       	cpc	r16, r1
      4e:	03 c6       	rjmp	.+3078   	; 0xc56 <__stack+0x357>
      50:	00 80       	ld	r0, Z
      52:	00 08       	sbc	r0, r0
      54:	2e 00       	.word	0x002e	; ????
      56:	00 00       	nop
      58:	00 00       	nop
      5a:	14 00       	.word	0x0014	; ????
      5c:	00 00       	nop
      5e:	01 05       	cpc	r16, r1
      60:	03 c0       	rjmp	.+6      	; 0x68 <__trampolines_end>
      62:	00 80       	ld	r0, Z
      64:	00 09       	sbc	r16, r0
      66:	35 00       	.word	0x0035	; ????
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	14 00       	.word	0x0014	; ????
      6e:	00 00       	nop
      70:	01 05       	cpc	r16, r1
      72:	03 c1       	rjmp	.+518    	; 0x27a <main+0x60>
      74:	00 80       	ld	r0, Z
      76:	00 0a       	sbc	r0, r16
      78:	3c 00       	.word	0x003c	; ????
      7a:	00 00       	nop
      7c:	00 00       	nop
      7e:	14 00       	.word	0x0014	; ????
      80:	00 00       	nop
      82:	01 05       	cpc	r16, r1
      84:	03 c2       	rjmp	.+1030   	; 0x48c <__muluhisi3+0xa>
      86:	00 80       	ld	r0, Z
      88:	00 0b       	sbc	r16, r16
      8a:	43 00       	.word	0x0043	; ????
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	1b 00       	.word	0x001b	; ????
      92:	00 00       	nop
      94:	01 05       	cpc	r16, r1
      96:	03 c4       	rjmp	.+2054   	; 0x89e <__data_load_end+0x38c>
      98:	00 80       	ld	r0, Z
      9a:	00 0c       	add	r0, r0
      9c:	49 00       	.word	0x0049	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	14 00       	.word	0x0014	; ????
      a4:	00 00       	nop
      a6:	01 05       	cpc	r16, r1
      a8:	03 bd       	out	0x23, r16	; 35
      aa:	00 80       	ld	r0, Z
      ac:	00 0d       	add	r16, r0
      ae:	4f 00       	.word	0x004f	; ????
      b0:	00 00       	nop
      b2:	00 00       	nop
      b4:	14 00       	.word	0x0014	; ????
      b6:	00 00       	nop
      b8:	01 05       	cpc	r16, r1
      ba:	03 b8       	out	0x03, r0	; 3
      bc:	00 80       	ld	r0, Z
      be:	00 0e       	add	r0, r16
      c0:	54 00       	.word	0x0054	; ????
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	14 00       	.word	0x0014	; ????
      c8:	00 00       	nop
      ca:	01 05       	cpc	r16, r1
      cc:	03 bc       	out	0x23, r0	; 35
      ce:	00 80       	ld	r0, Z
      d0:	00 0f       	add	r16, r16
      d2:	59 00       	.word	0x0059	; ????
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	14 00       	.word	0x0014	; ????
      da:	00 00       	nop
      dc:	01 05       	cpc	r16, r1
      de:	03 b9       	out	0x03, r16	; 3
      e0:	00 80       	ld	r0, Z
      e2:	00 10       	cpse	r0, r0
      e4:	5e 00       	.word	0x005e	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	14 00       	.word	0x0014	; ????
      ec:	00 00       	nop
      ee:	01 05       	cpc	r16, r1
      f0:	03 bb       	out	0x13, r16	; 19
      f2:	00 80       	ld	r0, Z
      f4:	00 11       	cpse	r16, r0
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
      f6:	63 00       	.word	0x0063	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
	uint8_t bit = digitalPinToBitMask(pin);
      fc:	14 00       	.word	0x0014	; ????
      fe:	00 00       	nop
     100:	01 05       	cpc	r16, r1
	uint8_t port = digitalPinToPort(pin);
     102:	03 ba       	out	0x13, r0	; 19
     104:	00 80       	ld	r0, Z
     106:	00 12       	cpse	r0, r16
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     108:	68 00       	.word	0x0068	; ????
     10a:	00 00       	nop

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     10c:	00 00       	nop
     10e:	14 00       	.word	0x0014	; ????
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     110:	00 00       	nop
     112:	01 05       	cpc	r16, r1
     114:	03 6f       	ori	r16, 0xF3	; 243
     116:	00 80       	ld	r0, Z
     118:	00 13       	cpse	r16, r16
     11a:	6f 00       	.word	0x006f	; ????
     11c:	00 00       	nop

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     11e:	00 00       	nop
     120:	14 00       	.word	0x0014	; ????
     122:	00 00       	nop
     124:	01 05       	cpc	r16, r1
     126:	03 36       	cpi	r16, 0x63	; 99
     128:	00 80       	ld	r0, Z
     12a:	00 14       	cp	r0, r0

	uint8_t oldSREG = SREG;
     12c:	75 00       	.word	0x0075	; ????
	cli();
     12e:	00 00       	nop

	if (val == LOW) {
		*out &= ~bit;
     130:	00 00       	nop
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     132:	14 00       	.word	0x0014	; ????
     134:	00 00       	nop
		*out &= ~bit;
     136:	01 05       	cpc	r16, r1
     138:	03 80       	ldd	r0, Z+3	; 0x03
	} else {
		*out |= bit;
     13a:	00 80       	ld	r0, Z
	}

	SREG = oldSREG;
     13c:	00 15       	cp	r16, r0
}
     13e:	7c 00       	.word	0x007c	; ????
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     140:	00 00       	nop
     142:	00 00       	nop
     144:	14 00       	.word	0x0014	; ????
     146:	00 00       	nop
     148:	01 05       	cpc	r16, r1
     14a:	03 81       	ldd	r16, Z+3	; 0x03
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     14c:	00 80       	ld	r0, Z
     14e:	00 16       	cp	r0, r16
     150:	83 00       	.word	0x0083	; ????
     152:	00 00       	nop
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     154:	00 00       	nop
     156:	14 00       	.word	0x0014	; ????
     158:	00 00       	nop
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     15a:	01 05       	cpc	r16, r1
     15c:	03 82       	std	Z+3, r0	; 0x03
     15e:	00 80       	ld	r0, Z
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     160:	00 17       	cp	r16, r16
     162:	8a 00       	.word	0x008a	; ????
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     164:	00 00       	nop
     166:	00 00       	nop
     168:	1b 00       	.word	0x001b	; ????
     16a:	00 00       	nop
     16c:	01 05       	cpc	r16, r1
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     16e:	03 84       	ldd	r0, Z+11	; 0x0b
     170:	00 80       	ld	r0, Z
     172:	00 18       	sub	r0, r0
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     174:	90 00       	.word	0x0090	; ????
     176:	00 00       	nop
     178:	00 00       	nop
     17a:	1b 00       	.word	0x001b	; ????
     17c:	00 00       	nop
     17e:	01 05       	cpc	r16, r1
     180:	03 88       	ldd	r0, Z+19	; 0x13
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
     182:	00 80       	ld	r0, Z
     184:	00 19       	sub	r16, r0
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     186:	96 00       	.word	0x0096	; ????
     188:	00 00       	nop
     18a:	00 00       	nop
     18c:	1b 00       	.word	0x001b	; ????
     18e:	00 00       	nop
     190:	01 05       	cpc	r16, r1
     192:	03 8a       	std	Z+19, r0	; 0x13
     194:	00 80       	ld	r0, Z
     196:	00 1a       	sub	r0, r16
     198:	9c 00       	.word	0x009c	; ????
     19a:	00 00       	nop
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     19c:	00 00       	nop
     19e:	1b 00       	.word	0x001b	; ????
     1a0:	00 00       	nop
     1a2:	01 05       	cpc	r16, r1
     1a4:	03 86       	std	Z+11, r0	; 0x0b
     1a6:	00 80       	ld	r0, Z
     1a8:	00 1b       	sub	r16, r16
     1aa:	a1 00       	.word	0x00a1	; ????
	unsigned char f = timer0_fract;
     1ac:	00 00       	nop
     1ae:	00 00       	nop

	m += MILLIS_INC;
	f += FRACT_INC;
     1b0:	14 00       	.word	0x0014	; ????
     1b2:	00 00       	nop
	if (f >= FRACT_MAX) {
     1b4:	01 05       	cpc	r16, r1
     1b6:	03 43       	sbci	r16, 0x33	; 51
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     1b8:	00 80       	ld	r0, Z
     1ba:	00 1c       	adc	r0, r0
     1bc:	a7 00       	.word	0x00a7	; ????
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
     1be:	00 00       	nop
     1c0:	00 00       	nop
	timer0_millis = m;
     1c2:	14 00       	.word	0x0014	; ????
     1c4:	00 00       	nop
     1c6:	01 05       	cpc	r16, r1
     1c8:	03 70       	andi	r16, 0x03	; 3
     1ca:	00 80       	ld	r0, Z
     1cc:	00 1d       	adc	r16, r0
     1ce:	ae 00       	.word	0x00ae	; ????
     1d0:	00 00       	nop
	timer0_overflow_count++;
     1d2:	00 00       	nop
     1d4:	14 00       	.word	0x0014	; ????
     1d6:	00 00       	nop
     1d8:	01 05       	cpc	r16, r1
     1da:	03 37       	cpi	r16, 0x73	; 115
     1dc:	00 80       	ld	r0, Z
     1de:	00 1e       	adc	r0, r16
     1e0:	b4 00       	.word	0x00b4	; ????
     1e2:	00 00       	nop
     1e4:	00 00       	nop
     1e6:	14 00       	.word	0x0014	; ????
     1e8:	00 00       	nop
     1ea:	01 05       	cpc	r16, r1
     1ec:	03 b0       	in	r0, 0x03	; 3
     1ee:	00 80       	ld	r0, Z
     1f0:	00 1f       	adc	r16, r16
     1f2:	bb 00       	.word	0x00bb	; ????
     1f4:	00 00       	nop
     1f6:	00 00       	nop
}
     1f8:	14 00       	.word	0x0014	; ????
     1fa:	00 00       	nop
     1fc:	01 05       	cpc	r16, r1
     1fe:	03 b1       	in	r16, 0x03	; 3
     200:	00 80       	ld	r0, Z
     202:	00 20       	and	r0, r0
     204:	c2 00       	.word	0x00c2	; ????
     206:	00 00       	nop
     208:	00 00       	nop
     20a:	14 00       	.word	0x0014	; ????
     20c:	00 00       	nop
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     20e:	01 05       	cpc	r16, r1
     210:	03 b2       	in	r0, 0x13	; 19
		m += 1;
     212:	00 80       	ld	r0, Z
     214:	00 21       	and	r16, r0
     216:	c8 00       	.word	0x00c8	; ????
     218:	00 00       	nop

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     21a:	00 00       	nop
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     21c:	14 00       	.word	0x0014	; ????
     21e:	00 00       	nop
     220:	01 05       	cpc	r16, r1
	sbi(TCCR0A, WGM00);
     222:	03 b4       	in	r0, 0x23	; 35
     224:	00 80       	ld	r0, Z
     226:	00 22       	and	r0, r16
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     228:	ce 00       	.word	0x00ce	; ????
     22a:	00 00       	nop
     22c:	00 00       	nop
	sbi(TCCR0B, CS00);
     22e:	14 00       	.word	0x0014	; ????
     230:	00 00       	nop
     232:	01 05       	cpc	r16, r1

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     234:	03 b3       	in	r16, 0x13	; 19
     236:	00 80       	ld	r0, Z
     238:	00 23       	and	r16, r16
     23a:	d4 00       	.word	0x00d4	; ????
     23c:	00 00       	nop
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     23e:	00 00       	nop
     240:	14 00       	.word	0x0014	; ????

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     242:	00 00       	nop
     244:	01 05       	cpc	r16, r1
     246:	03 b6       	in	r0, 0x33	; 51
     248:	00 80       	ld	r0, Z
     24a:	00 24       	eor	r0, r0
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     24c:	d9 00       	.word	0x00d9	; ????
     24e:	00 00       	nop
     250:	00 00       	nop
     252:	14 00       	.word	0x0014	; ????
     254:	00 00       	nop
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     256:	01 05       	cpc	r16, r1
     258:	03 43       	sbci	r16, 0x33	; 51
     25a:	00 80       	ld	r0, Z
     25c:	00 25       	eor	r16, r0
     25e:	df 00       	.word	0x00df	; ????

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     260:	00 00       	nop
     262:	00 00       	nop
     264:	14 00       	.word	0x0014	; ????
     266:	00 00       	nop
     268:	01 05       	cpc	r16, r1

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     26a:	03 7c       	andi	r16, 0xC3	; 195
     26c:	00 80       	ld	r0, Z
     26e:	00 26       	eor	r0, r16
     270:	e5 00       	.word	0x00e5	; ????
     272:	00 00       	nop
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     274:	00 00       	nop
     276:	1b 00       	.word	0x001b	; ????
     278:	00 00       	nop
     27a:	01 05       	cpc	r16, r1
     27c:	03 78       	andi	r16, 0x83	; 131
		sbi(ADCSRA, ADPS1);
     27e:	00 80       	ld	r0, Z
     280:	00 27       	eor	r16, r16
     282:	e9 00       	.word	0x00e9	; ????
     284:	00 00       	nop
     286:	00 00       	nop
		sbi(ADCSRA, ADPS0);
     288:	14 00       	.word	0x0014	; ????
     28a:	00 00       	nop
     28c:	01 05       	cpc	r16, r1
     28e:	03 7a       	andi	r16, 0xA3	; 163
     290:	00 80       	ld	r0, Z
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     292:	00 28       	or	r0, r0
     294:	f0 00       	.word	0x00f0	; ????
     296:	00 00       	nop
     298:	00 00       	nop
     29a:	14 00       	.word	0x0014	; ????
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     29c:	00 00       	nop
     29e:	01 05       	cpc	r16, r1
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     2a0:	03 7b       	andi	r16, 0xB3	; 179
     2a2:	00 80       	ld	r0, Z
     2a4:	00 29       	or	r16, r0
	uint8_t port = digitalPinToPort(pin);
     2a6:	f7 00       	.word	0x00f7	; ????
     2a8:	00 00       	nop
     2aa:	00 00       	nop
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     2ac:	14 00       	.word	0x0014	; ????
     2ae:	00 00       	nop

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     2b0:	01 05       	cpc	r16, r1
     2b2:	03 7e       	andi	r16, 0xE3	; 227
     2b4:	00 80       	ld	r0, Z
     2b6:	00 2a       	or	r0, r16
     2b8:	fd 00       	.word	0x00fd	; ????
     2ba:	00 00       	nop
     2bc:	00 00       	nop
     2be:	14 00       	.word	0x0014	; ????
	out = portOutputRegister(port);
     2c0:	00 00       	nop
     2c2:	01 05       	cpc	r16, r1
     2c4:	03 50       	subi	r16, 0x03	; 3
     2c6:	00 80       	ld	r0, Z
     2c8:	00 2b       	or	r16, r16
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     2ca:	02 01       	movw	r0, r4
                cli();
     2cc:	00 00       	nop
		*reg |= bit;
     2ce:	00 00       	nop
     2d0:	14 00       	.word	0x0014	; ????
     2d2:	00 00       	nop
		SREG = oldSREG;
     2d4:	01 05       	cpc	r16, r1
     2d6:	03 7f       	andi	r16, 0xF3	; 243
     2d8:	00 80       	ld	r0, Z
void loop() {
  // put your main code here, to run repeatedly:
  // Create trigger
  int randNumber1, randNumber2;
  randomSeed(0);
  noInterrupts();
     2da:	00 2c       	mov	r0, r0
  digitalWrite(LED_BUILTIN, LOW);   
     2dc:	08 01       	movw	r0, r16
     2de:	00 00       	nop
     2e0:	00 00       	nop
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
     2e2:	14 00       	.word	0x0014	; ????
     2e4:	00 00       	nop
     2e6:	01 05       	cpc	r16, r1
     2e8:	03 25       	eor	r16, r3
     2ea:	00 80       	ld	r0, Z
     2ec:	00 2d       	mov	r16, r0
     2ee:	0e 01       	movw	r0, r28
  //Code goes here
  randNumber1 = random(65535);
  randNumber2 = random(65535);
  interrupts();
     2f0:	00 00       	nop
     2f2:	00 00       	nop
     2f4:	14 00       	.word	0x0014	; ????
     2f6:	00 00       	nop
     2f8:	01 05       	cpc	r16, r1
     2fa:	03 24       	eor	r0, r3
     2fc:	00 80       	ld	r0, Z
     2fe:	00 2e       	mov	r0, r16
     300:	13 01       	movw	r2, r6
     302:	00 00       	nop
     304:	00 00       	nop
     306:	14 00       	.word	0x0014	; ????
     308:	00 00       	nop
     30a:	01 05       	cpc	r16, r1
     30c:	03 23       	and	r16, r19
     30e:	00 80       	ld	r0, Z
     310:	00 2f       	mov	r16, r16
     312:	18 01       	movw	r2, r16
     314:	00 00       	nop
     316:	00 00       	nop
     318:	14 00       	.word	0x0014	; ????
     31a:	00 00       	nop
     31c:	01 05       	cpc	r16, r1
     31e:	03 28       	or	r0, r3
     320:	00 80       	ld	r0, Z
     322:	00 30       	cpi	r16, 0x00	; 0
     324:	1e 01       	movw	r2, r28
     326:	00 00       	nop
     328:	00 00       	nop
     32a:	14 00       	.word	0x0014	; ????
     32c:	00 00       	nop
     32e:	01 05       	cpc	r16, r1
     330:	03 27       	eor	r16, r19
     332:	00 80       	ld	r0, Z
     334:	00 31       	cpi	r16, 0x10	; 16
     336:	23 01       	movw	r4, r6
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	14 00       	.word	0x0014	; ????
     33e:	00 00       	nop
     340:	01 05       	cpc	r16, r1
     342:	03 26       	eor	r0, r19
     344:	00 80       	ld	r0, Z
     346:	00 32       	cpi	r16, 0x20	; 32
     348:	28 01       	movw	r4, r16
     34a:	00 00       	nop
     34c:	00 00       	nop
     34e:	14 00       	.word	0x0014	; ????
     350:	00 00       	nop
     352:	01 05       	cpc	r16, r1
     354:	03 2b       	or	r16, r19
     356:	00 80       	ld	r0, Z
     358:	00 33       	cpi	r16, 0x30	; 48
     35a:	2e 01       	movw	r4, r28
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	14 00       	.word	0x0014	; ????
     362:	00 00       	nop
     364:	01 05       	cpc	r16, r1
     366:	03 2a       	or	r0, r19
     368:	00 80       	ld	r0, Z
     36a:	00 34       	cpi	r16, 0x40	; 64
     36c:	33 01       	movw	r6, r6
     36e:	00 00       	nop
     370:	00 00       	nop
     372:	14 00       	.word	0x0014	; ????
     374:	00 00       	nop
     376:	01 05       	cpc	r16, r1
     378:	03 29       	or	r16, r3
     37a:	00 80       	ld	r0, Z
     37c:	00 35       	cpi	r16, 0x50	; 80
     37e:	38 01       	movw	r6, r16
     380:	00 00       	nop
     382:	00 00       	nop
     384:	14 00       	.word	0x0014	; ????
     386:	00 00       	nop
     388:	01 05       	cpc	r16, r1
     38a:	03 48       	sbci	r16, 0x83	; 131
     38c:	00 80       	ld	r0, Z
     38e:	00 36       	cpi	r16, 0x60	; 96
     390:	3e 01       	movw	r6, r28
     392:	00 00       	nop
     394:	00 00       	nop
     396:	14 00       	.word	0x0014	; ????
     398:	00 00       	nop
     39a:	01 05       	cpc	r16, r1
     39c:	03 47       	sbci	r16, 0x73	; 115
     39e:	00 80       	ld	r0, Z
     3a0:	00 37       	cpi	r16, 0x70	; 112
     3a2:	44 01       	movw	r8, r8
     3a4:	00 00       	nop
     3a6:	00 00       	nop
     3a8:	14 00       	.word	0x0014	; ????
     3aa:	00 00       	nop
     3ac:	01 05       	cpc	r16, r1
     3ae:	03 46       	sbci	r16, 0x63	; 99
     3b0:	00 80       	ld	r0, Z
     3b2:	00 38       	cpi	r16, 0x80	; 128
     3b4:	4a 01       	movw	r8, r20
     3b6:	00 00       	nop
     3b8:	00 00       	nop
     3ba:	14 00       	.word	0x0014	; ????
     3bc:	00 00       	nop
     3be:	01 05       	cpc	r16, r1
     3c0:	03 45       	sbci	r16, 0x53	; 83
     3c2:	00 80       	ld	r0, Z
     3c4:	00 39       	cpi	r16, 0x90	; 144
     3c6:	51 01       	movw	r10, r2
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	14 00       	.word	0x0014	; ????
     3ce:	00 00       	nop
     3d0:	01 05       	cpc	r16, r1
     3d2:	03 44       	sbci	r16, 0x43	; 67
     3d4:	00 80       	ld	r0, Z
     3d6:	00 3a       	cpi	r16, 0xA0	; 160
     3d8:	58 01       	movw	r10, r16
     3da:	00 00       	nop
     3dc:	00 00       	nop
     3de:	14 00       	.word	0x0014	; ????
     3e0:	00 00       	nop
     3e2:	01 05       	cpc	r16, r1
     3e4:	03 6e       	ori	r16, 0xE3	; 227
     3e6:	00 80       	ld	r0, Z
     3e8:	00 3b       	cpi	r16, 0xB0	; 176
     3ea:	5f 01       	movw	r10, r30
     3ec:	00 00       	nop
     3ee:	00 00       	nop
     3f0:	14 00       	.word	0x0014	; ????
     3f2:	00 00       	nop
     3f4:	01 05       	cpc	r16, r1
     3f6:	03 35       	cpi	r16, 0x53	; 83
     3f8:	00 80       	ld	r0, Z
     3fa:	00 3c       	cpi	r16, 0xC0	; 192
     3fc:	65 01       	movw	r12, r10
     3fe:	00 00       	nop
     400:	00 00       	nop
     402:	14 00       	.word	0x0014	; ????
     404:	00 00       	nop
     406:	01 05       	cpc	r16, r1
     408:	03 43       	sbci	r16, 0x33	; 51
     40a:	00 80       	ld	r0, Z
     40c:	00 3d       	cpi	r16, 0xD0	; 208
     40e:	6b 01       	movw	r12, r22
     410:	00 00       	nop
     412:	00 00       	nop
     414:	14 00       	.word	0x0014	; ????
     416:	00 00       	nop
     418:	01 05       	cpc	r16, r1
     41a:	03 69       	ori	r16, 0x93	; 147
     41c:	00 80       	ld	r0, Z
     41e:	00 3e       	cpi	r16, 0xE0	; 224
     420:	71 01       	movw	r14, r2
     422:	00 00       	nop
     424:	00 00       	nop
     426:	14 00       	.word	0x0014	; ????
     428:	00 00       	nop
     42a:	01 05       	cpc	r16, r1
     42c:	03 3d       	cpi	r16, 0xD3	; 211
     42e:	00 80       	ld	r0, Z
     430:	00 3f       	cpi	r16, 0xF0	; 240
     432:	77 01       	movw	r14, r14
     434:	00 00       	nop
     436:	00 00       	nop
     438:	14 00       	.word	0x0014	; ????
     43a:	00 00       	nop
     43c:	01 05       	cpc	r16, r1
     43e:	03 3c       	cpi	r16, 0xC3	; 195
     440:	00 80       	ld	r0, Z
     442:	00 40       	sbci	r16, 0x00	; 0
     444:	7c 01       	movw	r14, r24
     446:	00 00       	nop
     448:	00 00       	nop
     44a:	14 00       	.word	0x0014	; ????
     44c:	00 00       	nop
     44e:	01 05       	cpc	r16, r1
     450:	03 68       	ori	r16, 0x83	; 131
     452:	00 80       	ld	r0, Z
     454:	00 41       	sbci	r16, 0x10	; 16
     456:	82 01       	movw	r16, r4
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	14 00       	.word	0x0014	; ????
     45e:	00 00       	nop
     460:	01 05       	cpc	r16, r1
     462:	03 6d       	ori	r16, 0xD3	; 211
     464:	00 80       	ld	r0, Z
     466:	00 42       	sbci	r16, 0x20	; 32
     468:	89 01       	movw	r16, r18
     46a:	00 00       	nop
     46c:	00 00       	nop
     46e:	14 00       	.word	0x0014	; ????
     470:	00 00       	nop
     472:	01 05       	cpc	r16, r1
     474:	03 6c       	ori	r16, 0xC3	; 195
     476:	00 80       	ld	r0, Z
     478:	00 43       	sbci	r16, 0x30	; 48
     47a:	90 01       	movw	r18, r0
     47c:	00 00       	nop
     47e:	00 00       	nop
     480:	14 00       	.word	0x0014	; ????
     482:	00 00       	nop
     484:	01 05       	cpc	r16, r1
     486:	03 6b       	ori	r16, 0xB3	; 179
     488:	00 80       	ld	r0, Z
     48a:	00 44       	sbci	r16, 0x40	; 64
     48c:	97 01       	movw	r18, r14
     48e:	00 00       	nop
     490:	00 00       	nop
     492:	14 00       	.word	0x0014	; ????
     494:	00 00       	nop
     496:	01 05       	cpc	r16, r1
     498:	03 3b       	cpi	r16, 0xB3	; 179
     49a:	00 80       	ld	r0, Z
     49c:	00 45       	sbci	r16, 0x50	; 80
     49e:	9d 01       	movw	r18, r26
     4a0:	00 00       	nop
     4a2:	00 00       	nop
     4a4:	14 00       	.word	0x0014	; ????
     4a6:	00 00       	nop
     4a8:	01 05       	cpc	r16, r1
     4aa:	03 4e       	sbci	r16, 0xE3	; 227
     4ac:	00 80       	ld	r0, Z
     4ae:	00 46       	sbci	r16, 0x60	; 96
     4b0:	a2 01       	movw	r20, r4
     4b2:	00 00       	nop
     4b4:	00 00       	nop
     4b6:	14 00       	.word	0x0014	; ????
     4b8:	00 00       	nop
     4ba:	01 05       	cpc	r16, r1
     4bc:	03 4d       	sbci	r16, 0xD3	; 211
     4be:	00 80       	ld	r0, Z
     4c0:	00 47       	sbci	r16, 0x70	; 112
     4c2:	a7 01       	movw	r20, r14
     4c4:	00 00       	nop
     4c6:	00 00       	nop
     4c8:	14 00       	.word	0x0014	; ????
     4ca:	00 00       	nop
     4cc:	01 05       	cpc	r16, r1
     4ce:	03 4c       	sbci	r16, 0xC3	; 195
     4d0:	00 80       	ld	r0, Z
     4d2:	00 48       	sbci	r16, 0x80	; 128
     4d4:	ac 01       	movw	r20, r24
     4d6:	00 00       	nop
     4d8:	00 00       	nop
     4da:	14 00       	.word	0x0014	; ????
     4dc:	00 00       	nop
     4de:	01 05       	cpc	r16, r1
     4e0:	03 60       	ori	r16, 0x03	; 3
     4e2:	00 80       	ld	r0, Z
     4e4:	00 49       	sbci	r16, 0x90	; 144
     4e6:	b3 01       	movw	r22, r6
     4e8:	00 00       	nop
     4ea:	00 00       	nop
     4ec:	14 00       	.word	0x0014	; ????
     4ee:	00 00       	nop
     4f0:	01 05       	cpc	r16, r1
     4f2:	03 64       	ori	r16, 0x43	; 67
     4f4:	00 80       	ld	r0, Z
     4f6:	00 4a       	sbci	r16, 0xA0	; 160
     4f8:	b7 01       	movw	r22, r14
     4fa:	00 00       	nop
     4fc:	00 00       	nop
     4fe:	14 00       	.word	0x0014	; ????
     500:	00 00       	nop
     502:	01 05       	cpc	r16, r1
     504:	03 66       	ori	r16, 0x63	; 99
     506:	00 80       	ld	r0, Z
     508:	00 4b       	sbci	r16, 0xB0	; 176
     50a:	be 01       	movw	r22, r28
     50c:	00 00       	nop
     50e:	00 00       	nop
     510:	14 00       	.word	0x0014	; ????
     512:	00 00       	nop
     514:	01 05       	cpc	r16, r1
     516:	03 61       	ori	r16, 0x13	; 19
     518:	00 80       	ld	r0, Z
     51a:	00 4c       	sbci	r16, 0xC0	; 192
     51c:	c4 01       	movw	r24, r8
     51e:	00 00       	nop
     520:	00 00       	nop
     522:	14 00       	.word	0x0014	; ????
     524:	00 00       	nop
     526:	01 05       	cpc	r16, r1
     528:	03 5f       	subi	r16, 0xF3	; 243
     52a:	00 80       	ld	r0, Z
     52c:	00 4d       	sbci	r16, 0xD0	; 208
     52e:	c9 01       	movw	r24, r18
     530:	00 00       	nop
     532:	00 00       	nop
     534:	1b 00       	.word	0x001b	; ????
     536:	00 00       	nop
     538:	01 05       	cpc	r16, r1
     53a:	03 5d       	subi	r16, 0xD3	; 211
     53c:	00 80       	ld	r0, Z
     53e:	00 4e       	sbci	r16, 0xE0	; 224
     540:	cc 01       	movw	r24, r24
     542:	00 00       	nop
     544:	00 00       	nop
     546:	14 00       	.word	0x0014	; ????
     548:	00 00       	nop
     54a:	01 05       	cpc	r16, r1
     54c:	03 57       	subi	r16, 0x73	; 115
     54e:	00 80       	ld	r0, Z
     550:	00 4f       	sbci	r16, 0xF0	; 240
     552:	d3 01       	movw	r26, r6
     554:	00 00       	nop
     556:	00 00       	nop
     558:	14 00       	.word	0x0014	; ????
     55a:	00 00       	nop
     55c:	01 05       	cpc	r16, r1
     55e:	03 55       	subi	r16, 0x53	; 83
     560:	00 80       	ld	r0, Z
     562:	00 50       	subi	r16, 0x00	; 0
     564:	d9 01       	movw	r26, r18
     566:	00 00       	nop
     568:	00 00       	nop
     56a:	14 00       	.word	0x0014	; ????
     56c:	00 00       	nop
     56e:	01 05       	cpc	r16, r1
     570:	03 54       	subi	r16, 0x43	; 67
     572:	00 80       	ld	r0, Z
     574:	00 51       	subi	r16, 0x10	; 16
     576:	df 01       	movw	r26, r30
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	14 00       	.word	0x0014	; ????
     57e:	00 00       	nop
     580:	01 05       	cpc	r16, r1
     582:	03 53       	subi	r16, 0x33	; 51
     584:	00 80       	ld	r0, Z
     586:	00 52       	subi	r16, 0x20	; 32
     588:	e4 01       	movw	r28, r8
     58a:	00 00       	nop
     58c:	00 00       	nop
     58e:	14 00       	.word	0x0014	; ????
     590:	00 00       	nop
     592:	01 05       	cpc	r16, r1
     594:	03 4b       	sbci	r16, 0xB3	; 179
     596:	00 80       	ld	r0, Z
     598:	00 53       	subi	r16, 0x30	; 48
     59a:	eb 01       	movw	r28, r22
     59c:	00 00       	nop
     59e:	00 00       	nop
     5a0:	14 00       	.word	0x0014	; ????
     5a2:	00 00       	nop
     5a4:	01 05       	cpc	r16, r1
     5a6:	03 4a       	sbci	r16, 0xA3	; 163
     5a8:	00 80       	ld	r0, Z
     5aa:	00 54       	subi	r16, 0x40	; 64
     5ac:	f2 01       	movw	r30, r4
     5ae:	00 00       	nop
     5b0:	00 00       	nop
     5b2:	14 00       	.word	0x0014	; ????
     5b4:	00 00       	nop
     5b6:	01 05       	cpc	r16, r1
     5b8:	03 3e       	cpi	r16, 0xE3	; 227
     5ba:	00 80       	ld	r0, Z
     5bc:	00 55       	subi	r16, 0x50	; 80
     5be:	f9 01       	movw	r30, r18
     5c0:	00 00       	nop
     5c2:	00 00       	nop
     5c4:	1b 00       	.word	0x001b	; ????
     5c6:	00 00       	nop
     5c8:	01 05       	cpc	r16, r1
     5ca:	03 41       	sbci	r16, 0x13	; 19
     5cc:	00 80       	ld	r0, Z
     5ce:	00 56       	subi	r16, 0x60	; 96
     5d0:	fe 01       	movw	r30, r28
     5d2:	00 00       	nop
     5d4:	00 00       	nop
     5d6:	14 00       	.word	0x0014	; ????
     5d8:	00 00       	nop
     5da:	01 05       	cpc	r16, r1
     5dc:	03 40       	sbci	r16, 0x03	; 3
     5de:	00 80       	ld	r0, Z
     5e0:	00 57       	subi	r16, 0x70	; 112
     5e2:	03 02       	muls	r16, r19
     5e4:	00 00       	nop
     5e6:	00 00       	nop
     5e8:	14 00       	.word	0x0014	; ????
     5ea:	00 00       	nop
     5ec:	01 05       	cpc	r16, r1
     5ee:	03 3f       	cpi	r16, 0xF3	; 243
     5f0:	00 80       	ld	r0, Z
     5f2:	00 00       	nop
     5f4:	8d 06       	cpc	r8, r29
     5f6:	00 00       	nop
     5f8:	02 00       	.word	0x0002	; ????
     5fa:	a2 05       	cpc	r26, r2
     5fc:	00 00       	nop
     5fe:	04 01       	movw	r0, r8
     600:	f1 03       	fmuls	r23, r17
     602:	00 00       	nop
     604:	04 c6       	rjmp	.+3080   	; 0x120e <__stack+0x90f>
     606:	04 00       	.word	0x0004	; ????
     608:	00 82       	st	Z, r0
     60a:	02 00       	.word	0x0002	; ????
     60c:	00 18       	sub	r0, r0
	...
     616:	00 00       	nop
     618:	00 1a       	sub	r0, r16
     61a:	00 00       	nop
     61c:	00 02       	muls	r16, r16
     61e:	8b 03       	fmulsu	r16, r19
     620:	00 00       	nop
     622:	06 7e       	andi	r16, 0xE6	; 230
     624:	34 00       	.word	0x0034	; ????
     626:	00 00       	nop
     628:	03 01       	movw	r0, r6
     62a:	08 10       	cpse	r0, r8
     62c:	03 00       	.word	0x0003	; ????
     62e:	00 02       	muls	r16, r16
     630:	e8 03       	fmulsu	r22, r16
     632:	00 00       	nop
     634:	06 80       	ldd	r0, Z+6	; 0x06
     636:	4b 00       	.word	0x004b	; ????
     638:	00 00       	nop
     63a:	04 3b       	cpi	r16, 0xB4	; 180
     63c:	00 00       	nop
     63e:	00 03       	mulsu	r16, r16
     640:	02 07       	cpc	r16, r18
     642:	42 03       	mulsu	r20, r18
     644:	00 00       	nop
     646:	05 7e       	andi	r16, 0xE5	; 229
     648:	03 00       	.word	0x0003	; ????
     64a:	00 01       	movw	r0, r0
     64c:	1d 01       	movw	r2, r26
     64e:	40 01       	movw	r8, r0
     650:	00 00       	nop
     652:	06 70       	andi	r16, 0x06	; 6
     654:	69 6e       	ori	r22, 0xE9	; 233
     656:	00 01       	movw	r0, r0
     658:	1d 29       	or	r17, r13
     65a:	00 00       	nop
     65c:	00 07       	cpc	r16, r16
     65e:	93 03       	fmuls	r17, r19
     660:	00 00       	nop
     662:	01 1d       	adc	r16, r1
     664:	29 00       	.word	0x0029	; ????
     666:	00 00       	nop
     668:	08 62       	ori	r16, 0x28	; 40
     66a:	69 74       	andi	r22, 0x49	; 73
     66c:	00 01       	movw	r0, r0
     66e:	1f 29       	or	r17, r15
     670:	00 00       	nop
     672:	00 09       	sbc	r16, r0
     674:	b4 03       	fmuls	r19, r20
     676:	00 00       	nop
     678:	01 20       	and	r0, r1
     67a:	29 00       	.word	0x0029	; ????
     67c:	00 00       	nop
     67e:	08 72       	andi	r16, 0x28	; 40
     680:	65 67       	ori	r22, 0x75	; 117
     682:	00 01       	movw	r0, r0
     684:	21 40       	sbci	r18, 0x01	; 1
     686:	01 00       	.word	0x0001	; ????
     688:	00 08       	sbc	r0, r0
     68a:	6f 75       	andi	r22, 0x5F	; 95
     68c:	74 00       	.word	0x0074	; ????
     68e:	01 21       	and	r16, r1
     690:	40 01       	movw	r8, r0
     692:	00 00       	nop
     694:	0a b1       	in	r16, 0x0a	; 10
     696:	00 00       	nop
     698:	00 09       	sbc	r16, r0
     69a:	58 03       	fmul	r21, r16
     69c:	00 00       	nop
     69e:	01 36       	cpi	r16, 0x61	; 97
     6a0:	29 00       	.word	0x0029	; ????
     6a2:	00 00       	nop
     6a4:	00 0a       	sbc	r0, r16
     6a6:	c2 00       	.word	0x00c2	; ????
     6a8:	00 00       	nop
     6aa:	09 58       	subi	r16, 0x89	; 137
     6ac:	03 00       	.word	0x0003	; ????
     6ae:	00 01       	movw	r0, r0
     6b0:	30 29       	or	r19, r0
     6b2:	00 00       	nop
     6b4:	00 00       	nop
     6b6:	0a d3       	rcall	.+1556   	; 0xccc <__stack+0x3cd>
     6b8:	00 00       	nop
     6ba:	00 09       	sbc	r16, r0
     6bc:	58 03       	fmul	r21, r16
     6be:	00 00       	nop
     6c0:	01 2a       	or	r0, r17
     6c2:	29 00       	.word	0x0029	; ????
     6c4:	00 00       	nop
     6c6:	00 0a       	sbc	r0, r16
     6c8:	ef 00       	.word	0x00ef	; ????
     6ca:	00 00       	nop
     6cc:	09 1b       	sub	r16, r25
     6ce:	02 00       	.word	0x0002	; ????
     6d0:	00 01       	movw	r0, r0
     6d2:	27 3b       	cpi	r18, 0xB7	; 183
     6d4:	00 00       	nop
     6d6:	00 09       	sbc	r16, r0
     6d8:	4f 03       	fmul	r20, r23
     6da:	00 00       	nop
     6dc:	01 27       	eor	r16, r17
     6de:	3b 00       	.word	0x003b	; ????
     6e0:	00 00       	nop
     6e2:	00 0a       	sbc	r0, r16
     6e4:	0b 01       	movw	r0, r22
     6e6:	00 00       	nop
     6e8:	09 1b       	sub	r16, r25
     6ea:	02 00       	.word	0x0002	; ????
     6ec:	00 01       	movw	r0, r0
     6ee:	26 3b       	cpi	r18, 0xB6	; 182
     6f0:	00 00       	nop
     6f2:	00 09       	sbc	r16, r0
     6f4:	4f 03       	fmul	r20, r23
     6f6:	00 00       	nop
     6f8:	01 26       	eor	r0, r17
     6fa:	3b 00       	.word	0x003b	; ????
     6fc:	00 00       	nop
     6fe:	00 0a       	sbc	r0, r16
     700:	27 01       	movw	r4, r14
     702:	00 00       	nop
     704:	09 1b       	sub	r16, r25
     706:	02 00       	.word	0x0002	; ????
     708:	00 01       	movw	r0, r0
     70a:	20 3b       	cpi	r18, 0xB0	; 176
     70c:	00 00       	nop
     70e:	00 09       	sbc	r16, r0
     710:	4f 03       	fmul	r20, r23
     712:	00 00       	nop
     714:	01 20       	and	r0, r1
     716:	29 00       	.word	0x0029	; ????
     718:	00 00       	nop
     71a:	00 0b       	sbc	r16, r16
     71c:	09 1b       	sub	r16, r25
     71e:	02 00       	.word	0x0002	; ????
     720:	00 01       	movw	r0, r0
     722:	1f 3b       	cpi	r17, 0xBF	; 191
     724:	00 00       	nop
     726:	00 09       	sbc	r16, r0
     728:	4f 03       	fmul	r20, r23
     72a:	00 00       	nop
     72c:	01 1f       	adc	r16, r17
     72e:	29 00       	.word	0x0029	; ????
     730:	00 00       	nop
     732:	00 00       	nop
     734:	0c 02       	muls	r16, r28
     736:	4d 01       	movw	r8, r26
     738:	00 00       	nop
     73a:	03 01       	movw	r0, r6
     73c:	08 8b       	std	Y+16, r16	; 0x10
     73e:	03 00       	.word	0x0003	; ????
     740:	00 0d       	add	r16, r0
     742:	46 01       	movw	r8, r12
     744:	00 00       	nop
     746:	05 e9       	ldi	r16, 0x95	; 149
     748:	04 00       	.word	0x0004	; ????
     74a:	00 05       	cpc	r16, r0
     74c:	1c 01       	movw	r2, r24
     74e:	6a 01       	movw	r12, r20
     750:	00 00       	nop
     752:	07 86       	std	Z+15, r0	; 0x0f
     754:	03 00       	.word	0x0003	; ????
     756:	00 05       	cpc	r16, r0
     758:	1c 6a       	ori	r17, 0xAC	; 172
     75a:	01 00       	.word	0x0001	; ????
     75c:	00 00       	nop
     75e:	03 04       	cpc	r0, r3
     760:	07 3d       	cpi	r16, 0xD7	; 215
     762:	03 00       	.word	0x0003	; ????
     764:	00 0e       	add	r0, r16
     766:	5f 02       	muls	r21, r31
     768:	00 00       	nop
     76a:	05 23       	and	r16, r21
     76c:	8d 01       	movw	r16, r26
     76e:	00 00       	nop
     770:	01 8d       	ldd	r16, Z+25	; 0x19
     772:	01 00       	.word	0x0001	; ????
     774:	00 07       	cpc	r16, r16
     776:	72 03       	mulsu	r23, r18
     778:	00 00       	nop
     77a:	05 23       	and	r16, r21
     77c:	8d 01       	movw	r16, r26
     77e:	00 00       	nop
     780:	00 03       	mulsu	r16, r16
     782:	04 05       	cpc	r16, r4
     784:	d3 04       	cpc	r13, r3
     786:	00 00       	nop
     788:	05 1e       	adc	r0, r21
     78a:	03 00       	.word	0x0003	; ????
     78c:	00 01       	movw	r0, r0
     78e:	8a 01       	movw	r16, r20
     790:	5a 02       	muls	r21, r26
     792:	00 00       	nop
     794:	06 70       	andi	r16, 0x06	; 6
     796:	69 6e       	ori	r22, 0xE9	; 233
     798:	00 01       	movw	r0, r0
     79a:	8a 29       	or	r24, r10
     79c:	00 00       	nop
     79e:	00 06       	cpc	r0, r16
     7a0:	76 61       	ori	r23, 0x16	; 22
     7a2:	6c 00       	.word	0x006c	; ????
     7a4:	01 8a       	std	Z+17, r0	; 0x11
     7a6:	29 00       	.word	0x0029	; ????
     7a8:	00 00       	nop
     7aa:	09 2b       	or	r16, r25
     7ac:	03 00       	.word	0x0003	; ????
     7ae:	00 01       	movw	r0, r0
     7b0:	8c 29       	or	r24, r12
     7b2:	00 00       	nop
     7b4:	00 08       	sbc	r0, r0
     7b6:	62 69       	ori	r22, 0x92	; 146
     7b8:	74 00       	.word	0x0074	; ????
     7ba:	01 8d       	ldd	r16, Z+25	; 0x19
     7bc:	29 00       	.word	0x0029	; ????
     7be:	00 00       	nop
     7c0:	09 b4       	in	r0, 0x29	; 41
     7c2:	03 00       	.word	0x0003	; ????
     7c4:	00 01       	movw	r0, r0
     7c6:	8e 29       	or	r24, r14
     7c8:	00 00       	nop
     7ca:	00 08       	sbc	r0, r0
     7cc:	6f 75       	andi	r22, 0x5F	; 95
     7ce:	74 00       	.word	0x0074	; ????
     7d0:	01 8f       	std	Z+25, r16	; 0x19
     7d2:	40 01       	movw	r8, r0
     7d4:	00 00       	nop
     7d6:	09 58       	subi	r16, 0x89	; 137
     7d8:	03 00       	.word	0x0003	; ????
     7da:	00 01       	movw	r0, r0
     7dc:	99 29       	or	r25, r9
     7de:	00 00       	nop
     7e0:	00 0a       	sbc	r0, r16
     7e2:	09 02       	muls	r16, r25
     7e4:	00 00       	nop
     7e6:	09 1b       	sub	r16, r25
     7e8:	02 00       	.word	0x0002	; ????
     7ea:	00 01       	movw	r0, r0
     7ec:	97 3b       	cpi	r25, 0xB7	; 183
     7ee:	00 00       	nop
     7f0:	00 09       	sbc	r16, r0
     7f2:	4f 03       	fmul	r20, r23
     7f4:	00 00       	nop
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	3b 00       	.word	0x003b	; ????
     7fa:	00 00       	nop
     7fc:	00 0a       	sbc	r0, r16
     7fe:	25 02       	muls	r18, r21
     800:	00 00       	nop
     802:	09 1b       	sub	r16, r25
     804:	02 00       	.word	0x0002	; ????
     806:	00 01       	movw	r0, r0
     808:	8e 3b       	cpi	r24, 0xBE	; 190
     80a:	00 00       	nop
     80c:	00 09       	sbc	r16, r0
     80e:	4f 03       	fmul	r20, r23
     810:	00 00       	nop
     812:	01 8e       	std	Z+25, r0	; 0x19
     814:	29 00       	.word	0x0029	; ????
     816:	00 00       	nop
     818:	00 0a       	sbc	r0, r16
     81a:	41 02       	muls	r20, r17
     81c:	00 00       	nop
     81e:	09 1b       	sub	r16, r25
     820:	02 00       	.word	0x0002	; ????
     822:	00 01       	movw	r0, r0
     824:	8d 3b       	cpi	r24, 0xBD	; 189
     826:	00 00       	nop
     828:	00 09       	sbc	r16, r0
     82a:	4f 03       	fmul	r20, r23
     82c:	00 00       	nop
     82e:	01 8d       	ldd	r16, Z+25	; 0x19
     830:	29 00       	.word	0x0029	; ????
     832:	00 00       	nop
     834:	00 0b       	sbc	r16, r16
     836:	09 1b       	sub	r16, r25
     838:	02 00       	.word	0x0002	; ????
     83a:	00 01       	movw	r0, r0
     83c:	8c 3b       	cpi	r24, 0xBC	; 188
     83e:	00 00       	nop
     840:	00 09       	sbc	r16, r0
     842:	4f 03       	fmul	r20, r23
     844:	00 00       	nop
     846:	01 8c       	ldd	r0, Z+25	; 0x19
     848:	29 00       	.word	0x0029	; ????
     84a:	00 00       	nop
     84c:	00 00       	nop
     84e:	05 98       	cbi	0x00, 5	; 0
     850:	03 00       	.word	0x0003	; ????
     852:	00 01       	movw	r0, r0
     854:	4b 01       	movw	r8, r22
     856:	72 02       	muls	r23, r18
     858:	00 00       	nop
     85a:	07 2b       	or	r16, r23
     85c:	03 00       	.word	0x0003	; ????
     85e:	00 01       	movw	r0, r0
     860:	4b 29       	or	r20, r11
     862:	00 00       	nop
     864:	00 00       	nop
     866:	0f 60       	ori	r16, 0x0F	; 15
     868:	03 00       	.word	0x0003	; ????
     86a:	00 01       	movw	r0, r0
     86c:	01 89       	ldd	r16, Z+17	; 0x11
     86e:	02 00       	.word	0x0002	; ????
     870:	00 09       	sbc	r16, r0
     872:	2b 03       	fmul	r18, r19
     874:	00 00       	nop
     876:	01 4b       	sbci	r16, 0xB1	; 177
     878:	29 00       	.word	0x0029	; ????
     87a:	00 00       	nop
     87c:	00 10       	cpse	r0, r0
     87e:	94 01       	movw	r18, r8
     880:	00 00       	nop
     882:	f6 00       	.word	0x00f6	; ????
     884:	00 00       	nop
     886:	86 01       	movw	r16, r12
     888:	00 00       	nop
     88a:	03 92       	.word	0x9203	; ????
     88c:	20 02       	muls	r18, r16
     88e:	01 92       	st	Z+, r0
     890:	03 00       	.word	0x0003	; ????
     892:	00 11       	cpse	r16, r0
     894:	ab 01       	movw	r20, r22
     896:	00 00       	nop
     898:	01 68       	ori	r16, 0x81	; 129
     89a:	12 b6       	in	r1, 0x32	; 50
     89c:	01 00       	.word	0x0001	; ????
     89e:	00 00       	nop
     8a0:	00 00       	nop
     8a2:	00 12       	cpse	r0, r16
     8a4:	c1 01       	movw	r24, r2
     8a6:	00 00       	nop
     8a8:	55 00       	.word	0x0055	; ????
     8aa:	00 00       	nop
     8ac:	12 cc       	rjmp	.-2012   	; 0xd2 <__do_copy_data+0xe>
     8ae:	01 00       	.word	0x0001	; ????
     8b0:	00 81       	ld	r16, Z
     8b2:	00 00       	nop
     8b4:	00 12       	cpse	r0, r16
     8b6:	d7 01       	movw	r26, r14
     8b8:	00 00       	nop
     8ba:	9f 00       	.word	0x009f	; ????
     8bc:	00 00       	nop
     8be:	12 e2       	ldi	r17, 0x22	; 34
     8c0:	01 00       	.word	0x0001	; ????
     8c2:	00 c7       	rjmp	.+3584   	; 0x16c4 <__stack+0xdc5>
     8c4:	00 00       	nop
     8c6:	00 13       	cpse	r16, r16
     8c8:	a0 01       	movw	r20, r0
     8ca:	00 00       	nop
     8cc:	0d 14       	cp	r0, r13
     8ce:	41 02       	muls	r20, r17
     8d0:	00 00       	nop
     8d2:	f6 00       	.word	0x00f6	; ????
     8d4:	00 00       	nop
     8d6:	fc 00       	.word	0x00fc	; ????
     8d8:	00 00       	nop
     8da:	fd 02       	muls	r31, r29
     8dc:	00 00       	nop
     8de:	12 42       	sbci	r17, 0x22	; 34
     8e0:	02 00       	.word	0x0002	; ????
     8e2:	00 e5       	ldi	r16, 0x50	; 80
     8e4:	00 00       	nop
     8e6:	00 12       	cpse	r0, r16
     8e8:	4d 02       	muls	r20, r29
     8ea:	00 00       	nop
     8ec:	00 00       	nop
     8ee:	00 00       	nop
     8f0:	00 14       	cp	r0, r0
     8f2:	25 02       	muls	r18, r21
     8f4:	00 00       	nop
     8f6:	fc 00       	.word	0x00fc	; ????
     8f8:	00 00       	nop
     8fa:	02 01       	movw	r0, r4
     8fc:	00 00       	nop
     8fe:	21 03       	mulsu	r18, r17
     900:	00 00       	nop
     902:	12 2a       	or	r1, r18
     904:	02 00       	.word	0x0002	; ????
     906:	00 fd       	sbrc	r16, 0
     908:	00 00       	nop
     90a:	00 12       	cpse	r0, r16
     90c:	35 02       	muls	r19, r21
     90e:	00 00       	nop
     910:	55 00       	.word	0x0055	; ????
     912:	00 00       	nop
     914:	00 14       	cp	r0, r0
     916:	09 02       	muls	r16, r25
     918:	00 00       	nop
     91a:	02 01       	movw	r0, r4
     91c:	00 00       	nop
     91e:	08 01       	movw	r0, r16
     920:	00 00       	nop
     922:	45 03       	mulsu	r20, r21
     924:	00 00       	nop
     926:	12 0e       	add	r1, r18
     928:	02 00       	.word	0x0002	; ????
     92a:	00 15       	cp	r16, r0
     92c:	01 00       	.word	0x0001	; ????
     92e:	00 12       	cpse	r0, r16
     930:	19 02       	muls	r17, r25
     932:	00 00       	nop
     934:	81 00       	.word	0x0081	; ????
     936:	00 00       	nop
     938:	00 15       	cp	r16, r0
     93a:	5a 02       	muls	r21, r26
     93c:	00 00       	nop
     93e:	10 01       	movw	r2, r0
     940:	00 00       	nop
     942:	00 00       	nop
     944:	00 00       	nop
     946:	01 95       	neg	r16
     948:	71 03       	mulsu	r23, r17
     94a:	00 00       	nop
     94c:	16 66       	ori	r17, 0x66	; 102
     94e:	02 00       	.word	0x0002	; ????
     950:	00 2d       	mov	r16, r0
     952:	01 00       	.word	0x0001	; ????
     954:	00 17       	cp	r16, r16
     956:	60 01       	movw	r12, r0
     958:	00 00       	nop
     95a:	64 01       	movw	r12, r8
     95c:	00 00       	nop
     95e:	18 7d       	andi	r17, 0xD8	; 216
     960:	02 00       	.word	0x0002	; ????
     962:	00 00       	nop
     964:	00 19       	sub	r16, r0
     966:	ed 01       	movw	r28, r26
     968:	00 00       	nop
     96a:	1e 01       	movw	r2, r28
     96c:	00 00       	nop
     96e:	2c 01       	movw	r4, r24
     970:	00 00       	nop
     972:	12 f2       	brmi	.-124    	; 0x8f8 <__data_load_end+0x3e6>
     974:	01 00       	.word	0x0001	; ????
     976:	00 82       	st	Z, r0
     978:	01 00       	.word	0x0001	; ????
     97a:	00 12       	cpse	r0, r16
     97c:	fd 01       	movw	r30, r26
     97e:	00 00       	nop
     980:	9f 00       	.word	0x009f	; ????
     982:	00 00       	nop
     984:	00 00       	nop
     986:	1a 01       	movw	r2, r20
     988:	f6 02       	muls	r31, r22
     98a:	00 00       	nop
     98c:	02 2d       	mov	r16, r2
     98e:	86 01       	movw	r16, r12
     990:	00 00       	nop
     992:	1a 02       	muls	r17, r26
     994:	00 00       	nop
     996:	9a 01       	movw	r18, r20
     998:	00 00       	nop
     99a:	01 c6       	rjmp	.+3074   	; 0x159e <__stack+0xc9f>
     99c:	03 00       	.word	0x0003	; ????
     99e:	00 1b       	sub	r16, r16
     9a0:	6d 00       	.word	0x006d	; ????
     9a2:	02 32       	cpi	r16, 0x22	; 34
     9a4:	6a 01       	movw	r12, r20
     9a6:	00 00       	nop
     9a8:	17 02       	muls	r17, r23
     9aa:	00 00       	nop
     9ac:	1b 66       	ori	r17, 0x6B	; 107
     9ae:	00 02       	muls	r16, r16
     9b0:	33 34       	cpi	r19, 0x43	; 67
     9b2:	00 00       	nop
     9b4:	00 8a       	std	Z+16, r0	; 0x10
     9b6:	02 00       	.word	0x0002	; ????
     9b8:	00 00       	nop
     9ba:	1c 24       	eor	r1, r12
     9bc:	02 00       	.word	0x0002	; ????
     9be:	00 04       	cpc	r0, r0
     9c0:	01 01       	movw	r0, r2
     9c2:	1c 31       	cpi	r17, 0x1C	; 28
     9c4:	03 00       	.word	0x0003	; ????
     9c6:	00 03       	mulsu	r16, r16
     9c8:	1c 01       	movw	r2, r24
     9ca:	1c 42       	sbci	r17, 0x2C	; 44
     9cc:	02 00       	.word	0x0002	; ????
     9ce:	00 02       	muls	r16, r16
     9d0:	f1 01       	movw	r30, r2
     9d2:	05 f1       	brhs	.+64     	; 0xa14 <__stack+0x115>
     9d4:	02 00       	.word	0x0002	; ????
     9d6:	00 04       	cpc	r0, r0
     9d8:	07 01       	movw	r0, r14
     9da:	01 04       	cpc	r0, r1
     9dc:	00 00       	nop
     9de:	09 2a       	or	r0, r25
     9e0:	02 00       	.word	0x0002	; ????
     9e2:	00 04       	cpc	r0, r0
     9e4:	0a 01       	movw	r0, r20
     9e6:	04 00       	.word	0x0004	; ????
     9e8:	00 09       	sbc	r16, r0
     9ea:	36 02       	muls	r19, r22
     9ec:	00 00       	nop
     9ee:	04 0a       	sbc	r0, r20
     9f0:	01 04       	cpc	r0, r1
     9f2:	00 00       	nop
     9f4:	00 1d       	adc	r16, r0
     9f6:	02 05       	cpc	r16, r2
     9f8:	69 6e       	ori	r22, 0xE9	; 233
     9fa:	74 00       	.word	0x0074	; ????
     9fc:	1e 01       	movw	r2, r28
     9fe:	79 03       	fmul	r23, r17
     a00:	00 00       	nop
     a02:	03 21       	and	r16, r3
     a04:	01 04       	cpc	r0, r1
     a06:	00 00       	nop
     a08:	01 1a       	sub	r0, r17
     a0a:	02 00       	.word	0x0002	; ????
     a0c:	00 fc       	sbrc	r0, 0
     a0e:	02 00       	.word	0x0002	; ????
     a10:	00 03       	mulsu	r16, r16
     a12:	92 20       	and	r9, r2
     a14:	02 01       	movw	r0, r4
     a16:	c6 05       	cpc	r28, r6
     a18:	00 00       	nop
     a1a:	1f d6       	rcall	.+3134   	; 0x165a <__stack+0xd5b>
     a1c:	03 00       	.word	0x0003	; ????
     a1e:	00 1a       	sub	r0, r16
     a20:	02 00       	.word	0x0002	; ????
     a22:	00 a0       	ldd	r0, Z+32	; 0x20
     a24:	02 00       	.word	0x0002	; ????
     a26:	00 03       	mulsu	r16, r16
     a28:	23 20       	and	r2, r3
     a2a:	c6 03       	fmuls	r20, r22
     a2c:	00 00       	nop
     a2e:	a0 02       	muls	r26, r16
     a30:	00 00       	nop
     a32:	d6 02       	muls	r29, r22
     a34:	00 00       	nop
     a36:	03 2b       	or	r16, r19
     a38:	32 05       	cpc	r19, r2
     a3a:	00 00       	nop
     a3c:	21 52       	subi	r18, 0x21	; 33
     a3e:	00 00       	nop
     a40:	00 a0       	ldd	r0, Z+32	; 0x20
     a42:	02 00       	.word	0x0002	; ????
     a44:	00 d6       	rcall	.+3072   	; 0x1646 <__stack+0xd47>
     a46:	02 00       	.word	0x0002	; ????
     a48:	00 04       	cpc	r0, r0
     a4a:	04 13       	cpse	r16, r20
     a4c:	5e 00       	.word	0x005e	; ????
     a4e:	00 00       	nop
     a50:	0d 13       	cpse	r16, r29
     a52:	69 00       	.word	0x0069	; ????
     a54:	00 00       	nop
     a56:	01 17       	cp	r16, r17
     a58:	a0 02       	muls	r26, r16
     a5a:	00 00       	nop
     a5c:	d6 02       	muls	r29, r22
     a5e:	00 00       	nop
     a60:	12 74       	andi	r17, 0x42	; 66
     a62:	00 00       	nop
     a64:	00 da       	rcall	.-3072   	; 0xfffffe66 <__eeprom_end+0xff7efe66>
     a66:	02 00       	.word	0x0002	; ????
     a68:	00 12       	cpse	r0, r16
     a6a:	7f 00       	.word	0x007f	; ????
     a6c:	00 00       	nop
     a6e:	ed 02       	muls	r30, r29
     a70:	00 00       	nop
     a72:	12 8a       	std	Z+18, r1	; 0x12
     a74:	00 00       	nop
     a76:	00 00       	nop
     a78:	03 00       	.word	0x0003	; ????
     a7a:	00 18       	sub	r0, r0
     a7c:	95 00       	.word	0x0095	; ????
     a7e:	00 00       	nop
     a80:	14 27       	eor	r17, r20
     a82:	01 00       	.word	0x0001	; ????
     a84:	00 a0       	ldd	r0, Z+32	; 0x20
     a86:	02 00       	.word	0x0002	; ????
     a88:	00 a6       	std	Z+40, r0	; 0x28
     a8a:	02 00       	.word	0x0002	; ????
     a8c:	00 b0       	in	r0, 0x00	; 0
     a8e:	04 00       	.word	0x0004	; ????
     a90:	00 12       	cpse	r0, r16
     a92:	28 01       	movw	r4, r16
     a94:	00 00       	nop
     a96:	18 03       	fmul	r17, r16
     a98:	00 00       	nop
     a9a:	12 33       	cpi	r17, 0x32	; 50
     a9c:	01 00       	.word	0x0001	; ????
     a9e:	00 da       	rcall	.-3072   	; 0xfffffea0 <__eeprom_end+0xff7efea0>
     aa0:	02 00       	.word	0x0002	; ????
     aa2:	00 00       	nop
     aa4:	14 0b       	sbc	r17, r20
     aa6:	01 00       	.word	0x0001	; ????
     aa8:	00 a6       	std	Z+40, r0	; 0x28
     aaa:	02 00       	.word	0x0002	; ????
     aac:	00 ac       	ldd	r0, Z+56	; 0x38
     aae:	02 00       	.word	0x0002	; ????
     ab0:	00 d4       	rcall	.+2048   	; 0x12b2 <__stack+0x9b3>
     ab2:	04 00       	.word	0x0004	; ????
     ab4:	00 12       	cpse	r0, r16
     ab6:	10 01       	movw	r2, r0
     ab8:	00 00       	nop
     aba:	30 03       	mulsu	r19, r16
     abc:	00 00       	nop
     abe:	12 1b       	sub	r17, r18
     ac0:	01 00       	.word	0x0001	; ????
     ac2:	00 ed       	ldi	r16, 0xD0	; 208
     ac4:	02 00       	.word	0x0002	; ????
     ac6:	00 00       	nop
     ac8:	14 ef       	ldi	r17, 0xF4	; 244
     aca:	00 00       	nop
     acc:	00 b0       	in	r0, 0x00	; 0
     ace:	02 00       	.word	0x0002	; ????
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <__stack+0x1d3>
     ad2:	02 00       	.word	0x0002	; ????
     ad4:	00 f8       	bld	r0, 0
     ad6:	04 00       	.word	0x0004	; ????
     ad8:	00 12       	cpse	r0, r16
     ada:	f4 00       	.word	0x00f4	; ????
     adc:	00 00       	nop
     ade:	48 03       	fmul	r20, r16
     ae0:	00 00       	nop
     ae2:	12 ff       	sbrs	r17, 2
     ae4:	00 00       	nop
     ae6:	00 00       	nop
     ae8:	03 00       	.word	0x0003	; ????
     aea:	00 00       	nop
     aec:	14 d3       	rcall	.+1576   	; 0x1116 <__stack+0x817>
     aee:	00 00       	nop
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <__stack+0x1f3>
     af2:	02 00       	.word	0x0002	; ????
     af4:	00 ca       	rjmp	.-3072   	; 0xfffffef6 <__eeprom_end+0xff7efef6>
     af6:	02 00       	.word	0x0002	; ????
     af8:	00 18       	sub	r0, r0
     afa:	05 00       	.word	0x0005	; ????
     afc:	00 12       	cpse	r0, r16
     afe:	d8 00       	.word	0x00d8	; ????
     b00:	00 00       	nop
     b02:	60 03       	mulsu	r22, r16
     b04:	00 00       	nop
     b06:	18 e3       	ldi	r17, 0x38	; 56
     b08:	00 00       	nop
     b0a:	00 00       	nop
     b0c:	19 a0       	ldd	r1, Y+33	; 0x21
     b0e:	00 00       	nop
     b10:	00 ca       	rjmp	.-3072   	; 0xffffff12 <__eeprom_end+0xff7eff12>
     b12:	02 00       	.word	0x0002	; ????
     b14:	00 d6       	rcall	.+3072   	; 0x1716 <__stack+0xe17>
     b16:	02 00       	.word	0x0002	; ????
     b18:	00 12       	cpse	r0, r16
     b1a:	a5 00       	.word	0x00a5	; ????
     b1c:	00 00       	nop
     b1e:	78 03       	fmul	r23, r16
     b20:	00 00       	nop
     b22:	00 00       	nop
     b24:	00 00       	nop
     b26:	20 de       	rcall	.-960    	; 0x768 <__data_load_end+0x256>
     b28:	03 00       	.word	0x0003	; ????
     b2a:	00 da       	rcall	.-3072   	; 0xffffff2c <__eeprom_end+0xff7eff2c>
     b2c:	02 00       	.word	0x0002	; ????
     b2e:	00 f2       	brcs	.-128    	; 0xab0 <__stack+0x1b1>
     b30:	02 00       	.word	0x0002	; ????
     b32:	00 03       	mulsu	r16, r16
     b34:	2e c0       	rjmp	.+92     	; 0xb92 <__stack+0x293>
     b36:	05 00       	.word	0x0005	; ????
     b38:	00 17       	cp	r16, r16
     b3a:	da 02       	muls	r29, r26
     b3c:	00 00       	nop
     b3e:	f2 02       	muls	r31, r18
     b40:	00 00       	nop
     b42:	18 ea       	ldi	r17, 0xA8	; 168
     b44:	03 00       	.word	0x0003	; ????
     b46:	00 18       	sub	r0, r0
     b48:	f5 03       	fmuls	r23, r21
     b4a:	00 00       	nop
     b4c:	20 71       	andi	r18, 0x10	; 16
     b4e:	01 00       	.word	0x0001	; ????
     b50:	00 e8       	ldi	r16, 0x80	; 128
     b52:	02 00       	.word	0x0002	; ????
     b54:	00 ec       	ldi	r16, 0xC0	; 192
     b56:	02 00       	.word	0x0002	; ????
     b58:	00 04       	cpc	r0, r0
     b5a:	10 7a       	andi	r17, 0xA0	; 160
     b5c:	05 00       	.word	0x0005	; ????
     b5e:	00 16       	cp	r0, r16
     b60:	81 01       	movw	r16, r2
     b62:	00 00       	nop
     b64:	8b 03       	fmulsu	r16, r19
     b66:	00 00       	nop
     b68:	22 ec       	ldi	r18, 0xC2	; 194
     b6a:	02 00       	.word	0x0002	; ????
     b6c:	00 00       	nop
     b6e:	20 71       	andi	r18, 0x10	; 16
     b70:	01 00       	.word	0x0001	; ????
     b72:	00 ec       	ldi	r16, 0xC0	; 192
     b74:	02 00       	.word	0x0002	; ????
     b76:	00 f0       	brcs	.+0      	; 0xb78 <__stack+0x279>
     b78:	02 00       	.word	0x0002	; ????
     b7a:	00 04       	cpc	r0, r0
     b7c:	11 9c       	mul	r1, r1
     b7e:	05 00       	.word	0x0005	; ????
     b80:	00 16       	cp	r0, r16
     b82:	81 01       	movw	r16, r2
     b84:	00 00       	nop
     b86:	a1 03       	fmuls	r18, r17
     b88:	00 00       	nop
     b8a:	22 f0       	brmi	.+8      	; 0xb94 <__stack+0x295>
     b8c:	02 00       	.word	0x0002	; ????
     b8e:	00 00       	nop
     b90:	23 e2       	ldi	r18, 0x23	; 35
     b92:	02 00       	.word	0x0002	; ????
     b94:	00 89       	ldd	r16, Z+16	; 0x10
     b96:	02 00       	.word	0x0002	; ????
     b98:	00 af       	std	Z+56, r16	; 0x38
     b9a:	05 00       	.word	0x0005	; ????
     b9c:	00 24       	eor	r0, r0
     b9e:	01 68       	ori	r16, 0x81	; 129
     ba0:	01 30       	cpi	r16, 0x01	; 1
     ba2:	00 25       	eor	r16, r0
     ba4:	e8 02       	muls	r30, r24
     ba6:	00 00       	nop
     ba8:	89 02       	muls	r24, r25
     baa:	00 00       	nop
     bac:	24 01       	movw	r4, r8
     bae:	68 01       	movw	r12, r16
     bb0:	31 00       	.word	0x0031	; ????
     bb2:	00 00       	nop
     bb4:	22 fa       	bst	r2, 2
     bb6:	02 00       	.word	0x0002	; ????
     bb8:	00 00       	nop
     bba:	26 46       	sbci	r18, 0x66	; 102
     bbc:	00 00       	nop
     bbe:	00 d6       	rcall	.+3072   	; 0x17c0 <__stack+0xec1>
     bc0:	05 00       	.word	0x0005	; ????
     bc2:	00 27       	eor	r16, r16
     bc4:	4b 00       	.word	0x004b	; ????
     bc6:	00 00       	nop
     bc8:	04 00       	.word	0x0004	; ????
     bca:	04 c6       	rjmp	.+3080   	; 0x17d4 <__stack+0xed5>
     bcc:	05 00       	.word	0x0005	; ????
     bce:	00 28       	or	r0, r0
     bd0:	a3 03       	fmuls	r18, r19
     bd2:	00 00       	nop
     bd4:	07 7e       	andi	r16, 0xE7	; 231
     bd6:	d6 05       	cpc	r29, r6
     bd8:	00 00       	nop
     bda:	05 03       	mulsu	r16, r21
     bdc:	68 00       	.word	0x0068	; ????
     bde:	00 00       	nop
     be0:	28 b9       	out	0x08, r18	; 8
     be2:	03 00       	.word	0x0003	; ????
     be4:	00 02       	muls	r16, r16
     be6:	26 04       	cpc	r2, r6
     be8:	06 00       	.word	0x0006	; ????
     bea:	00 05       	cpc	r16, r0
     bec:	03 04       	cpc	r0, r3
     bee:	01 80       	ldd	r0, Z+1	; 0x01
     bf0:	00 03       	mulsu	r16, r16
     bf2:	04 07       	cpc	r16, r20
     bf4:	3d 03       	fmul	r19, r21
     bf6:	00 00       	nop
     bf8:	0d fd       	.word	0xfd0d	; ????
     bfa:	05 00       	.word	0x0005	; ????
     bfc:	00 28       	or	r0, r0
     bfe:	dc 04       	cpc	r13, r12
     c00:	00 00       	nop
     c02:	02 28       	or	r0, r2
     c04:	34 00       	.word	0x0034	; ????
     c06:	00 00       	nop
     c08:	05 03       	mulsu	r16, r21
     c0a:	08 01       	movw	r0, r16
     c0c:	80 00       	.word	0x0080	; ????
     c0e:	28 02       	muls	r18, r24
     c10:	03 00       	.word	0x0003	; ????
     c12:	00 02       	muls	r16, r16
     c14:	27 04       	cpc	r2, r7
     c16:	06 00       	.word	0x0006	; ????
     c18:	00 05       	cpc	r16, r0
     c1a:	03 09       	sbc	r16, r3
     c1c:	01 80       	ldd	r0, Z+1	; 0x01
     c1e:	00 28       	or	r0, r0
     c20:	08 02       	muls	r16, r24
     c22:	00 00       	nop
     c24:	07 86       	std	Z+15, r0	; 0x0f
     c26:	d6 05       	cpc	r29, r6
     c28:	00 00       	nop
     c2a:	05 03       	mulsu	r16, r21
     c2c:	72 00       	.word	0x0072	; ????
     c2e:	00 00       	nop
     c30:	26 58       	subi	r18, 0x86	; 134
     c32:	06 00       	.word	0x0006	; ????
     c34:	00 4c       	sbci	r16, 0xC0	; 192
     c36:	06 00       	.word	0x0006	; ????
     c38:	00 27       	eor	r16, r16
     c3a:	4b 00       	.word	0x004b	; ????
     c3c:	00 00       	nop
     c3e:	13 00       	.word	0x0013	; ????
     c40:	04 3c       	cpi	r16, 0xC4	; 196
     c42:	06 00       	.word	0x0006	; ????
     c44:	00 03       	mulsu	r16, r16
     c46:	01 08       	sbc	r0, r1
     c48:	8b 03       	fmulsu	r16, r19
     c4a:	00 00       	nop
     c4c:	04 51       	subi	r16, 0x14	; 20
     c4e:	06 00       	.word	0x0006	; ????
     c50:	00 28       	or	r0, r0
     c52:	47 02       	muls	r20, r23
     c54:	00 00       	nop
     c56:	07 96       	adiw	r24, 0x07	; 7
     c58:	4c 06       	cpc	r4, r28
     c5a:	00 00       	nop
     c5c:	05 03       	mulsu	r16, r21
     c5e:	7c 00       	.word	0x007c	; ????
     c60:	00 00       	nop
     c62:	28 66       	ori	r18, 0x68	; 104
     c64:	02 00       	.word	0x0002	; ????
     c66:	00 07       	cpc	r16, r16
     c68:	ad 4c       	sbci	r26, 0xCD	; 205
     c6a:	06 00       	.word	0x0006	; ????
     c6c:	00 05       	cpc	r16, r0
     c6e:	03 90       	.word	0x9003	; ????
     c70:	00 00       	nop
     c72:	00 28       	or	r0, r0
     c74:	cf 03       	fmulsu	r20, r23
     c76:	00 00       	nop
     c78:	07 c4       	rjmp	.+2062   	; 0x1488 <__stack+0xb89>
     c7a:	4c 06       	cpc	r4, r28
     c7c:	00 00       	nop
     c7e:	05 03       	mulsu	r16, r21
     c80:	a4 00       	.word	0x00a4	; ????
     c82:	00 00       	nop
     c84:	00 b7       	in	r16, 0x30	; 48
     c86:	00 00       	nop
     c88:	00 02       	muls	r16, r16
     c8a:	00 9c       	mul	r0, r0
     c8c:	07 00       	.word	0x0007	; ????
     c8e:	00 04       	cpc	r0, r0
     c90:	01 b2       	in	r0, 0x11	; 17
     c92:	03 00       	.word	0x0003	; ????
     c94:	00 0a       	sbc	r0, r16
     c96:	05 00       	.word	0x0005	; ????
     c98:	00 0e       	add	r0, r16
     c9a:	05 00       	.word	0x0005	; ????
     c9c:	00 2e       	mov	r0, r16
     c9e:	2e 2f       	mov	r18, r30
     ca0:	2e 2e       	mov	r2, r30
     ca2:	2f 2e       	mov	r2, r31
     ca4:	2e 2f       	mov	r18, r30
     ca6:	2e 2e       	mov	r2, r30
     ca8:	2f 67       	ori	r18, 0x7F	; 127
     caa:	63 63       	ori	r22, 0x33	; 51
     cac:	2f 6c       	ori	r18, 0xCF	; 207
     cae:	69 62       	ori	r22, 0x29	; 41
     cb0:	67 63       	ori	r22, 0x37	; 55
     cb2:	63 2f       	mov	r22, r19
     cb4:	63 6f       	ori	r22, 0xF3	; 243
     cb6:	6e 66       	ori	r22, 0x6E	; 110
     cb8:	69 67       	ori	r22, 0x79	; 121
     cba:	2f 61       	ori	r18, 0x1F	; 31
     cbc:	76 72       	andi	r23, 0x26	; 38
     cbe:	2f 6c       	ori	r18, 0xCF	; 207
     cc0:	69 62       	ori	r22, 0x29	; 41
     cc2:	31 66       	ori	r19, 0x61	; 97
     cc4:	75 6e       	ori	r23, 0xE5	; 229
     cc6:	63 73       	andi	r22, 0x33	; 51
     cc8:	2e 53       	subi	r18, 0x3E	; 62
     cca:	00 2f       	mov	r16, r16
     ccc:	68 6f       	ori	r22, 0xF8	; 248
     cce:	6d 65       	ori	r22, 0x5D	; 93
     cd0:	2f 6a       	ori	r18, 0xAF	; 175
     cd2:	65 6e       	ori	r22, 0xE5	; 229
     cd4:	6b 69       	ori	r22, 0x9B	; 155
     cd6:	6e 73       	andi	r22, 0x3E	; 62
     cd8:	2d 6d       	ori	r18, 0xDD	; 221
     cda:	69 6e       	ori	r22, 0xE9	; 233
     cdc:	67 77       	andi	r22, 0x77	; 119
     cde:	33 32       	cpi	r19, 0x23	; 35
     ce0:	2f 77       	andi	r18, 0x7F	; 127
     ce2:	6f 72       	andi	r22, 0x2F	; 47
     ce4:	6b 73       	andi	r22, 0x3B	; 59
     ce6:	70 61       	ori	r23, 0x10	; 16
     ce8:	63 65       	ori	r22, 0x53	; 83
     cea:	2f 61       	ori	r18, 0x1F	; 31
     cec:	76 72       	andi	r23, 0x26	; 38
     cee:	2d 67       	ori	r18, 0x7D	; 125
     cf0:	63 63       	ori	r22, 0x33	; 51
     cf2:	2d 73       	andi	r18, 0x3D	; 61
     cf4:	74 61       	ori	r23, 0x14	; 20
     cf6:	67 69       	ori	r22, 0x97	; 151
     cf8:	6e 67       	ori	r22, 0x7E	; 126
     cfa:	2f 6c       	ori	r18, 0xCF	; 207
     cfc:	61 62       	ori	r22, 0x21	; 33
     cfe:	65 6c       	ori	r22, 0xC5	; 197
     d00:	2f 55       	subi	r18, 0x5F	; 95
     d02:	62 75       	andi	r22, 0x52	; 82
     d04:	6e 74       	andi	r22, 0x4E	; 78
     d06:	75 31       	cpi	r23, 0x15	; 21
     d08:	34 2e       	mov	r3, r20
     d0a:	30 34       	cpi	r19, 0x40	; 64
     d0c:	78 36       	cpi	r23, 0x68	; 104
     d0e:	34 2d       	mov	r19, r4
     d10:	6d 69       	ori	r22, 0x9D	; 157
     d12:	6e 67       	ori	r22, 0x7E	; 126
     d14:	77 33       	cpi	r23, 0x37	; 55
     d16:	32 2f       	mov	r19, r18
     d18:	67 63       	ori	r22, 0x37	; 55
     d1a:	63 2d       	mov	r22, r3
     d1c:	62 75       	andi	r22, 0x52	; 82
     d1e:	69 6c       	ori	r22, 0xC9	; 201
     d20:	64 2f       	mov	r22, r20
     d22:	61 76       	andi	r22, 0x61	; 97
     d24:	72 2f       	mov	r23, r18
     d26:	61 76       	andi	r22, 0x61	; 97
     d28:	72 35       	cpi	r23, 0x52	; 82
     d2a:	2f 6c       	ori	r18, 0xCF	; 207
     d2c:	69 62       	ori	r22, 0x29	; 41
     d2e:	67 63       	ori	r22, 0x37	; 55
     d30:	63 00       	.word	0x0063	; ????
     d32:	47 4e       	sbci	r20, 0xE7	; 231
     d34:	55 20       	and	r5, r5
     d36:	41 53       	subi	r20, 0x31	; 49
     d38:	20 32       	cpi	r18, 0x20	; 32
     d3a:	2e 32       	cpi	r18, 0x2E	; 46
     d3c:	36 00       	.word	0x0036	; ????
     d3e:	01 80       	ldd	r0, Z+1	; 0x01
     d40:	b7 00       	.word	0x00b7	; ????
     d42:	00 00       	nop
     d44:	02 00       	.word	0x0002	; ????
     d46:	b0 07       	cpc	r27, r16
     d48:	00 00       	nop
     d4a:	04 01       	movw	r0, r8
     d4c:	14 04       	cpc	r1, r4
     d4e:	00 00       	nop
     d50:	44 04       	cpc	r4, r4
     d52:	00 00       	nop
     d54:	72 04       	cpc	r7, r2
     d56:	00 00       	nop
     d58:	2e 2e       	mov	r2, r30
     d5a:	2f 2e       	mov	r2, r31
     d5c:	2e 2f       	mov	r18, r30
     d5e:	2e 2e       	mov	r2, r30
     d60:	2f 2e       	mov	r2, r31
     d62:	2e 2f       	mov	r18, r30
     d64:	67 63       	ori	r22, 0x37	; 55
     d66:	63 2f       	mov	r22, r19
     d68:	6c 69       	ori	r22, 0x9C	; 156
     d6a:	62 67       	ori	r22, 0x72	; 114
     d6c:	63 63       	ori	r22, 0x33	; 51
     d6e:	2f 63       	ori	r18, 0x3F	; 63
     d70:	6f 6e       	ori	r22, 0xEF	; 239
     d72:	66 69       	ori	r22, 0x96	; 150
     d74:	67 2f       	mov	r22, r23
     d76:	61 76       	andi	r22, 0x61	; 97
     d78:	72 2f       	mov	r23, r18
     d7a:	6c 69       	ori	r22, 0x9C	; 156
     d7c:	62 31       	cpi	r22, 0x12	; 18
     d7e:	66 75       	andi	r22, 0x56	; 86
     d80:	6e 63       	ori	r22, 0x3E	; 62
     d82:	73 2e       	mov	r7, r19
     d84:	53 00       	.word	0x0053	; ????
     d86:	2f 68       	ori	r18, 0x8F	; 143
     d88:	6f 6d       	ori	r22, 0xDF	; 223
     d8a:	65 2f       	mov	r22, r21
     d8c:	6a 65       	ori	r22, 0x5A	; 90
     d8e:	6e 6b       	ori	r22, 0xBE	; 190
     d90:	69 6e       	ori	r22, 0xE9	; 233
     d92:	73 2d       	mov	r23, r3
     d94:	6d 69       	ori	r22, 0x9D	; 157
     d96:	6e 67       	ori	r22, 0x7E	; 126
     d98:	77 33       	cpi	r23, 0x37	; 55
     d9a:	32 2f       	mov	r19, r18
     d9c:	77 6f       	ori	r23, 0xF7	; 247
     d9e:	72 6b       	ori	r23, 0xB2	; 178
     da0:	73 70       	andi	r23, 0x03	; 3
     da2:	61 63       	ori	r22, 0x31	; 49
     da4:	65 2f       	mov	r22, r21
     da6:	61 76       	andi	r22, 0x61	; 97
     da8:	72 2d       	mov	r23, r2
     daa:	67 63       	ori	r22, 0x37	; 55
     dac:	63 2d       	mov	r22, r3
     dae:	73 74       	andi	r23, 0x43	; 67
     db0:	61 67       	ori	r22, 0x71	; 113
     db2:	69 6e       	ori	r22, 0xE9	; 233
     db4:	67 2f       	mov	r22, r23
     db6:	6c 61       	ori	r22, 0x1C	; 28
     db8:	62 65       	ori	r22, 0x52	; 82
     dba:	6c 2f       	mov	r22, r28
     dbc:	55 62       	ori	r21, 0x25	; 37
     dbe:	75 6e       	ori	r23, 0xE5	; 229
     dc0:	74 75       	andi	r23, 0x54	; 84
     dc2:	31 34       	cpi	r19, 0x41	; 65
     dc4:	2e 30       	cpi	r18, 0x0E	; 14
     dc6:	34 78       	andi	r19, 0x84	; 132
     dc8:	36 34       	cpi	r19, 0x46	; 70
     dca:	2d 6d       	ori	r18, 0xDD	; 221
     dcc:	69 6e       	ori	r22, 0xE9	; 233
     dce:	67 77       	andi	r22, 0x77	; 119
     dd0:	33 32       	cpi	r19, 0x23	; 35
     dd2:	2f 67       	ori	r18, 0x7F	; 127
     dd4:	63 63       	ori	r22, 0x33	; 51
     dd6:	2d 62       	ori	r18, 0x2D	; 45
     dd8:	75 69       	ori	r23, 0x95	; 149
     dda:	6c 64       	ori	r22, 0x4C	; 76
     ddc:	2f 61       	ori	r18, 0x1F	; 31
     dde:	76 72       	andi	r23, 0x26	; 38
     de0:	2f 61       	ori	r18, 0x1F	; 31
     de2:	76 72       	andi	r23, 0x26	; 38
     de4:	35 2f       	mov	r19, r21
     de6:	6c 69       	ori	r22, 0x9C	; 156
     de8:	62 67       	ori	r22, 0x72	; 114
     dea:	63 63       	ori	r22, 0x33	; 51
     dec:	00 47       	sbci	r16, 0x70	; 112
     dee:	4e 55       	subi	r20, 0x5E	; 94
     df0:	20 41       	sbci	r18, 0x10	; 16
     df2:	53 20       	and	r5, r3
     df4:	32 2e       	mov	r3, r18
     df6:	32 36       	cpi	r19, 0x62	; 98
     df8:	00 01       	movw	r0, r0
     dfa:	80 b7       	in	r24, 0x30	; 48
     dfc:	00 00       	nop
     dfe:	00 02       	muls	r16, r16
     e00:	00 c4       	rjmp	.+2048   	; 0x1602 <__stack+0xd03>
     e02:	07 00       	.word	0x0007	; ????
     e04:	00 04       	cpc	r0, r0
     e06:	01 e2       	ldi	r16, 0x21	; 33
     e08:	04 00       	.word	0x0004	; ????
     e0a:	00 72       	andi	r16, 0x20	; 32
     e0c:	04 00       	.word	0x0004	; ????
     e0e:	00 82       	st	Z, r0
     e10:	04 00       	.word	0x0004	; ????
     e12:	00 2e       	mov	r0, r16
     e14:	2e 2f       	mov	r18, r30
     e16:	2e 2e       	mov	r2, r30
     e18:	2f 2e       	mov	r2, r31
     e1a:	2e 2f       	mov	r18, r30
     e1c:	2e 2e       	mov	r2, r30
     e1e:	2f 67       	ori	r18, 0x7F	; 127
     e20:	63 63       	ori	r22, 0x33	; 51
     e22:	2f 6c       	ori	r18, 0xCF	; 207
     e24:	69 62       	ori	r22, 0x29	; 41
     e26:	67 63       	ori	r22, 0x37	; 55
     e28:	63 2f       	mov	r22, r19
     e2a:	63 6f       	ori	r22, 0xF3	; 243
     e2c:	6e 66       	ori	r22, 0x6E	; 110
     e2e:	69 67       	ori	r22, 0x79	; 121
     e30:	2f 61       	ori	r18, 0x1F	; 31
     e32:	76 72       	andi	r23, 0x26	; 38
     e34:	2f 6c       	ori	r18, 0xCF	; 207
     e36:	69 62       	ori	r22, 0x29	; 41
     e38:	31 66       	ori	r19, 0x61	; 97
     e3a:	75 6e       	ori	r23, 0xE5	; 229
     e3c:	63 73       	andi	r22, 0x33	; 51
     e3e:	2e 53       	subi	r18, 0x3E	; 62
     e40:	00 2f       	mov	r16, r16
     e42:	68 6f       	ori	r22, 0xF8	; 248
     e44:	6d 65       	ori	r22, 0x5D	; 93
     e46:	2f 6a       	ori	r18, 0xAF	; 175
     e48:	65 6e       	ori	r22, 0xE5	; 229
     e4a:	6b 69       	ori	r22, 0x9B	; 155
     e4c:	6e 73       	andi	r22, 0x3E	; 62
     e4e:	2d 6d       	ori	r18, 0xDD	; 221
     e50:	69 6e       	ori	r22, 0xE9	; 233
     e52:	67 77       	andi	r22, 0x77	; 119
     e54:	33 32       	cpi	r19, 0x23	; 35
     e56:	2f 77       	andi	r18, 0x7F	; 127
     e58:	6f 72       	andi	r22, 0x2F	; 47
     e5a:	6b 73       	andi	r22, 0x3B	; 59
     e5c:	70 61       	ori	r23, 0x10	; 16
     e5e:	63 65       	ori	r22, 0x53	; 83
     e60:	2f 61       	ori	r18, 0x1F	; 31
     e62:	76 72       	andi	r23, 0x26	; 38
     e64:	2d 67       	ori	r18, 0x7D	; 125
     e66:	63 63       	ori	r22, 0x33	; 51
     e68:	2d 73       	andi	r18, 0x3D	; 61
     e6a:	74 61       	ori	r23, 0x14	; 20
     e6c:	67 69       	ori	r22, 0x97	; 151
     e6e:	6e 67       	ori	r22, 0x7E	; 126
     e70:	2f 6c       	ori	r18, 0xCF	; 207
     e72:	61 62       	ori	r22, 0x21	; 33
     e74:	65 6c       	ori	r22, 0xC5	; 197
     e76:	2f 55       	subi	r18, 0x5F	; 95
     e78:	62 75       	andi	r22, 0x52	; 82
     e7a:	6e 74       	andi	r22, 0x4E	; 78
     e7c:	75 31       	cpi	r23, 0x15	; 21
     e7e:	34 2e       	mov	r3, r20
     e80:	30 34       	cpi	r19, 0x40	; 64
     e82:	78 36       	cpi	r23, 0x68	; 104
     e84:	34 2d       	mov	r19, r4
     e86:	6d 69       	ori	r22, 0x9D	; 157
     e88:	6e 67       	ori	r22, 0x7E	; 126
     e8a:	77 33       	cpi	r23, 0x37	; 55
     e8c:	32 2f       	mov	r19, r18
     e8e:	67 63       	ori	r22, 0x37	; 55
     e90:	63 2d       	mov	r22, r3
     e92:	62 75       	andi	r22, 0x52	; 82
     e94:	69 6c       	ori	r22, 0xC9	; 201
     e96:	64 2f       	mov	r22, r20
     e98:	61 76       	andi	r22, 0x61	; 97
     e9a:	72 2f       	mov	r23, r18
     e9c:	61 76       	andi	r22, 0x61	; 97
     e9e:	72 35       	cpi	r23, 0x52	; 82
     ea0:	2f 6c       	ori	r18, 0xCF	; 207
     ea2:	69 62       	ori	r22, 0x29	; 41
     ea4:	67 63       	ori	r22, 0x37	; 55
     ea6:	63 00       	.word	0x0063	; ????
     ea8:	47 4e       	sbci	r20, 0xE7	; 231
     eaa:	55 20       	and	r5, r5
     eac:	41 53       	subi	r20, 0x31	; 49
     eae:	20 32       	cpi	r18, 0x20	; 32
     eb0:	2e 32       	cpi	r18, 0x2E	; 46
     eb2:	36 00       	.word	0x0036	; ????
     eb4:	01 80       	ldd	r0, Z+1	; 0x01
     eb6:	b7 00       	.word	0x00b7	; ????
     eb8:	00 00       	nop
     eba:	02 00       	.word	0x0002	; ????
     ebc:	d8 07       	cpc	r29, r24
     ebe:	00 00       	nop
     ec0:	04 01       	movw	r0, r8
     ec2:	44 05       	cpc	r20, r4
     ec4:	00 00       	nop
     ec6:	c4 00       	.word	0x00c4	; ????
     ec8:	00 00       	nop
     eca:	da 00       	.word	0x00da	; ????
     ecc:	00 00       	nop
     ece:	2e 2e       	mov	r2, r30
     ed0:	2f 2e       	mov	r2, r31
     ed2:	2e 2f       	mov	r18, r30
     ed4:	2e 2e       	mov	r2, r30
     ed6:	2f 2e       	mov	r2, r31
     ed8:	2e 2f       	mov	r18, r30
     eda:	67 63       	ori	r22, 0x37	; 55
     edc:	63 2f       	mov	r22, r19
     ede:	6c 69       	ori	r22, 0x9C	; 156
     ee0:	62 67       	ori	r22, 0x72	; 114
     ee2:	63 63       	ori	r22, 0x33	; 51
     ee4:	2f 63       	ori	r18, 0x3F	; 63
     ee6:	6f 6e       	ori	r22, 0xEF	; 239
     ee8:	66 69       	ori	r22, 0x96	; 150
     eea:	67 2f       	mov	r22, r23
     eec:	61 76       	andi	r22, 0x61	; 97
     eee:	72 2f       	mov	r23, r18
     ef0:	6c 69       	ori	r22, 0x9C	; 156
     ef2:	62 31       	cpi	r22, 0x12	; 18
     ef4:	66 75       	andi	r22, 0x56	; 86
     ef6:	6e 63       	ori	r22, 0x3E	; 62
     ef8:	73 2e       	mov	r7, r19
     efa:	53 00       	.word	0x0053	; ????
     efc:	2f 68       	ori	r18, 0x8F	; 143
     efe:	6f 6d       	ori	r22, 0xDF	; 223
     f00:	65 2f       	mov	r22, r21
     f02:	6a 65       	ori	r22, 0x5A	; 90
     f04:	6e 6b       	ori	r22, 0xBE	; 190
     f06:	69 6e       	ori	r22, 0xE9	; 233
     f08:	73 2d       	mov	r23, r3
     f0a:	6d 69       	ori	r22, 0x9D	; 157
     f0c:	6e 67       	ori	r22, 0x7E	; 126
     f0e:	77 33       	cpi	r23, 0x37	; 55
     f10:	32 2f       	mov	r19, r18
     f12:	77 6f       	ori	r23, 0xF7	; 247
     f14:	72 6b       	ori	r23, 0xB2	; 178
     f16:	73 70       	andi	r23, 0x03	; 3
     f18:	61 63       	ori	r22, 0x31	; 49
     f1a:	65 2f       	mov	r22, r21
     f1c:	61 76       	andi	r22, 0x61	; 97
     f1e:	72 2d       	mov	r23, r2
     f20:	67 63       	ori	r22, 0x37	; 55
     f22:	63 2d       	mov	r22, r3
     f24:	73 74       	andi	r23, 0x43	; 67
     f26:	61 67       	ori	r22, 0x71	; 113
     f28:	69 6e       	ori	r22, 0xE9	; 233
     f2a:	67 2f       	mov	r22, r23
     f2c:	6c 61       	ori	r22, 0x1C	; 28
     f2e:	62 65       	ori	r22, 0x52	; 82
     f30:	6c 2f       	mov	r22, r28
     f32:	55 62       	ori	r21, 0x25	; 37
     f34:	75 6e       	ori	r23, 0xE5	; 229
     f36:	74 75       	andi	r23, 0x54	; 84
     f38:	31 34       	cpi	r19, 0x41	; 65
     f3a:	2e 30       	cpi	r18, 0x0E	; 14
     f3c:	34 78       	andi	r19, 0x84	; 132
     f3e:	36 34       	cpi	r19, 0x46	; 70
     f40:	2d 6d       	ori	r18, 0xDD	; 221
     f42:	69 6e       	ori	r22, 0xE9	; 233
     f44:	67 77       	andi	r22, 0x77	; 119
     f46:	33 32       	cpi	r19, 0x23	; 35
     f48:	2f 67       	ori	r18, 0x7F	; 127
     f4a:	63 63       	ori	r22, 0x33	; 51
     f4c:	2d 62       	ori	r18, 0x2D	; 45
     f4e:	75 69       	ori	r23, 0x95	; 149
     f50:	6c 64       	ori	r22, 0x4C	; 76
     f52:	2f 61       	ori	r18, 0x1F	; 31
     f54:	76 72       	andi	r23, 0x26	; 38
     f56:	2f 61       	ori	r18, 0x1F	; 31
     f58:	76 72       	andi	r23, 0x26	; 38
     f5a:	35 2f       	mov	r19, r21
     f5c:	6c 69       	ori	r22, 0x9C	; 156
     f5e:	62 67       	ori	r22, 0x72	; 114
     f60:	63 63       	ori	r22, 0x33	; 51
     f62:	00 47       	sbci	r16, 0x70	; 112
     f64:	4e 55       	subi	r20, 0x5E	; 94
     f66:	20 41       	sbci	r18, 0x10	; 16
     f68:	53 20       	and	r5, r3
     f6a:	32 2e       	mov	r3, r18
     f6c:	32 36       	cpi	r19, 0x62	; 98
     f6e:	00 01       	movw	r0, r0
     f70:	80 b7       	in	r24, 0x30	; 48
     f72:	00 00       	nop
     f74:	00 02       	muls	r16, r16
     f76:	00 ec       	ldi	r16, 0xC0	; 192
     f78:	07 00       	.word	0x0007	; ????
     f7a:	00 04       	cpc	r0, r0
     f7c:	01 dc       	rcall	.-2046   	; 0x780 <__data_load_end+0x26e>
     f7e:	05 00       	.word	0x0005	; ????
     f80:	00 82       	st	Z, r0
     f82:	04 00       	.word	0x0004	; ????
     f84:	00 98       	cbi	0x00, 0	; 0
     f86:	04 00       	.word	0x0004	; ????
     f88:	00 2e       	mov	r0, r16
     f8a:	2e 2f       	mov	r18, r30
     f8c:	2e 2e       	mov	r2, r30
     f8e:	2f 2e       	mov	r2, r31
     f90:	2e 2f       	mov	r18, r30
     f92:	2e 2e       	mov	r2, r30
     f94:	2f 67       	ori	r18, 0x7F	; 127
     f96:	63 63       	ori	r22, 0x33	; 51
     f98:	2f 6c       	ori	r18, 0xCF	; 207
     f9a:	69 62       	ori	r22, 0x29	; 41
     f9c:	67 63       	ori	r22, 0x37	; 55
     f9e:	63 2f       	mov	r22, r19
     fa0:	63 6f       	ori	r22, 0xF3	; 243
     fa2:	6e 66       	ori	r22, 0x6E	; 110
     fa4:	69 67       	ori	r22, 0x79	; 121
     fa6:	2f 61       	ori	r18, 0x1F	; 31
     fa8:	76 72       	andi	r23, 0x26	; 38
     faa:	2f 6c       	ori	r18, 0xCF	; 207
     fac:	69 62       	ori	r22, 0x29	; 41
     fae:	31 66       	ori	r19, 0x61	; 97
     fb0:	75 6e       	ori	r23, 0xE5	; 229
     fb2:	63 73       	andi	r22, 0x33	; 51
     fb4:	2e 53       	subi	r18, 0x3E	; 62
     fb6:	00 2f       	mov	r16, r16
     fb8:	68 6f       	ori	r22, 0xF8	; 248
     fba:	6d 65       	ori	r22, 0x5D	; 93
     fbc:	2f 6a       	ori	r18, 0xAF	; 175
     fbe:	65 6e       	ori	r22, 0xE5	; 229
     fc0:	6b 69       	ori	r22, 0x9B	; 155
     fc2:	6e 73       	andi	r22, 0x3E	; 62
     fc4:	2d 6d       	ori	r18, 0xDD	; 221
     fc6:	69 6e       	ori	r22, 0xE9	; 233
     fc8:	67 77       	andi	r22, 0x77	; 119
     fca:	33 32       	cpi	r19, 0x23	; 35
     fcc:	2f 77       	andi	r18, 0x7F	; 127
     fce:	6f 72       	andi	r22, 0x2F	; 47
     fd0:	6b 73       	andi	r22, 0x3B	; 59
     fd2:	70 61       	ori	r23, 0x10	; 16
     fd4:	63 65       	ori	r22, 0x53	; 83
     fd6:	2f 61       	ori	r18, 0x1F	; 31
     fd8:	76 72       	andi	r23, 0x26	; 38
     fda:	2d 67       	ori	r18, 0x7D	; 125
     fdc:	63 63       	ori	r22, 0x33	; 51
     fde:	2d 73       	andi	r18, 0x3D	; 61
     fe0:	74 61       	ori	r23, 0x14	; 20
     fe2:	67 69       	ori	r22, 0x97	; 151
     fe4:	6e 67       	ori	r22, 0x7E	; 126
     fe6:	2f 6c       	ori	r18, 0xCF	; 207
     fe8:	61 62       	ori	r22, 0x21	; 33
     fea:	65 6c       	ori	r22, 0xC5	; 197
     fec:	2f 55       	subi	r18, 0x5F	; 95
     fee:	62 75       	andi	r22, 0x52	; 82
     ff0:	6e 74       	andi	r22, 0x4E	; 78
     ff2:	75 31       	cpi	r23, 0x15	; 21
     ff4:	34 2e       	mov	r3, r20
     ff6:	30 34       	cpi	r19, 0x40	; 64
     ff8:	78 36       	cpi	r23, 0x68	; 104
     ffa:	34 2d       	mov	r19, r4
     ffc:	6d 69       	ori	r22, 0x9D	; 157
     ffe:	6e 67       	ori	r22, 0x7E	; 126
    1000:	77 33       	cpi	r23, 0x37	; 55
    1002:	32 2f       	mov	r19, r18
    1004:	67 63       	ori	r22, 0x37	; 55
    1006:	63 2d       	mov	r22, r3
    1008:	62 75       	andi	r22, 0x52	; 82
    100a:	69 6c       	ori	r22, 0xC9	; 201
    100c:	64 2f       	mov	r22, r20
    100e:	61 76       	andi	r22, 0x61	; 97
    1010:	72 2f       	mov	r23, r18
    1012:	61 76       	andi	r22, 0x61	; 97
    1014:	72 35       	cpi	r23, 0x52	; 82
    1016:	2f 6c       	ori	r18, 0xCF	; 207
    1018:	69 62       	ori	r22, 0x29	; 41
    101a:	67 63       	ori	r22, 0x37	; 55
    101c:	63 00       	.word	0x0063	; ????
    101e:	47 4e       	sbci	r20, 0xE7	; 231
    1020:	55 20       	and	r5, r5
    1022:	41 53       	subi	r20, 0x31	; 49
    1024:	20 32       	cpi	r18, 0x20	; 32
    1026:	2e 32       	cpi	r18, 0x2E	; 46
    1028:	36 00       	.word	0x0036	; ????
    102a:	01 80       	ldd	r0, Z+1	; 0x01
    102c:	b7 00       	.word	0x00b7	; ????
    102e:	00 00       	nop
    1030:	02 00       	.word	0x0002	; ????
    1032:	00 08       	sbc	r0, r0
    1034:	00 00       	nop
    1036:	04 01       	movw	r0, r8
    1038:	6e 06       	cpc	r6, r30
    103a:	00 00       	nop
    103c:	98 04       	cpc	r9, r8
    103e:	00 00       	nop
    1040:	a8 04       	cpc	r10, r8
    1042:	00 00       	nop
    1044:	2e 2e       	mov	r2, r30
    1046:	2f 2e       	mov	r2, r31
    1048:	2e 2f       	mov	r18, r30
    104a:	2e 2e       	mov	r2, r30
    104c:	2f 2e       	mov	r2, r31
    104e:	2e 2f       	mov	r18, r30
    1050:	67 63       	ori	r22, 0x37	; 55
    1052:	63 2f       	mov	r22, r19
    1054:	6c 69       	ori	r22, 0x9C	; 156
    1056:	62 67       	ori	r22, 0x72	; 114
    1058:	63 63       	ori	r22, 0x33	; 51
    105a:	2f 63       	ori	r18, 0x3F	; 63
    105c:	6f 6e       	ori	r22, 0xEF	; 239
    105e:	66 69       	ori	r22, 0x96	; 150
    1060:	67 2f       	mov	r22, r23
    1062:	61 76       	andi	r22, 0x61	; 97
    1064:	72 2f       	mov	r23, r18
    1066:	6c 69       	ori	r22, 0x9C	; 156
    1068:	62 31       	cpi	r22, 0x12	; 18
    106a:	66 75       	andi	r22, 0x56	; 86
    106c:	6e 63       	ori	r22, 0x3E	; 62
    106e:	73 2e       	mov	r7, r19
    1070:	53 00       	.word	0x0053	; ????
    1072:	2f 68       	ori	r18, 0x8F	; 143
    1074:	6f 6d       	ori	r22, 0xDF	; 223
    1076:	65 2f       	mov	r22, r21
    1078:	6a 65       	ori	r22, 0x5A	; 90
    107a:	6e 6b       	ori	r22, 0xBE	; 190
    107c:	69 6e       	ori	r22, 0xE9	; 233
    107e:	73 2d       	mov	r23, r3
    1080:	6d 69       	ori	r22, 0x9D	; 157
    1082:	6e 67       	ori	r22, 0x7E	; 126
    1084:	77 33       	cpi	r23, 0x37	; 55
    1086:	32 2f       	mov	r19, r18
    1088:	77 6f       	ori	r23, 0xF7	; 247
    108a:	72 6b       	ori	r23, 0xB2	; 178
    108c:	73 70       	andi	r23, 0x03	; 3
    108e:	61 63       	ori	r22, 0x31	; 49
    1090:	65 2f       	mov	r22, r21
    1092:	61 76       	andi	r22, 0x61	; 97
    1094:	72 2d       	mov	r23, r2
    1096:	67 63       	ori	r22, 0x37	; 55
    1098:	63 2d       	mov	r22, r3
    109a:	73 74       	andi	r23, 0x43	; 67
    109c:	61 67       	ori	r22, 0x71	; 113
    109e:	69 6e       	ori	r22, 0xE9	; 233
    10a0:	67 2f       	mov	r22, r23
    10a2:	6c 61       	ori	r22, 0x1C	; 28
    10a4:	62 65       	ori	r22, 0x52	; 82
    10a6:	6c 2f       	mov	r22, r28
    10a8:	55 62       	ori	r21, 0x25	; 37
    10aa:	75 6e       	ori	r23, 0xE5	; 229
    10ac:	74 75       	andi	r23, 0x54	; 84
    10ae:	31 34       	cpi	r19, 0x41	; 65
    10b0:	2e 30       	cpi	r18, 0x0E	; 14
    10b2:	34 78       	andi	r19, 0x84	; 132
    10b4:	36 34       	cpi	r19, 0x46	; 70
    10b6:	2d 6d       	ori	r18, 0xDD	; 221
    10b8:	69 6e       	ori	r22, 0xE9	; 233
    10ba:	67 77       	andi	r22, 0x77	; 119
    10bc:	33 32       	cpi	r19, 0x23	; 35
    10be:	2f 67       	ori	r18, 0x7F	; 127
    10c0:	63 63       	ori	r22, 0x33	; 51
    10c2:	2d 62       	ori	r18, 0x2D	; 45
    10c4:	75 69       	ori	r23, 0x95	; 149
    10c6:	6c 64       	ori	r22, 0x4C	; 76
    10c8:	2f 61       	ori	r18, 0x1F	; 31
    10ca:	76 72       	andi	r23, 0x26	; 38
    10cc:	2f 61       	ori	r18, 0x1F	; 31
    10ce:	76 72       	andi	r23, 0x26	; 38
    10d0:	35 2f       	mov	r19, r21
    10d2:	6c 69       	ori	r22, 0x9C	; 156
    10d4:	62 67       	ori	r22, 0x72	; 114
    10d6:	63 63       	ori	r22, 0x33	; 51
    10d8:	00 47       	sbci	r16, 0x70	; 112
    10da:	4e 55       	subi	r20, 0x5E	; 94
    10dc:	20 41       	sbci	r18, 0x10	; 16
    10de:	53 20       	and	r5, r3
    10e0:	32 2e       	mov	r3, r18
    10e2:	32 36       	cpi	r19, 0x62	; 98
    10e4:	00 01       	movw	r0, r0
    10e6:	80 b7       	in	r24, 0x30	; 48
    10e8:	00 00       	nop
    10ea:	00 02       	muls	r16, r16
    10ec:	00 14       	cp	r0, r0
    10ee:	08 00       	.word	0x0008	; ????
    10f0:	00 04       	cpc	r0, r0
    10f2:	01 e8       	ldi	r16, 0x81	; 129
    10f4:	06 00       	.word	0x0006	; ????
    10f6:	00 a8       	ldd	r0, Z+48	; 0x30
    10f8:	04 00       	.word	0x0004	; ????
    10fa:	00 ec       	ldi	r16, 0xC0	; 192
    10fc:	04 00       	.word	0x0004	; ????
    10fe:	00 2e       	mov	r0, r16
    1100:	2e 2f       	mov	r18, r30
    1102:	2e 2e       	mov	r2, r30
    1104:	2f 2e       	mov	r2, r31
    1106:	2e 2f       	mov	r18, r30
    1108:	2e 2e       	mov	r2, r30
    110a:	2f 67       	ori	r18, 0x7F	; 127
    110c:	63 63       	ori	r22, 0x33	; 51
    110e:	2f 6c       	ori	r18, 0xCF	; 207
    1110:	69 62       	ori	r22, 0x29	; 41
    1112:	67 63       	ori	r22, 0x37	; 55
    1114:	63 2f       	mov	r22, r19
    1116:	63 6f       	ori	r22, 0xF3	; 243
    1118:	6e 66       	ori	r22, 0x6E	; 110
    111a:	69 67       	ori	r22, 0x79	; 121
    111c:	2f 61       	ori	r18, 0x1F	; 31
    111e:	76 72       	andi	r23, 0x26	; 38
    1120:	2f 6c       	ori	r18, 0xCF	; 207
    1122:	69 62       	ori	r22, 0x29	; 41
    1124:	31 66       	ori	r19, 0x61	; 97
    1126:	75 6e       	ori	r23, 0xE5	; 229
    1128:	63 73       	andi	r22, 0x33	; 51
    112a:	2e 53       	subi	r18, 0x3E	; 62
    112c:	00 2f       	mov	r16, r16
    112e:	68 6f       	ori	r22, 0xF8	; 248
    1130:	6d 65       	ori	r22, 0x5D	; 93
    1132:	2f 6a       	ori	r18, 0xAF	; 175
    1134:	65 6e       	ori	r22, 0xE5	; 229
    1136:	6b 69       	ori	r22, 0x9B	; 155
    1138:	6e 73       	andi	r22, 0x3E	; 62
    113a:	2d 6d       	ori	r18, 0xDD	; 221
    113c:	69 6e       	ori	r22, 0xE9	; 233
    113e:	67 77       	andi	r22, 0x77	; 119
    1140:	33 32       	cpi	r19, 0x23	; 35
    1142:	2f 77       	andi	r18, 0x7F	; 127
    1144:	6f 72       	andi	r22, 0x2F	; 47
    1146:	6b 73       	andi	r22, 0x3B	; 59
    1148:	70 61       	ori	r23, 0x10	; 16
    114a:	63 65       	ori	r22, 0x53	; 83
    114c:	2f 61       	ori	r18, 0x1F	; 31
    114e:	76 72       	andi	r23, 0x26	; 38
    1150:	2d 67       	ori	r18, 0x7D	; 125
    1152:	63 63       	ori	r22, 0x33	; 51
    1154:	2d 73       	andi	r18, 0x3D	; 61
    1156:	74 61       	ori	r23, 0x14	; 20
    1158:	67 69       	ori	r22, 0x97	; 151
    115a:	6e 67       	ori	r22, 0x7E	; 126
    115c:	2f 6c       	ori	r18, 0xCF	; 207
    115e:	61 62       	ori	r22, 0x21	; 33
    1160:	65 6c       	ori	r22, 0xC5	; 197
    1162:	2f 55       	subi	r18, 0x5F	; 95
    1164:	62 75       	andi	r22, 0x52	; 82
    1166:	6e 74       	andi	r22, 0x4E	; 78
    1168:	75 31       	cpi	r23, 0x15	; 21
    116a:	34 2e       	mov	r3, r20
    116c:	30 34       	cpi	r19, 0x40	; 64
    116e:	78 36       	cpi	r23, 0x68	; 104
    1170:	34 2d       	mov	r19, r4
    1172:	6d 69       	ori	r22, 0x9D	; 157
    1174:	6e 67       	ori	r22, 0x7E	; 126
    1176:	77 33       	cpi	r23, 0x37	; 55
    1178:	32 2f       	mov	r19, r18
    117a:	67 63       	ori	r22, 0x37	; 55
    117c:	63 2d       	mov	r22, r3
    117e:	62 75       	andi	r22, 0x52	; 82
    1180:	69 6c       	ori	r22, 0xC9	; 201
    1182:	64 2f       	mov	r22, r20
    1184:	61 76       	andi	r22, 0x61	; 97
    1186:	72 2f       	mov	r23, r18
    1188:	61 76       	andi	r22, 0x61	; 97
    118a:	72 35       	cpi	r23, 0x52	; 82
    118c:	2f 6c       	ori	r18, 0xCF	; 207
    118e:	69 62       	ori	r22, 0x29	; 41
    1190:	67 63       	ori	r22, 0x37	; 55
    1192:	63 00       	.word	0x0063	; ????
    1194:	47 4e       	sbci	r20, 0xE7	; 231
    1196:	55 20       	and	r5, r5
    1198:	41 53       	subi	r20, 0x31	; 49
    119a:	20 32       	cpi	r18, 0x20	; 32
    119c:	2e 32       	cpi	r18, 0x2E	; 46
    119e:	36 00       	.word	0x0036	; ????
    11a0:	01 80       	ldd	r0, Z+1	; 0x01
    11a2:	b7 00       	.word	0x00b7	; ????
    11a4:	00 00       	nop
    11a6:	02 00       	.word	0x0002	; ????
    11a8:	28 08       	sbc	r2, r8
    11aa:	00 00       	nop
    11ac:	04 01       	movw	r0, r8
    11ae:	0a 08       	sbc	r0, r10
    11b0:	00 00       	nop
    11b2:	ec 04       	cpc	r14, r12
    11b4:	00 00       	nop
    11b6:	0a 05       	cpc	r16, r10
    11b8:	00 00       	nop
    11ba:	2e 2e       	mov	r2, r30
    11bc:	2f 2e       	mov	r2, r31
    11be:	2e 2f       	mov	r18, r30
    11c0:	2e 2e       	mov	r2, r30
    11c2:	2f 2e       	mov	r2, r31
    11c4:	2e 2f       	mov	r18, r30
    11c6:	67 63       	ori	r22, 0x37	; 55
    11c8:	63 2f       	mov	r22, r19
    11ca:	6c 69       	ori	r22, 0x9C	; 156
    11cc:	62 67       	ori	r22, 0x72	; 114
    11ce:	63 63       	ori	r22, 0x33	; 51
    11d0:	2f 63       	ori	r18, 0x3F	; 63
    11d2:	6f 6e       	ori	r22, 0xEF	; 239
    11d4:	66 69       	ori	r22, 0x96	; 150
    11d6:	67 2f       	mov	r22, r23
    11d8:	61 76       	andi	r22, 0x61	; 97
    11da:	72 2f       	mov	r23, r18
    11dc:	6c 69       	ori	r22, 0x9C	; 156
    11de:	62 31       	cpi	r22, 0x12	; 18
    11e0:	66 75       	andi	r22, 0x56	; 86
    11e2:	6e 63       	ori	r22, 0x3E	; 62
    11e4:	73 2e       	mov	r7, r19
    11e6:	53 00       	.word	0x0053	; ????
    11e8:	2f 68       	ori	r18, 0x8F	; 143
    11ea:	6f 6d       	ori	r22, 0xDF	; 223
    11ec:	65 2f       	mov	r22, r21
    11ee:	6a 65       	ori	r22, 0x5A	; 90
    11f0:	6e 6b       	ori	r22, 0xBE	; 190
    11f2:	69 6e       	ori	r22, 0xE9	; 233
    11f4:	73 2d       	mov	r23, r3
    11f6:	6d 69       	ori	r22, 0x9D	; 157
    11f8:	6e 67       	ori	r22, 0x7E	; 126
    11fa:	77 33       	cpi	r23, 0x37	; 55
    11fc:	32 2f       	mov	r19, r18
    11fe:	77 6f       	ori	r23, 0xF7	; 247
    1200:	72 6b       	ori	r23, 0xB2	; 178
    1202:	73 70       	andi	r23, 0x03	; 3
    1204:	61 63       	ori	r22, 0x31	; 49
    1206:	65 2f       	mov	r22, r21
    1208:	61 76       	andi	r22, 0x61	; 97
    120a:	72 2d       	mov	r23, r2
    120c:	67 63       	ori	r22, 0x37	; 55
    120e:	63 2d       	mov	r22, r3
    1210:	73 74       	andi	r23, 0x43	; 67
    1212:	61 67       	ori	r22, 0x71	; 113
    1214:	69 6e       	ori	r22, 0xE9	; 233
    1216:	67 2f       	mov	r22, r23
    1218:	6c 61       	ori	r22, 0x1C	; 28
    121a:	62 65       	ori	r22, 0x52	; 82
    121c:	6c 2f       	mov	r22, r28
    121e:	55 62       	ori	r21, 0x25	; 37
    1220:	75 6e       	ori	r23, 0xE5	; 229
    1222:	74 75       	andi	r23, 0x54	; 84
    1224:	31 34       	cpi	r19, 0x41	; 65
    1226:	2e 30       	cpi	r18, 0x0E	; 14
    1228:	34 78       	andi	r19, 0x84	; 132
    122a:	36 34       	cpi	r19, 0x46	; 70
    122c:	2d 6d       	ori	r18, 0xDD	; 221
    122e:	69 6e       	ori	r22, 0xE9	; 233
    1230:	67 77       	andi	r22, 0x77	; 119
    1232:	33 32       	cpi	r19, 0x23	; 35
    1234:	2f 67       	ori	r18, 0x7F	; 127
    1236:	63 63       	ori	r22, 0x33	; 51
    1238:	2d 62       	ori	r18, 0x2D	; 45
    123a:	75 69       	ori	r23, 0x95	; 149
    123c:	6c 64       	ori	r22, 0x4C	; 76
    123e:	2f 61       	ori	r18, 0x1F	; 31
    1240:	76 72       	andi	r23, 0x26	; 38
    1242:	2f 61       	ori	r18, 0x1F	; 31
    1244:	76 72       	andi	r23, 0x26	; 38
    1246:	35 2f       	mov	r19, r21
    1248:	6c 69       	ori	r22, 0x9C	; 156
    124a:	62 67       	ori	r22, 0x72	; 114
    124c:	63 63       	ori	r22, 0x33	; 51
    124e:	00 47       	sbci	r16, 0x70	; 112
    1250:	4e 55       	subi	r20, 0x5E	; 94
    1252:	20 41       	sbci	r18, 0x10	; 16
    1254:	53 20       	and	r5, r3
    1256:	32 2e       	mov	r3, r18
    1258:	32 36       	cpi	r19, 0x62	; 98
    125a:	00 01       	movw	r0, r0
    125c:	80 b7       	in	r24, 0x30	; 48
    125e:	00 00       	nop
    1260:	00 02       	muls	r16, r16
    1262:	00 3c       	cpi	r16, 0xC0	; 192
    1264:	08 00       	.word	0x0008	; ????
    1266:	00 04       	cpc	r0, r0
    1268:	01 ba       	out	0x11, r0	; 17
    126a:	08 00       	.word	0x0008	; ????
    126c:	00 da       	rcall	.-3072   	; 0x66e <__data_load_end+0x15c>
    126e:	00 00       	nop
    1270:	00 ea       	ldi	r16, 0xA0	; 160
    1272:	00 00       	nop
    1274:	00 2e       	mov	r0, r16
    1276:	2e 2f       	mov	r18, r30
    1278:	2e 2e       	mov	r2, r30
    127a:	2f 2e       	mov	r2, r31
    127c:	2e 2f       	mov	r18, r30
    127e:	2e 2e       	mov	r2, r30
    1280:	2f 67       	ori	r18, 0x7F	; 127
    1282:	63 63       	ori	r22, 0x33	; 51
    1284:	2f 6c       	ori	r18, 0xCF	; 207
    1286:	69 62       	ori	r22, 0x29	; 41
    1288:	67 63       	ori	r22, 0x37	; 55
    128a:	63 2f       	mov	r22, r19
    128c:	63 6f       	ori	r22, 0xF3	; 243
    128e:	6e 66       	ori	r22, 0x6E	; 110
    1290:	69 67       	ori	r22, 0x79	; 121
    1292:	2f 61       	ori	r18, 0x1F	; 31
    1294:	76 72       	andi	r23, 0x26	; 38
    1296:	2f 6c       	ori	r18, 0xCF	; 207
    1298:	69 62       	ori	r22, 0x29	; 41
    129a:	31 66       	ori	r19, 0x61	; 97
    129c:	75 6e       	ori	r23, 0xE5	; 229
    129e:	63 73       	andi	r22, 0x33	; 51
    12a0:	2e 53       	subi	r18, 0x3E	; 62
    12a2:	00 2f       	mov	r16, r16
    12a4:	68 6f       	ori	r22, 0xF8	; 248
    12a6:	6d 65       	ori	r22, 0x5D	; 93
    12a8:	2f 6a       	ori	r18, 0xAF	; 175
    12aa:	65 6e       	ori	r22, 0xE5	; 229
    12ac:	6b 69       	ori	r22, 0x9B	; 155
    12ae:	6e 73       	andi	r22, 0x3E	; 62
    12b0:	2d 6d       	ori	r18, 0xDD	; 221
    12b2:	69 6e       	ori	r22, 0xE9	; 233
    12b4:	67 77       	andi	r22, 0x77	; 119
    12b6:	33 32       	cpi	r19, 0x23	; 35
    12b8:	2f 77       	andi	r18, 0x7F	; 127
    12ba:	6f 72       	andi	r22, 0x2F	; 47
    12bc:	6b 73       	andi	r22, 0x3B	; 59
    12be:	70 61       	ori	r23, 0x10	; 16
    12c0:	63 65       	ori	r22, 0x53	; 83
    12c2:	2f 61       	ori	r18, 0x1F	; 31
    12c4:	76 72       	andi	r23, 0x26	; 38
    12c6:	2d 67       	ori	r18, 0x7D	; 125
    12c8:	63 63       	ori	r22, 0x33	; 51
    12ca:	2d 73       	andi	r18, 0x3D	; 61
    12cc:	74 61       	ori	r23, 0x14	; 20
    12ce:	67 69       	ori	r22, 0x97	; 151
    12d0:	6e 67       	ori	r22, 0x7E	; 126
    12d2:	2f 6c       	ori	r18, 0xCF	; 207
    12d4:	61 62       	ori	r22, 0x21	; 33
    12d6:	65 6c       	ori	r22, 0xC5	; 197
    12d8:	2f 55       	subi	r18, 0x5F	; 95
    12da:	62 75       	andi	r22, 0x52	; 82
    12dc:	6e 74       	andi	r22, 0x4E	; 78
    12de:	75 31       	cpi	r23, 0x15	; 21
    12e0:	34 2e       	mov	r3, r20
    12e2:	30 34       	cpi	r19, 0x40	; 64
    12e4:	78 36       	cpi	r23, 0x68	; 104
    12e6:	34 2d       	mov	r19, r4
    12e8:	6d 69       	ori	r22, 0x9D	; 157
    12ea:	6e 67       	ori	r22, 0x7E	; 126
    12ec:	77 33       	cpi	r23, 0x37	; 55
    12ee:	32 2f       	mov	r19, r18
    12f0:	67 63       	ori	r22, 0x37	; 55
    12f2:	63 2d       	mov	r22, r3
    12f4:	62 75       	andi	r22, 0x52	; 82
    12f6:	69 6c       	ori	r22, 0xC9	; 201
    12f8:	64 2f       	mov	r22, r20
    12fa:	61 76       	andi	r22, 0x61	; 97
    12fc:	72 2f       	mov	r23, r18
    12fe:	61 76       	andi	r22, 0x61	; 97
    1300:	72 35       	cpi	r23, 0x52	; 82
    1302:	2f 6c       	ori	r18, 0xCF	; 207
    1304:	69 62       	ori	r22, 0x29	; 41
    1306:	67 63       	ori	r22, 0x37	; 55
    1308:	63 00       	.word	0x0063	; ????
    130a:	47 4e       	sbci	r20, 0xE7	; 231
    130c:	55 20       	and	r5, r5
    130e:	41 53       	subi	r20, 0x31	; 49
    1310:	20 32       	cpi	r18, 0x20	; 32
    1312:	2e 32       	cpi	r18, 0x2E	; 46
    1314:	36 00       	.word	0x0036	; ????
    1316:	01 80       	ldd	r0, Z+1	; 0x01

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	01 11       	cpse	r16, r1
   2:	01 25       	eor	r16, r1
   4:	0e 10       	cpse	r0, r14
   6:	06 00       	.word	0x0006	; ????
   8:	00 02       	muls	r16, r16
   a:	24 00       	.word	0x0024	; ????
   c:	03 0e       	add	r0, r19
   e:	0b 0b       	sbc	r16, r27
  10:	3e 0b       	sbc	r19, r30
  12:	00 00       	nop
  14:	03 24       	eor	r0, r3
  16:	00 03       	mulsu	r16, r16
  18:	0e 0b       	sbc	r16, r30
  1a:	0b 3e       	cpi	r16, 0xEB	; 235
  1c:	0b 00       	.word	0x000b	; ????
  1e:	00 04       	cpc	r0, r0
  20:	01 01       	movw	r0, r2
  22:	49 13       	cpse	r20, r25
  24:	00 00       	nop
  26:	05 21       	and	r16, r5
  28:	00 49       	sbci	r16, 0x90	; 144
  2a:	13 2f       	mov	r17, r19
  2c:	05 00       	.word	0x0005	; ????
  2e:	00 06       	cpc	r0, r16
  30:	34 00       	.word	0x0034	; ????
  32:	03 0e       	add	r0, r19
  34:	3a 0b       	sbc	r19, r26
  36:	3b 0b       	sbc	r19, r27
  38:	49 13       	cpse	r20, r25
  3a:	3f 0c       	add	r3, r15
  3c:	02 0a       	sbc	r0, r18
  3e:	00 00       	nop
  40:	07 34       	cpi	r16, 0x47	; 71
  42:	00 03       	mulsu	r16, r16
  44:	0e 3a       	cpi	r16, 0xAE	; 174
  46:	0b 3b       	cpi	r16, 0xBB	; 187
  48:	0b 49       	sbci	r16, 0x9B	; 155
  4a:	13 3f       	cpi	r17, 0xF3	; 243
  4c:	0c 02       	muls	r16, r28
  4e:	0a 00       	.word	0x000a	; ????
  50:	00 08       	sbc	r0, r0
  52:	34 00       	.word	0x0034	; ????
  54:	03 0e       	add	r0, r19
  56:	3a 0b       	sbc	r19, r26
  58:	3b 0b       	sbc	r19, r27
  5a:	49 13       	cpse	r20, r25
  5c:	3f 0c       	add	r3, r15
  5e:	02 0a       	sbc	r0, r18
  60:	00 00       	nop
  62:	09 34       	cpi	r16, 0x49	; 73
  64:	00 03       	mulsu	r16, r16
  66:	0e 3a       	cpi	r16, 0xAE	; 174
  68:	0b 3b       	cpi	r16, 0xBB	; 187
  6a:	0b 49       	sbci	r16, 0x9B	; 155
  6c:	13 3f       	cpi	r17, 0xF3	; 243
  6e:	0c 02       	muls	r16, r28
  70:	0a 00       	.word	0x000a	; ????
  72:	00 0a       	sbc	r0, r16
  74:	34 00       	.word	0x0034	; ????
  76:	03 0e       	add	r0, r19
  78:	3a 0b       	sbc	r19, r26
  7a:	3b 0b       	sbc	r19, r27
  7c:	49 13       	cpse	r20, r25
  7e:	3f 0c       	add	r3, r15
  80:	02 0a       	sbc	r0, r18
  82:	00 00       	nop
  84:	0b 34       	cpi	r16, 0x4B	; 75
  86:	00 03       	mulsu	r16, r16
  88:	0e 3a       	cpi	r16, 0xAE	; 174
  8a:	0b 3b       	cpi	r16, 0xBB	; 187
  8c:	0b 49       	sbci	r16, 0x9B	; 155
  8e:	13 3f       	cpi	r17, 0xF3	; 243
  90:	0c 02       	muls	r16, r28
  92:	0a 00       	.word	0x000a	; ????
  94:	00 0c       	add	r0, r0
  96:	34 00       	.word	0x0034	; ????
  98:	03 0e       	add	r0, r19
  9a:	3a 0b       	sbc	r19, r26
  9c:	3b 0b       	sbc	r19, r27
  9e:	49 13       	cpse	r20, r25
  a0:	3f 0c       	add	r3, r15
  a2:	02 0a       	sbc	r0, r18
  a4:	00 00       	nop
  a6:	0d 34       	cpi	r16, 0x4D	; 77
  a8:	00 03       	mulsu	r16, r16
  aa:	0e 3a       	cpi	r16, 0xAE	; 174
  ac:	0b 3b       	cpi	r16, 0xBB	; 187
  ae:	0b 49       	sbci	r16, 0x9B	; 155
  b0:	13 3f       	cpi	r17, 0xF3	; 243
  b2:	0c 02       	muls	r16, r28
  b4:	0a 00       	.word	0x000a	; ????
  b6:	00 0e       	add	r0, r16
  b8:	34 00       	.word	0x0034	; ????
  ba:	03 0e       	add	r0, r19
  bc:	3a 0b       	sbc	r19, r26
  be:	3b 0b       	sbc	r19, r27
  c0:	49 13       	cpse	r20, r25
  c2:	3f 0c       	add	r3, r15
  c4:	02 0a       	sbc	r0, r18
  c6:	00 00       	nop
  c8:	0f 34       	cpi	r16, 0x4F	; 79
  ca:	00 03       	mulsu	r16, r16
  cc:	0e 3a       	cpi	r16, 0xAE	; 174
  ce:	0b 3b       	cpi	r16, 0xBB	; 187
  d0:	0b 49       	sbci	r16, 0x9B	; 155
  d2:	13 3f       	cpi	r17, 0xF3	; 243
  d4:	0c 02       	muls	r16, r28
  d6:	0a 00       	.word	0x000a	; ????
  d8:	00 10       	cpse	r0, r0
  da:	34 00       	.word	0x0034	; ????
  dc:	03 0e       	add	r0, r19
  de:	3a 0b       	sbc	r19, r26
  e0:	3b 0b       	sbc	r19, r27
  e2:	49 13       	cpse	r20, r25
  e4:	3f 0c       	add	r3, r15
  e6:	02 0a       	sbc	r0, r18
  e8:	00 00       	nop
  ea:	11 34       	cpi	r17, 0x41	; 65
  ec:	00 03       	mulsu	r16, r16
  ee:	0e 3a       	cpi	r16, 0xAE	; 174
  f0:	0b 3b       	cpi	r16, 0xBB	; 187
  f2:	0b 49       	sbci	r16, 0x9B	; 155
  f4:	13 3f       	cpi	r17, 0xF3	; 243
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  f6:	0c 02       	muls	r16, r28
  f8:	0a 00       	.word	0x000a	; ????
  fa:	00 12       	cpse	r0, r16
	uint8_t bit = digitalPinToBitMask(pin);
  fc:	34 00       	.word	0x0034	; ????
  fe:	03 0e       	add	r0, r19
 100:	3a 0b       	sbc	r19, r26
	uint8_t port = digitalPinToPort(pin);
 102:	3b 0b       	sbc	r19, r27
 104:	49 13       	cpse	r20, r25
 106:	3f 0c       	add	r3, r15
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 108:	02 0a       	sbc	r0, r18
 10a:	00 00       	nop

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 10c:	13 34       	cpi	r17, 0x43	; 67
 10e:	00 03       	mulsu	r16, r16
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 110:	0e 3a       	cpi	r16, 0xAE	; 174
 112:	0b 3b       	cpi	r16, 0xBB	; 187
 114:	0b 49       	sbci	r16, 0x9B	; 155
 116:	13 3f       	cpi	r17, 0xF3	; 243
 118:	0c 02       	muls	r16, r28
 11a:	0a 00       	.word	0x000a	; ????
 11c:	00 14       	cp	r0, r0

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 11e:	34 00       	.word	0x0034	; ????
 120:	03 0e       	add	r0, r19
 122:	3a 0b       	sbc	r19, r26
 124:	3b 0b       	sbc	r19, r27
 126:	49 13       	cpse	r20, r25
 128:	3f 0c       	add	r3, r15
 12a:	02 0a       	sbc	r0, r18

	uint8_t oldSREG = SREG;
 12c:	00 00       	nop
	cli();
 12e:	15 34       	cpi	r17, 0x45	; 69

	if (val == LOW) {
		*out &= ~bit;
 130:	00 03       	mulsu	r16, r16
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 132:	0e 3a       	cpi	r16, 0xAE	; 174
 134:	0b 3b       	cpi	r16, 0xBB	; 187
		*out &= ~bit;
 136:	0b 49       	sbci	r16, 0x9B	; 155
 138:	13 3f       	cpi	r17, 0xF3	; 243
	} else {
		*out |= bit;
 13a:	0c 02       	muls	r16, r28
	}

	SREG = oldSREG;
 13c:	0a 00       	.word	0x000a	; ????
}
 13e:	00 16       	cp	r0, r16
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 140:	34 00       	.word	0x0034	; ????
 142:	03 0e       	add	r0, r19
 144:	3a 0b       	sbc	r19, r26
 146:	3b 0b       	sbc	r19, r27
 148:	49 13       	cpse	r20, r25
 14a:	3f 0c       	add	r3, r15
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 14c:	02 0a       	sbc	r0, r18
 14e:	00 00       	nop
 150:	17 34       	cpi	r17, 0x47	; 71
 152:	00 03       	mulsu	r16, r16
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 154:	0e 3a       	cpi	r16, 0xAE	; 174
 156:	0b 3b       	cpi	r16, 0xBB	; 187
 158:	0b 49       	sbci	r16, 0x9B	; 155
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 15a:	13 3f       	cpi	r17, 0xF3	; 243
 15c:	0c 02       	muls	r16, r28
 15e:	0a 00       	.word	0x000a	; ????
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 160:	00 18       	sub	r0, r0
 162:	34 00       	.word	0x0034	; ????
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 164:	03 0e       	add	r0, r19
 166:	3a 0b       	sbc	r19, r26
 168:	3b 0b       	sbc	r19, r27
 16a:	49 13       	cpse	r20, r25
 16c:	3f 0c       	add	r3, r15
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 16e:	02 0a       	sbc	r0, r18
 170:	00 00       	nop
 172:	19 34       	cpi	r17, 0x49	; 73
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 174:	00 03       	mulsu	r16, r16
 176:	0e 3a       	cpi	r16, 0xAE	; 174
 178:	0b 3b       	cpi	r16, 0xBB	; 187
 17a:	0b 49       	sbci	r16, 0x9B	; 155
 17c:	13 3f       	cpi	r17, 0xF3	; 243
 17e:	0c 02       	muls	r16, r28
 180:	0a 00       	.word	0x000a	; ????
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 182:	00 1a       	sub	r0, r16
 184:	34 00       	.word	0x0034	; ????
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 186:	03 0e       	add	r0, r19
 188:	3a 0b       	sbc	r19, r26
 18a:	3b 0b       	sbc	r19, r27
 18c:	49 13       	cpse	r20, r25
 18e:	3f 0c       	add	r3, r15
 190:	02 0a       	sbc	r0, r18
 192:	00 00       	nop
 194:	1b 34       	cpi	r17, 0x4B	; 75
 196:	00 03       	mulsu	r16, r16
 198:	0e 3a       	cpi	r16, 0xAE	; 174
 19a:	0b 3b       	cpi	r16, 0xBB	; 187
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 19c:	0b 49       	sbci	r16, 0x9B	; 155
 19e:	13 3f       	cpi	r17, 0xF3	; 243
 1a0:	0c 02       	muls	r16, r28
 1a2:	0a 00       	.word	0x000a	; ????
 1a4:	00 1c       	adc	r0, r0
 1a6:	34 00       	.word	0x0034	; ????
 1a8:	03 0e       	add	r0, r19
 1aa:	3a 0b       	sbc	r19, r26
	unsigned char f = timer0_fract;
 1ac:	3b 0b       	sbc	r19, r27
 1ae:	49 13       	cpse	r20, r25

	m += MILLIS_INC;
	f += FRACT_INC;
 1b0:	3f 0c       	add	r3, r15
 1b2:	02 0a       	sbc	r0, r18
	if (f >= FRACT_MAX) {
 1b4:	00 00       	nop
 1b6:	1d 34       	cpi	r17, 0x4D	; 77
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 1b8:	00 03       	mulsu	r16, r16
 1ba:	0e 3a       	cpi	r16, 0xAE	; 174
 1bc:	0b 3b       	cpi	r16, 0xBB	; 187
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 1be:	0b 49       	sbci	r16, 0x9B	; 155
 1c0:	13 3f       	cpi	r17, 0xF3	; 243
	timer0_millis = m;
 1c2:	0c 02       	muls	r16, r28
 1c4:	0a 00       	.word	0x000a	; ????
 1c6:	00 1e       	adc	r0, r16
 1c8:	34 00       	.word	0x0034	; ????
 1ca:	03 0e       	add	r0, r19
 1cc:	3a 0b       	sbc	r19, r26
 1ce:	3b 0b       	sbc	r19, r27
 1d0:	49 13       	cpse	r20, r25
	timer0_overflow_count++;
 1d2:	3f 0c       	add	r3, r15
 1d4:	02 0a       	sbc	r0, r18
 1d6:	00 00       	nop
 1d8:	1f 34       	cpi	r17, 0x4F	; 79
 1da:	00 03       	mulsu	r16, r16
 1dc:	0e 3a       	cpi	r16, 0xAE	; 174
 1de:	0b 3b       	cpi	r16, 0xBB	; 187
 1e0:	0b 49       	sbci	r16, 0x9B	; 155
 1e2:	13 3f       	cpi	r17, 0xF3	; 243
 1e4:	0c 02       	muls	r16, r28
 1e6:	0a 00       	.word	0x000a	; ????
 1e8:	00 20       	and	r0, r0
 1ea:	34 00       	.word	0x0034	; ????
 1ec:	03 0e       	add	r0, r19
 1ee:	3a 0b       	sbc	r19, r26
 1f0:	3b 0b       	sbc	r19, r27
 1f2:	49 13       	cpse	r20, r25
 1f4:	3f 0c       	add	r3, r15
 1f6:	02 0a       	sbc	r0, r18
}
 1f8:	00 00       	nop
 1fa:	21 34       	cpi	r18, 0x41	; 65
 1fc:	00 03       	mulsu	r16, r16
 1fe:	0e 3a       	cpi	r16, 0xAE	; 174
 200:	0b 3b       	cpi	r16, 0xBB	; 187
 202:	0b 49       	sbci	r16, 0x9B	; 155
 204:	13 3f       	cpi	r17, 0xF3	; 243
 206:	0c 02       	muls	r16, r28
 208:	0a 00       	.word	0x000a	; ????
 20a:	00 22       	and	r0, r16
 20c:	34 00       	.word	0x0034	; ????
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 20e:	03 0e       	add	r0, r19
 210:	3a 0b       	sbc	r19, r26
		m += 1;
 212:	3b 0b       	sbc	r19, r27
 214:	49 13       	cpse	r20, r25
 216:	3f 0c       	add	r3, r15
 218:	02 0a       	sbc	r0, r18

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 21a:	00 00       	nop
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 21c:	23 34       	cpi	r18, 0x43	; 67
 21e:	00 03       	mulsu	r16, r16
 220:	0e 3a       	cpi	r16, 0xAE	; 174
	sbi(TCCR0A, WGM00);
 222:	0b 3b       	cpi	r16, 0xBB	; 187
 224:	0b 49       	sbci	r16, 0x9B	; 155
 226:	13 3f       	cpi	r17, 0xF3	; 243
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 228:	0c 02       	muls	r16, r28
 22a:	0a 00       	.word	0x000a	; ????
 22c:	00 24       	eor	r0, r0
	sbi(TCCR0B, CS00);
 22e:	34 00       	.word	0x0034	; ????
 230:	03 0e       	add	r0, r19
 232:	3a 0b       	sbc	r19, r26

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 234:	3b 0b       	sbc	r19, r27
 236:	49 13       	cpse	r20, r25
 238:	3f 0c       	add	r3, r15
 23a:	02 0a       	sbc	r0, r18
 23c:	00 00       	nop
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 23e:	25 34       	cpi	r18, 0x45	; 69
 240:	00 03       	mulsu	r16, r16

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 242:	0e 3a       	cpi	r16, 0xAE	; 174
 244:	0b 3b       	cpi	r16, 0xBB	; 187
 246:	0b 49       	sbci	r16, 0x9B	; 155
 248:	13 3f       	cpi	r17, 0xF3	; 243
 24a:	0c 02       	muls	r16, r28
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 24c:	0a 00       	.word	0x000a	; ????
 24e:	00 26       	eor	r0, r16
 250:	34 00       	.word	0x0034	; ????
 252:	03 0e       	add	r0, r19
 254:	3a 0b       	sbc	r19, r26
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 256:	3b 0b       	sbc	r19, r27
 258:	49 13       	cpse	r20, r25
 25a:	3f 0c       	add	r3, r15
 25c:	02 0a       	sbc	r0, r18
 25e:	00 00       	nop

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 260:	27 34       	cpi	r18, 0x47	; 71
 262:	00 03       	mulsu	r16, r16
 264:	0e 3a       	cpi	r16, 0xAE	; 174
 266:	0b 3b       	cpi	r16, 0xBB	; 187
 268:	0b 49       	sbci	r16, 0x9B	; 155

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 26a:	13 3f       	cpi	r17, 0xF3	; 243
 26c:	0c 02       	muls	r16, r28
 26e:	0a 00       	.word	0x000a	; ????
 270:	00 28       	or	r0, r0
 272:	34 00       	.word	0x0034	; ????
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 274:	03 0e       	add	r0, r19
 276:	3a 0b       	sbc	r19, r26
 278:	3b 0b       	sbc	r19, r27
 27a:	49 13       	cpse	r20, r25
 27c:	3f 0c       	add	r3, r15
		sbi(ADCSRA, ADPS1);
 27e:	02 0a       	sbc	r0, r18
 280:	00 00       	nop
 282:	29 34       	cpi	r18, 0x49	; 73
 284:	00 03       	mulsu	r16, r16
 286:	0e 3a       	cpi	r16, 0xAE	; 174
		sbi(ADCSRA, ADPS0);
 288:	0b 3b       	cpi	r16, 0xBB	; 187
 28a:	0b 49       	sbci	r16, 0x9B	; 155
 28c:	13 3f       	cpi	r17, 0xF3	; 243
 28e:	0c 02       	muls	r16, r28
 290:	0a 00       	.word	0x000a	; ????
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 292:	00 2a       	or	r0, r16
 294:	34 00       	.word	0x0034	; ????
 296:	03 0e       	add	r0, r19
 298:	3a 0b       	sbc	r19, r26
 29a:	3b 0b       	sbc	r19, r27
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 29c:	49 13       	cpse	r20, r25
 29e:	3f 0c       	add	r3, r15
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 2a0:	02 0a       	sbc	r0, r18
 2a2:	00 00       	nop
 2a4:	2b 34       	cpi	r18, 0x4B	; 75
	uint8_t port = digitalPinToPort(pin);
 2a6:	00 03       	mulsu	r16, r16
 2a8:	0e 3a       	cpi	r16, 0xAE	; 174
 2aa:	0b 3b       	cpi	r16, 0xBB	; 187
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 2ac:	0b 49       	sbci	r16, 0x9B	; 155
 2ae:	13 3f       	cpi	r17, 0xF3	; 243

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 2b0:	0c 02       	muls	r16, r28
 2b2:	0a 00       	.word	0x000a	; ????
 2b4:	00 2c       	mov	r0, r0
 2b6:	34 00       	.word	0x0034	; ????
 2b8:	03 0e       	add	r0, r19
 2ba:	3a 0b       	sbc	r19, r26
 2bc:	3b 0b       	sbc	r19, r27
 2be:	49 13       	cpse	r20, r25
	out = portOutputRegister(port);
 2c0:	3f 0c       	add	r3, r15
 2c2:	02 0a       	sbc	r0, r18
 2c4:	00 00       	nop
 2c6:	2d 34       	cpi	r18, 0x4D	; 77
 2c8:	00 03       	mulsu	r16, r16
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 2ca:	0e 3a       	cpi	r16, 0xAE	; 174
                cli();
 2cc:	0b 3b       	cpi	r16, 0xBB	; 187
		*reg |= bit;
 2ce:	0b 49       	sbci	r16, 0x9B	; 155
 2d0:	13 3f       	cpi	r17, 0xF3	; 243
 2d2:	0c 02       	muls	r16, r28
		SREG = oldSREG;
 2d4:	0a 00       	.word	0x000a	; ????
 2d6:	00 2e       	mov	r0, r16
 2d8:	34 00       	.word	0x0034	; ????
void loop() {
  // put your main code here, to run repeatedly:
  // Create trigger
  int randNumber1, randNumber2;
  randomSeed(0);
  noInterrupts();
 2da:	03 0e       	add	r0, r19
  digitalWrite(LED_BUILTIN, LOW);   
 2dc:	3a 0b       	sbc	r19, r26
 2de:	3b 0b       	sbc	r19, r27
 2e0:	49 13       	cpse	r20, r25
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
 2e2:	3f 0c       	add	r3, r15
 2e4:	02 0a       	sbc	r0, r18
 2e6:	00 00       	nop
 2e8:	2f 34       	cpi	r18, 0x4F	; 79
 2ea:	00 03       	mulsu	r16, r16
 2ec:	0e 3a       	cpi	r16, 0xAE	; 174
 2ee:	0b 3b       	cpi	r16, 0xBB	; 187
  //Code goes here
  randNumber1 = random(65535);
  randNumber2 = random(65535);
  interrupts();
 2f0:	0b 49       	sbci	r16, 0x9B	; 155
 2f2:	13 3f       	cpi	r17, 0xF3	; 243
 2f4:	0c 02       	muls	r16, r28
 2f6:	0a 00       	.word	0x000a	; ????
 2f8:	00 30       	cpi	r16, 0x00	; 0
 2fa:	34 00       	.word	0x0034	; ????
 2fc:	03 0e       	add	r0, r19
 2fe:	3a 0b       	sbc	r19, r26
 300:	3b 0b       	sbc	r19, r27
 302:	49 13       	cpse	r20, r25
 304:	3f 0c       	add	r3, r15
 306:	02 0a       	sbc	r0, r18
 308:	00 00       	nop
 30a:	31 34       	cpi	r19, 0x41	; 65
 30c:	00 03       	mulsu	r16, r16
 30e:	0e 3a       	cpi	r16, 0xAE	; 174
 310:	0b 3b       	cpi	r16, 0xBB	; 187
 312:	0b 49       	sbci	r16, 0x9B	; 155
 314:	13 3f       	cpi	r17, 0xF3	; 243
 316:	0c 02       	muls	r16, r28
 318:	0a 00       	.word	0x000a	; ????
 31a:	00 32       	cpi	r16, 0x20	; 32
 31c:	34 00       	.word	0x0034	; ????
 31e:	03 0e       	add	r0, r19
 320:	3a 0b       	sbc	r19, r26
 322:	3b 0b       	sbc	r19, r27
 324:	49 13       	cpse	r20, r25
 326:	3f 0c       	add	r3, r15
 328:	02 0a       	sbc	r0, r18
 32a:	00 00       	nop
 32c:	33 34       	cpi	r19, 0x43	; 67
 32e:	00 03       	mulsu	r16, r16
 330:	0e 3a       	cpi	r16, 0xAE	; 174
 332:	0b 3b       	cpi	r16, 0xBB	; 187
 334:	0b 49       	sbci	r16, 0x9B	; 155
 336:	13 3f       	cpi	r17, 0xF3	; 243
 338:	0c 02       	muls	r16, r28
 33a:	0a 00       	.word	0x000a	; ????
 33c:	00 34       	cpi	r16, 0x40	; 64
 33e:	34 00       	.word	0x0034	; ????
 340:	03 0e       	add	r0, r19
 342:	3a 0b       	sbc	r19, r26
 344:	3b 0b       	sbc	r19, r27
 346:	49 13       	cpse	r20, r25
 348:	3f 0c       	add	r3, r15
 34a:	02 0a       	sbc	r0, r18
 34c:	00 00       	nop
 34e:	35 34       	cpi	r19, 0x45	; 69
 350:	00 03       	mulsu	r16, r16
 352:	0e 3a       	cpi	r16, 0xAE	; 174
 354:	0b 3b       	cpi	r16, 0xBB	; 187
 356:	0b 49       	sbci	r16, 0x9B	; 155
 358:	13 3f       	cpi	r17, 0xF3	; 243
 35a:	0c 02       	muls	r16, r28
 35c:	0a 00       	.word	0x000a	; ????
 35e:	00 36       	cpi	r16, 0x60	; 96
 360:	34 00       	.word	0x0034	; ????
 362:	03 0e       	add	r0, r19
 364:	3a 0b       	sbc	r19, r26
 366:	3b 0b       	sbc	r19, r27
 368:	49 13       	cpse	r20, r25
 36a:	3f 0c       	add	r3, r15
 36c:	02 0a       	sbc	r0, r18
 36e:	00 00       	nop
 370:	37 34       	cpi	r19, 0x47	; 71
 372:	00 03       	mulsu	r16, r16
 374:	0e 3a       	cpi	r16, 0xAE	; 174
 376:	0b 3b       	cpi	r16, 0xBB	; 187
 378:	0b 49       	sbci	r16, 0x9B	; 155
 37a:	13 3f       	cpi	r17, 0xF3	; 243
 37c:	0c 02       	muls	r16, r28
 37e:	0a 00       	.word	0x000a	; ????
 380:	00 38       	cpi	r16, 0x80	; 128
 382:	34 00       	.word	0x0034	; ????
 384:	03 0e       	add	r0, r19
 386:	3a 0b       	sbc	r19, r26
 388:	3b 0b       	sbc	r19, r27
 38a:	49 13       	cpse	r20, r25
 38c:	3f 0c       	add	r3, r15
 38e:	02 0a       	sbc	r0, r18
 390:	00 00       	nop
 392:	39 34       	cpi	r19, 0x49	; 73
 394:	00 03       	mulsu	r16, r16
 396:	0e 3a       	cpi	r16, 0xAE	; 174
 398:	0b 3b       	cpi	r16, 0xBB	; 187
 39a:	0b 49       	sbci	r16, 0x9B	; 155
 39c:	13 3f       	cpi	r17, 0xF3	; 243
 39e:	0c 02       	muls	r16, r28
 3a0:	0a 00       	.word	0x000a	; ????
 3a2:	00 3a       	cpi	r16, 0xA0	; 160
 3a4:	34 00       	.word	0x0034	; ????
 3a6:	03 0e       	add	r0, r19
 3a8:	3a 0b       	sbc	r19, r26
 3aa:	3b 0b       	sbc	r19, r27
 3ac:	49 13       	cpse	r20, r25
 3ae:	3f 0c       	add	r3, r15
 3b0:	02 0a       	sbc	r0, r18
 3b2:	00 00       	nop
 3b4:	3b 34       	cpi	r19, 0x4B	; 75
 3b6:	00 03       	mulsu	r16, r16
 3b8:	0e 3a       	cpi	r16, 0xAE	; 174
 3ba:	0b 3b       	cpi	r16, 0xBB	; 187
 3bc:	0b 49       	sbci	r16, 0x9B	; 155
 3be:	13 3f       	cpi	r17, 0xF3	; 243
 3c0:	0c 02       	muls	r16, r28
 3c2:	0a 00       	.word	0x000a	; ????
 3c4:	00 3c       	cpi	r16, 0xC0	; 192
 3c6:	34 00       	.word	0x0034	; ????
 3c8:	03 0e       	add	r0, r19
 3ca:	3a 0b       	sbc	r19, r26
 3cc:	3b 0b       	sbc	r19, r27
 3ce:	49 13       	cpse	r20, r25
 3d0:	3f 0c       	add	r3, r15
 3d2:	02 0a       	sbc	r0, r18
 3d4:	00 00       	nop
 3d6:	3d 34       	cpi	r19, 0x4D	; 77
 3d8:	00 03       	mulsu	r16, r16
 3da:	0e 3a       	cpi	r16, 0xAE	; 174
 3dc:	0b 3b       	cpi	r16, 0xBB	; 187
 3de:	0b 49       	sbci	r16, 0x9B	; 155
 3e0:	13 3f       	cpi	r17, 0xF3	; 243
 3e2:	0c 02       	muls	r16, r28
 3e4:	0a 00       	.word	0x000a	; ????
 3e6:	00 3e       	cpi	r16, 0xE0	; 224
 3e8:	34 00       	.word	0x0034	; ????
 3ea:	03 0e       	add	r0, r19
 3ec:	3a 0b       	sbc	r19, r26
 3ee:	3b 0b       	sbc	r19, r27
 3f0:	49 13       	cpse	r20, r25
 3f2:	3f 0c       	add	r3, r15
 3f4:	02 0a       	sbc	r0, r18
 3f6:	00 00       	nop
 3f8:	3f 34       	cpi	r19, 0x4F	; 79
 3fa:	00 03       	mulsu	r16, r16
 3fc:	0e 3a       	cpi	r16, 0xAE	; 174
 3fe:	0b 3b       	cpi	r16, 0xBB	; 187
 400:	0b 49       	sbci	r16, 0x9B	; 155
 402:	13 3f       	cpi	r17, 0xF3	; 243
 404:	0c 02       	muls	r16, r28
 406:	0a 00       	.word	0x000a	; ????
 408:	00 40       	sbci	r16, 0x00	; 0
 40a:	34 00       	.word	0x0034	; ????
 40c:	03 0e       	add	r0, r19
 40e:	3a 0b       	sbc	r19, r26
 410:	3b 0b       	sbc	r19, r27
 412:	49 13       	cpse	r20, r25
 414:	3f 0c       	add	r3, r15
 416:	02 0a       	sbc	r0, r18
 418:	00 00       	nop
 41a:	41 34       	cpi	r20, 0x41	; 65
 41c:	00 03       	mulsu	r16, r16
 41e:	0e 3a       	cpi	r16, 0xAE	; 174
 420:	0b 3b       	cpi	r16, 0xBB	; 187
 422:	0b 49       	sbci	r16, 0x9B	; 155
 424:	13 3f       	cpi	r17, 0xF3	; 243
 426:	0c 02       	muls	r16, r28
 428:	0a 00       	.word	0x000a	; ????
 42a:	00 42       	sbci	r16, 0x20	; 32
 42c:	34 00       	.word	0x0034	; ????
 42e:	03 0e       	add	r0, r19
 430:	3a 0b       	sbc	r19, r26
 432:	3b 0b       	sbc	r19, r27
 434:	49 13       	cpse	r20, r25
 436:	3f 0c       	add	r3, r15
 438:	02 0a       	sbc	r0, r18
 43a:	00 00       	nop
 43c:	43 34       	cpi	r20, 0x43	; 67
 43e:	00 03       	mulsu	r16, r16
 440:	0e 3a       	cpi	r16, 0xAE	; 174
 442:	0b 3b       	cpi	r16, 0xBB	; 187
 444:	0b 49       	sbci	r16, 0x9B	; 155
 446:	13 3f       	cpi	r17, 0xF3	; 243
 448:	0c 02       	muls	r16, r28
 44a:	0a 00       	.word	0x000a	; ????
 44c:	00 44       	sbci	r16, 0x40	; 64
 44e:	34 00       	.word	0x0034	; ????
 450:	03 0e       	add	r0, r19
 452:	3a 0b       	sbc	r19, r26
 454:	3b 0b       	sbc	r19, r27
 456:	49 13       	cpse	r20, r25
 458:	3f 0c       	add	r3, r15
 45a:	02 0a       	sbc	r0, r18
 45c:	00 00       	nop
 45e:	45 34       	cpi	r20, 0x45	; 69
 460:	00 03       	mulsu	r16, r16
 462:	0e 3a       	cpi	r16, 0xAE	; 174
 464:	0b 3b       	cpi	r16, 0xBB	; 187
 466:	0b 49       	sbci	r16, 0x9B	; 155
 468:	13 3f       	cpi	r17, 0xF3	; 243
 46a:	0c 02       	muls	r16, r28
 46c:	0a 00       	.word	0x000a	; ????
 46e:	00 46       	sbci	r16, 0x60	; 96
 470:	34 00       	.word	0x0034	; ????
 472:	03 0e       	add	r0, r19
 474:	3a 0b       	sbc	r19, r26
 476:	3b 0b       	sbc	r19, r27
 478:	49 13       	cpse	r20, r25
 47a:	3f 0c       	add	r3, r15
 47c:	02 0a       	sbc	r0, r18
 47e:	00 00       	nop
 480:	47 34       	cpi	r20, 0x47	; 71
 482:	00 03       	mulsu	r16, r16
 484:	0e 3a       	cpi	r16, 0xAE	; 174
 486:	0b 3b       	cpi	r16, 0xBB	; 187
 488:	0b 49       	sbci	r16, 0x9B	; 155
 48a:	13 3f       	cpi	r17, 0xF3	; 243
 48c:	0c 02       	muls	r16, r28
 48e:	0a 00       	.word	0x000a	; ????
 490:	00 48       	sbci	r16, 0x80	; 128
 492:	34 00       	.word	0x0034	; ????
 494:	03 0e       	add	r0, r19
 496:	3a 0b       	sbc	r19, r26
 498:	3b 0b       	sbc	r19, r27
 49a:	49 13       	cpse	r20, r25
 49c:	3f 0c       	add	r3, r15
 49e:	02 0a       	sbc	r0, r18
 4a0:	00 00       	nop
 4a2:	49 34       	cpi	r20, 0x49	; 73
 4a4:	00 03       	mulsu	r16, r16
 4a6:	0e 3a       	cpi	r16, 0xAE	; 174
 4a8:	0b 3b       	cpi	r16, 0xBB	; 187
 4aa:	0b 49       	sbci	r16, 0x9B	; 155
 4ac:	13 3f       	cpi	r17, 0xF3	; 243
 4ae:	0c 02       	muls	r16, r28
 4b0:	0a 00       	.word	0x000a	; ????
 4b2:	00 4a       	sbci	r16, 0xA0	; 160
 4b4:	34 00       	.word	0x0034	; ????
 4b6:	03 0e       	add	r0, r19
 4b8:	3a 0b       	sbc	r19, r26
 4ba:	3b 0b       	sbc	r19, r27
 4bc:	49 13       	cpse	r20, r25
 4be:	3f 0c       	add	r3, r15
 4c0:	02 0a       	sbc	r0, r18
 4c2:	00 00       	nop
 4c4:	4b 34       	cpi	r20, 0x4B	; 75
 4c6:	00 03       	mulsu	r16, r16
 4c8:	0e 3a       	cpi	r16, 0xAE	; 174
 4ca:	0b 3b       	cpi	r16, 0xBB	; 187
 4cc:	0b 49       	sbci	r16, 0x9B	; 155
 4ce:	13 3f       	cpi	r17, 0xF3	; 243
 4d0:	0c 02       	muls	r16, r28
 4d2:	0a 00       	.word	0x000a	; ????
 4d4:	00 4c       	sbci	r16, 0xC0	; 192
 4d6:	34 00       	.word	0x0034	; ????
 4d8:	03 0e       	add	r0, r19
 4da:	3a 0b       	sbc	r19, r26
 4dc:	3b 0b       	sbc	r19, r27
 4de:	49 13       	cpse	r20, r25
 4e0:	3f 0c       	add	r3, r15
 4e2:	02 0a       	sbc	r0, r18
 4e4:	00 00       	nop
 4e6:	4d 34       	cpi	r20, 0x4D	; 77
 4e8:	00 03       	mulsu	r16, r16
 4ea:	0e 3a       	cpi	r16, 0xAE	; 174
 4ec:	0b 3b       	cpi	r16, 0xBB	; 187
 4ee:	0b 49       	sbci	r16, 0x9B	; 155
 4f0:	13 3f       	cpi	r17, 0xF3	; 243
 4f2:	0c 02       	muls	r16, r28
 4f4:	0a 00       	.word	0x000a	; ????
 4f6:	00 4e       	sbci	r16, 0xE0	; 224
 4f8:	34 00       	.word	0x0034	; ????
 4fa:	03 0e       	add	r0, r19
 4fc:	3a 0b       	sbc	r19, r26
 4fe:	3b 0b       	sbc	r19, r27
 500:	49 13       	cpse	r20, r25
 502:	3f 0c       	add	r3, r15
 504:	02 0a       	sbc	r0, r18
 506:	00 00       	nop
 508:	4f 34       	cpi	r20, 0x4F	; 79
 50a:	00 03       	mulsu	r16, r16
 50c:	0e 3a       	cpi	r16, 0xAE	; 174
 50e:	0b 3b       	cpi	r16, 0xBB	; 187
 510:	0b 49       	sbci	r16, 0x9B	; 155
 512:	13 3f       	cpi	r17, 0xF3	; 243
 514:	0c 02       	muls	r16, r28
 516:	0a 00       	.word	0x000a	; ????
 518:	00 50       	subi	r16, 0x00	; 0
 51a:	34 00       	.word	0x0034	; ????
 51c:	03 0e       	add	r0, r19
 51e:	3a 0b       	sbc	r19, r26
 520:	3b 0b       	sbc	r19, r27
 522:	49 13       	cpse	r20, r25
 524:	3f 0c       	add	r3, r15
 526:	02 0a       	sbc	r0, r18
 528:	00 00       	nop
 52a:	51 34       	cpi	r21, 0x41	; 65
 52c:	00 03       	mulsu	r16, r16
 52e:	0e 3a       	cpi	r16, 0xAE	; 174
 530:	0b 3b       	cpi	r16, 0xBB	; 187
 532:	0b 49       	sbci	r16, 0x9B	; 155
 534:	13 3f       	cpi	r17, 0xF3	; 243
 536:	0c 02       	muls	r16, r28
 538:	0a 00       	.word	0x000a	; ????
 53a:	00 52       	subi	r16, 0x20	; 32
 53c:	34 00       	.word	0x0034	; ????
 53e:	03 0e       	add	r0, r19
 540:	3a 0b       	sbc	r19, r26
 542:	3b 0b       	sbc	r19, r27
 544:	49 13       	cpse	r20, r25
 546:	3f 0c       	add	r3, r15
 548:	02 0a       	sbc	r0, r18
 54a:	00 00       	nop
 54c:	53 34       	cpi	r21, 0x43	; 67
 54e:	00 03       	mulsu	r16, r16
 550:	0e 3a       	cpi	r16, 0xAE	; 174
 552:	0b 3b       	cpi	r16, 0xBB	; 187
 554:	0b 49       	sbci	r16, 0x9B	; 155
 556:	13 3f       	cpi	r17, 0xF3	; 243
 558:	0c 02       	muls	r16, r28
 55a:	0a 00       	.word	0x000a	; ????
 55c:	00 54       	subi	r16, 0x40	; 64
 55e:	34 00       	.word	0x0034	; ????
 560:	03 0e       	add	r0, r19
 562:	3a 0b       	sbc	r19, r26
 564:	3b 0b       	sbc	r19, r27
 566:	49 13       	cpse	r20, r25
 568:	3f 0c       	add	r3, r15
 56a:	02 0a       	sbc	r0, r18
 56c:	00 00       	nop
 56e:	55 34       	cpi	r21, 0x45	; 69
 570:	00 03       	mulsu	r16, r16
 572:	0e 3a       	cpi	r16, 0xAE	; 174
 574:	0b 3b       	cpi	r16, 0xBB	; 187
 576:	0b 49       	sbci	r16, 0x9B	; 155
 578:	13 3f       	cpi	r17, 0xF3	; 243
 57a:	0c 02       	muls	r16, r28
 57c:	0a 00       	.word	0x000a	; ????
 57e:	00 56       	subi	r16, 0x60	; 96
 580:	34 00       	.word	0x0034	; ????
 582:	03 0e       	add	r0, r19
 584:	3a 0b       	sbc	r19, r26
 586:	3b 0b       	sbc	r19, r27
 588:	49 13       	cpse	r20, r25
 58a:	3f 0c       	add	r3, r15
 58c:	02 0a       	sbc	r0, r18
 58e:	00 00       	nop
 590:	57 34       	cpi	r21, 0x47	; 71
 592:	00 03       	mulsu	r16, r16
 594:	0e 3a       	cpi	r16, 0xAE	; 174
 596:	0b 3b       	cpi	r16, 0xBB	; 187
 598:	0b 49       	sbci	r16, 0x9B	; 155
 59a:	13 3f       	cpi	r17, 0xF3	; 243
 59c:	0c 02       	muls	r16, r28
 59e:	0a 00       	.word	0x000a	; ????
 5a0:	00 00       	nop
 5a2:	01 11       	cpse	r16, r1
 5a4:	01 25       	eor	r16, r1
 5a6:	0e 13       	cpse	r16, r30
 5a8:	0b 03       	fmul	r16, r19
 5aa:	0e 1b       	sub	r16, r30
 5ac:	0e 55       	subi	r16, 0x5E	; 94
 5ae:	06 11       	cpse	r16, r6
 5b0:	01 52       	subi	r16, 0x21	; 33
 5b2:	01 10       	cpse	r0, r1
 5b4:	06 00       	.word	0x0006	; ????
 5b6:	00 02       	muls	r16, r16
 5b8:	16 00       	.word	0x0016	; ????
 5ba:	03 0e       	add	r0, r19
 5bc:	3a 0b       	sbc	r19, r26
 5be:	3b 0b       	sbc	r19, r27
 5c0:	49 13       	cpse	r20, r25
 5c2:	00 00       	nop
 5c4:	03 24       	eor	r0, r3
 5c6:	00 0b       	sbc	r16, r16
 5c8:	0b 3e       	cpi	r16, 0xEB	; 235
 5ca:	0b 03       	fmul	r16, r19
 5cc:	0e 00       	.word	0x000e	; ????
 5ce:	00 04       	cpc	r0, r0
 5d0:	26 00       	.word	0x0026	; ????
 5d2:	49 13       	cpse	r20, r25
 5d4:	00 00       	nop
 5d6:	05 2e       	mov	r0, r21
 5d8:	01 03       	mulsu	r16, r17
 5da:	0e 3a       	cpi	r16, 0xAE	; 174
 5dc:	0b 3b       	cpi	r16, 0xBB	; 187
 5de:	0b 20       	and	r0, r11
 5e0:	0b 01       	movw	r0, r22
 5e2:	13 00       	.word	0x0013	; ????
 5e4:	00 06       	cpc	r0, r16
 5e6:	05 00       	.word	0x0005	; ????
 5e8:	03 08       	sbc	r0, r3
 5ea:	3a 0b       	sbc	r19, r26
 5ec:	3b 0b       	sbc	r19, r27
 5ee:	49 13       	cpse	r20, r25
 5f0:	00 00       	nop
 5f2:	07 05       	cpc	r16, r7
 5f4:	00 03       	mulsu	r16, r16
 5f6:	0e 3a       	cpi	r16, 0xAE	; 174
 5f8:	0b 3b       	cpi	r16, 0xBB	; 187
 5fa:	0b 49       	sbci	r16, 0x9B	; 155
 5fc:	13 00       	.word	0x0013	; ????
 5fe:	00 08       	sbc	r0, r0
 600:	34 00       	.word	0x0034	; ????
 602:	03 08       	sbc	r0, r3
 604:	3a 0b       	sbc	r19, r26
 606:	3b 0b       	sbc	r19, r27
 608:	49 13       	cpse	r20, r25
 60a:	00 00       	nop
 60c:	09 34       	cpi	r16, 0x49	; 73
 60e:	00 03       	mulsu	r16, r16
 610:	0e 3a       	cpi	r16, 0xAE	; 174
 612:	0b 3b       	cpi	r16, 0xBB	; 187
 614:	0b 49       	sbci	r16, 0x9B	; 155
 616:	13 00       	.word	0x0013	; ????
 618:	00 0a       	sbc	r0, r16
 61a:	0b 01       	movw	r0, r22
 61c:	01 13       	cpse	r16, r17
 61e:	00 00       	nop
 620:	0b 0b       	sbc	r16, r27
 622:	01 00       	.word	0x0001	; ????
 624:	00 0c       	add	r0, r0
 626:	0f 00       	.word	0x000f	; ????
 628:	0b 0b       	sbc	r16, r27
 62a:	49 13       	cpse	r20, r25
 62c:	00 00       	nop
 62e:	0d 35       	cpi	r16, 0x5D	; 93
 630:	00 49       	sbci	r16, 0x90	; 144
 632:	13 00       	.word	0x0013	; ????
 634:	00 0e       	add	r0, r16
 636:	2e 01       	movw	r4, r28
 638:	03 0e       	add	r0, r19
 63a:	3a 0b       	sbc	r19, r26
 63c:	3b 0b       	sbc	r19, r27
 63e:	49 13       	cpse	r20, r25
 640:	20 0b       	sbc	r18, r16
 642:	01 13       	cpse	r16, r17
 644:	00 00       	nop
 646:	0f 2e       	mov	r0, r31
 648:	01 03       	mulsu	r16, r17
 64a:	0e 34       	cpi	r16, 0x4E	; 78
 64c:	0c 20       	and	r0, r12
 64e:	0b 01       	movw	r0, r22
 650:	13 00       	.word	0x0013	; ????
 652:	00 10       	cpse	r0, r0
 654:	2e 01       	movw	r4, r28
 656:	31 13       	cpse	r19, r17
 658:	11 01       	movw	r2, r2
 65a:	12 01       	movw	r2, r4
 65c:	40 0a       	sbc	r4, r16
 65e:	97 42       	sbci	r25, 0x27	; 39
 660:	0c 01       	movw	r0, r24
 662:	13 00       	.word	0x0013	; ????
 664:	00 11       	cpse	r16, r0
 666:	05 00       	.word	0x0005	; ????
 668:	31 13       	cpse	r19, r17
 66a:	02 0a       	sbc	r0, r18
 66c:	00 00       	nop
 66e:	12 34       	cpi	r17, 0x42	; 66
 670:	00 31       	cpi	r16, 0x10	; 16
 672:	13 02       	muls	r17, r19
 674:	06 00       	.word	0x0006	; ????
 676:	00 13       	cpse	r16, r16
 678:	05 00       	.word	0x0005	; ????
 67a:	31 13       	cpse	r19, r17
 67c:	1c 0b       	sbc	r17, r28
 67e:	00 00       	nop
 680:	14 0b       	sbc	r17, r20
 682:	01 31       	cpi	r16, 0x11	; 17
 684:	13 11       	cpse	r17, r3
 686:	01 12       	cpse	r0, r17
 688:	01 01       	movw	r0, r2
 68a:	13 00       	.word	0x0013	; ????
 68c:	00 15       	cp	r16, r0
 68e:	1d 01       	movw	r2, r26
 690:	31 13       	cpse	r19, r17
 692:	52 01       	movw	r10, r4
 694:	55 06       	cpc	r5, r21
 696:	58 0b       	sbc	r21, r24
 698:	59 0b       	sbc	r21, r25
 69a:	01 13       	cpse	r16, r17
 69c:	00 00       	nop
 69e:	16 05       	cpc	r17, r6
 6a0:	00 31       	cpi	r16, 0x10	; 16
 6a2:	13 02       	muls	r17, r19
 6a4:	06 00       	.word	0x0006	; ????
 6a6:	00 17       	cp	r16, r16
 6a8:	0b 01       	movw	r0, r22
 6aa:	11 01       	movw	r2, r2
 6ac:	12 01       	movw	r2, r4
 6ae:	00 00       	nop
 6b0:	18 34       	cpi	r17, 0x48	; 72
 6b2:	00 31       	cpi	r16, 0x10	; 16
 6b4:	13 00       	.word	0x0013	; ????
 6b6:	00 19       	sub	r16, r0
 6b8:	0b 01       	movw	r0, r22
 6ba:	31 13       	cpse	r19, r17
 6bc:	11 01       	movw	r2, r2
 6be:	12 01       	movw	r2, r4
 6c0:	00 00       	nop
 6c2:	1a 2e       	mov	r1, r26
 6c4:	01 3f       	cpi	r16, 0xF1	; 241
 6c6:	0c 03       	fmul	r16, r20
 6c8:	0e 3a       	cpi	r16, 0xAE	; 174
 6ca:	0b 3b       	cpi	r16, 0xBB	; 187
 6cc:	0b 11       	cpse	r16, r11
 6ce:	01 12       	cpse	r0, r17
 6d0:	01 40       	sbci	r16, 0x01	; 1
 6d2:	06 97       	sbiw	r24, 0x06	; 6
 6d4:	42 0c       	add	r4, r2
 6d6:	01 13       	cpse	r16, r17
 6d8:	00 00       	nop
 6da:	1b 34       	cpi	r17, 0x4B	; 75
 6dc:	00 03       	mulsu	r16, r16
 6de:	08 3a       	cpi	r16, 0xA8	; 168
 6e0:	0b 3b       	cpi	r16, 0xBB	; 187
 6e2:	0b 49       	sbci	r16, 0x9B	; 155
 6e4:	13 02       	muls	r17, r19
 6e6:	06 00       	.word	0x0006	; ????
 6e8:	00 1c       	adc	r0, r0
 6ea:	2e 00       	.word	0x002e	; ????
 6ec:	03 0e       	add	r0, r19
 6ee:	3a 0b       	sbc	r19, r26
 6f0:	3b 0b       	sbc	r19, r27
 6f2:	20 0b       	sbc	r18, r16
 6f4:	00 00       	nop
 6f6:	1d 24       	eor	r1, r13
 6f8:	00 0b       	sbc	r16, r16
 6fa:	0b 3e       	cpi	r16, 0xEB	; 235
 6fc:	0b 03       	fmul	r16, r19
 6fe:	08 00       	.word	0x0008	; ????
 700:	00 1e       	adc	r0, r16
 702:	2e 01       	movw	r4, r28
 704:	3f 0c       	add	r3, r15
 706:	03 0e       	add	r0, r19
 708:	3a 0b       	sbc	r19, r26
 70a:	3b 0b       	sbc	r19, r27
 70c:	49 13       	cpse	r20, r25
 70e:	87 01       	movw	r16, r14
 710:	0c 11       	cpse	r16, r12
 712:	01 12       	cpse	r0, r17
 714:	01 40       	sbci	r16, 0x01	; 1
 716:	0a 97       	sbiw	r24, 0x0a	; 10
 718:	42 0c       	add	r4, r2
 71a:	01 13       	cpse	r16, r17
 71c:	00 00       	nop
 71e:	1f 1d       	adc	r17, r15
 720:	00 31       	cpi	r16, 0x10	; 16
 722:	13 11       	cpse	r17, r3
 724:	01 12       	cpse	r0, r17
 726:	01 58       	subi	r16, 0x81	; 129
 728:	0b 59       	subi	r16, 0x9B	; 155
 72a:	0b 00       	.word	0x000b	; ????
 72c:	00 20       	and	r0, r0
 72e:	1d 01       	movw	r2, r26
 730:	31 13       	cpse	r19, r17
 732:	11 01       	movw	r2, r2
 734:	12 01       	movw	r2, r4
 736:	58 0b       	sbc	r21, r24
 738:	59 0b       	sbc	r21, r25
 73a:	01 13       	cpse	r16, r17
 73c:	00 00       	nop
 73e:	21 1d       	adc	r18, r1
 740:	01 31       	cpi	r16, 0x11	; 17
 742:	13 11       	cpse	r17, r3
 744:	01 12       	cpse	r0, r17
 746:	01 58       	subi	r16, 0x81	; 129
 748:	0b 59       	subi	r16, 0x9B	; 155
 74a:	0b 00       	.word	0x000b	; ????
 74c:	00 22       	and	r0, r16
 74e:	89 82       	std	Y+1, r8	; 0x01
 750:	01 00       	.word	0x0001	; ????
 752:	11 01       	movw	r2, r2
 754:	00 00       	nop
 756:	23 89       	ldd	r18, Z+19	; 0x13
 758:	82 01       	movw	r16, r4
 75a:	01 11       	cpse	r16, r1
 75c:	01 31       	cpi	r16, 0x11	; 17
 75e:	13 01       	movw	r2, r6
 760:	13 00       	.word	0x0013	; ????
 762:	00 24       	eor	r0, r0
 764:	8a 82       	std	Y+2, r8	; 0x02
 766:	01 00       	.word	0x0001	; ????
 768:	02 0a       	sbc	r0, r18
 76a:	91 42       	sbci	r25, 0x21	; 33
 76c:	0a 00       	.word	0x000a	; ????
 76e:	00 25       	eor	r16, r0
 770:	89 82       	std	Y+1, r8	; 0x01
 772:	01 01       	movw	r0, r2
 774:	11 01       	movw	r2, r2
 776:	31 13       	cpse	r19, r17
 778:	00 00       	nop
 77a:	26 01       	movw	r4, r12
 77c:	01 49       	sbci	r16, 0x91	; 145
 77e:	13 01       	movw	r2, r6
 780:	13 00       	.word	0x0013	; ????
 782:	00 27       	eor	r16, r16
 784:	21 00       	.word	0x0021	; ????
 786:	49 13       	cpse	r20, r25
 788:	2f 0b       	sbc	r18, r31
 78a:	00 00       	nop
 78c:	28 34       	cpi	r18, 0x48	; 72
 78e:	00 03       	mulsu	r16, r16
 790:	0e 3a       	cpi	r16, 0xAE	; 174
 792:	0b 3b       	cpi	r16, 0xBB	; 187
 794:	0b 49       	sbci	r16, 0x9B	; 155
 796:	13 02       	muls	r17, r19
 798:	0a 00       	.word	0x000a	; ????
 79a:	00 00       	nop
 79c:	01 11       	cpse	r16, r1
 79e:	00 10       	cpse	r0, r0
 7a0:	06 11       	cpse	r16, r6
 7a2:	01 12       	cpse	r0, r17
 7a4:	01 03       	mulsu	r16, r17
 7a6:	08 1b       	sub	r16, r24
 7a8:	08 25       	eor	r16, r8
 7aa:	08 13       	cpse	r16, r24
 7ac:	05 00       	.word	0x0005	; ????
 7ae:	00 00       	nop
 7b0:	01 11       	cpse	r16, r1
 7b2:	00 10       	cpse	r0, r0
 7b4:	06 11       	cpse	r16, r6
 7b6:	01 12       	cpse	r0, r17
 7b8:	01 03       	mulsu	r16, r17
 7ba:	08 1b       	sub	r16, r24
 7bc:	08 25       	eor	r16, r8
 7be:	08 13       	cpse	r16, r24
 7c0:	05 00       	.word	0x0005	; ????
 7c2:	00 00       	nop
 7c4:	01 11       	cpse	r16, r1
 7c6:	00 10       	cpse	r0, r0
 7c8:	06 11       	cpse	r16, r6
 7ca:	01 12       	cpse	r0, r17
 7cc:	01 03       	mulsu	r16, r17
 7ce:	08 1b       	sub	r16, r24
 7d0:	08 25       	eor	r16, r8
 7d2:	08 13       	cpse	r16, r24
 7d4:	05 00       	.word	0x0005	; ????
 7d6:	00 00       	nop
 7d8:	01 11       	cpse	r16, r1
 7da:	00 10       	cpse	r0, r0
 7dc:	06 11       	cpse	r16, r6
 7de:	01 12       	cpse	r0, r17
 7e0:	01 03       	mulsu	r16, r17
 7e2:	08 1b       	sub	r16, r24
 7e4:	08 25       	eor	r16, r8
 7e6:	08 13       	cpse	r16, r24
 7e8:	05 00       	.word	0x0005	; ????
 7ea:	00 00       	nop
 7ec:	01 11       	cpse	r16, r1
 7ee:	00 10       	cpse	r0, r0
 7f0:	06 11       	cpse	r16, r6
 7f2:	01 12       	cpse	r0, r17
 7f4:	01 03       	mulsu	r16, r17
 7f6:	08 1b       	sub	r16, r24
 7f8:	08 25       	eor	r16, r8
 7fa:	08 13       	cpse	r16, r24
 7fc:	05 00       	.word	0x0005	; ????
 7fe:	00 00       	nop
 800:	01 11       	cpse	r16, r1
 802:	00 10       	cpse	r0, r0
 804:	06 11       	cpse	r16, r6
 806:	01 12       	cpse	r0, r17
 808:	01 03       	mulsu	r16, r17
 80a:	08 1b       	sub	r16, r24
 80c:	08 25       	eor	r16, r8
 80e:	08 13       	cpse	r16, r24
 810:	05 00       	.word	0x0005	; ????
 812:	00 00       	nop
 814:	01 11       	cpse	r16, r1
 816:	00 10       	cpse	r0, r0
 818:	06 11       	cpse	r16, r6
 81a:	01 12       	cpse	r0, r17
 81c:	01 03       	mulsu	r16, r17
 81e:	08 1b       	sub	r16, r24
 820:	08 25       	eor	r16, r8
 822:	08 13       	cpse	r16, r24
 824:	05 00       	.word	0x0005	; ????
 826:	00 00       	nop
 828:	01 11       	cpse	r16, r1
 82a:	00 10       	cpse	r0, r0
 82c:	06 11       	cpse	r16, r6
 82e:	01 12       	cpse	r0, r17
 830:	01 03       	mulsu	r16, r17
 832:	08 1b       	sub	r16, r24
 834:	08 25       	eor	r16, r8
 836:	08 13       	cpse	r16, r24
 838:	05 00       	.word	0x0005	; ????
 83a:	00 00       	nop
 83c:	01 11       	cpse	r16, r1
 83e:	00 10       	cpse	r0, r0
 840:	06 11       	cpse	r16, r6
 842:	01 12       	cpse	r0, r17
 844:	01 03       	mulsu	r16, r17
 846:	08 1b       	sub	r16, r24
 848:	08 25       	eor	r16, r8
 84a:	08 13       	cpse	r16, r24
 84c:	05 00       	.word	0x0005	; ????
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	16 00       	.word	0x0016	; ????
   2:	00 00       	nop
   4:	02 00       	.word	0x0002	; ????
   6:	10 00       	.word	0x0010	; ????
   8:	00 00       	nop
   a:	02 01       	movw	r0, r4
   c:	fb 0e       	add	r15, r27
   e:	0a 00       	.word	0x000a	; ????
  10:	01 01       	movw	r0, r2
  12:	01 01       	movw	r0, r2
  14:	00 00       	nop
  16:	00 01       	movw	r0, r0
  18:	00 00       	nop
  1a:	94 03       	fmuls	r17, r20
  1c:	00 00       	nop
  1e:	02 00       	.word	0x0002	; ????
  20:	b7 01       	movw	r22, r14
  22:	00 00       	nop
  24:	02 01       	movw	r0, r4
  26:	fb 0e       	add	r15, r27
  28:	0a 00       	.word	0x000a	; ????
  2a:	01 01       	movw	r0, r2
  2c:	01 01       	movw	r0, r2
  2e:	00 00       	nop
  30:	00 01       	movw	r0, r0
  32:	43 3a       	cpi	r20, 0xA3	; 163
  34:	5c 50       	subi	r21, 0x0C	; 12
  36:	72 6f       	ori	r23, 0xF2	; 242
  38:	67 72       	andi	r22, 0x27	; 39
  3a:	61 6d       	ori	r22, 0xD1	; 209
  3c:	20 46       	sbci	r18, 0x60	; 96
  3e:	69 6c       	ori	r22, 0xC9	; 201
  40:	65 73       	andi	r22, 0x35	; 53
  42:	20 28       	or	r2, r0
  44:	78 38       	cpi	r23, 0x88	; 136
  46:	36 29       	or	r19, r6
  48:	5c 41       	sbci	r21, 0x1C	; 28
  4a:	72 64       	ori	r23, 0x42	; 66
  4c:	75 69       	ori	r23, 0x95	; 149
  4e:	6e 6f       	ori	r22, 0xFE	; 254
  50:	5c 68       	ori	r21, 0x8C	; 140
  52:	61 72       	andi	r22, 0x21	; 33
  54:	64 77       	andi	r22, 0x74	; 116
  56:	61 72       	andi	r22, 0x21	; 33
  58:	65 5c       	subi	r22, 0xC5	; 197
  5a:	61 72       	andi	r22, 0x21	; 33
  5c:	64 75       	andi	r22, 0x54	; 84
  5e:	69 6e       	ori	r22, 0xE9	; 233
  60:	6f 5c       	subi	r22, 0xCF	; 207
  62:	61 76       	andi	r22, 0x61	; 97
  64:	72 5c       	subi	r23, 0xC2	; 194
  66:	63 6f       	ori	r22, 0xF3	; 243
  68:	72 65       	ori	r23, 0x52	; 82
  6a:	73 5c       	subi	r23, 0xC3	; 195
  6c:	61 72       	andi	r22, 0x21	; 33
  6e:	64 75       	andi	r22, 0x54	; 84
  70:	69 6e       	ori	r22, 0xE9	; 233
  72:	6f 00       	.word	0x006f	; ????
  74:	43 3a       	cpi	r20, 0xA3	; 163
  76:	5c 55       	subi	r21, 0x5C	; 92
  78:	73 65       	ori	r23, 0x53	; 83
  7a:	72 73       	andi	r23, 0x32	; 50
  7c:	5c 52       	subi	r21, 0x2C	; 44
  7e:	59 77       	andi	r21, 0x79	; 121
  80:	6f 72       	andi	r22, 0x2F	; 47
  82:	6b 5c       	subi	r22, 0xCB	; 203
  84:	44 65       	ori	r20, 0x54	; 84
  86:	73 6b       	ori	r23, 0xB3	; 179
  88:	74 6f       	ori	r23, 0xF4	; 244
  8a:	70 5c       	subi	r23, 0xC0	; 192
  8c:	53 70       	andi	r21, 0x03	; 3
  8e:	72 69       	ori	r23, 0x92	; 146
  90:	6e 67       	ori	r22, 0x7E	; 126
  92:	20 31       	cpi	r18, 0x10	; 16
  94:	39 5c       	subi	r19, 0xC9	; 201
  96:	61 73       	andi	r22, 0x31	; 49
  98:	73 69       	ori	r23, 0x93	; 147
  9a:	67 6e       	ori	r22, 0xE7	; 231
  9c:	6d 65       	ori	r22, 0x5D	; 93
  9e:	6e 74       	andi	r22, 0x4E	; 78
  a0:	34 5c       	subi	r19, 0xC4	; 196
  a2:	41 72       	andi	r20, 0x21	; 33
  a4:	64 75       	andi	r22, 0x54	; 84
  a6:	69 6e       	ori	r22, 0xE9	; 233
  a8:	6f 41       	sbci	r22, 0x1F	; 31
  aa:	73 73       	andi	r23, 0x33	; 51
  ac:	65 6d       	ori	r22, 0xD5	; 213
  ae:	62 6c       	ori	r22, 0xC2	; 194
  b0:	79 50       	subi	r23, 0x09	; 9
  b2:	61 72       	andi	r22, 0x21	; 33
  b4:	73 65       	ori	r23, 0x53	; 83
  b6:	72 5c       	subi	r23, 0xC2	; 194
  b8:	50 61       	ori	r21, 0x10	; 16
  ba:	72 73       	andi	r23, 0x32	; 50
  bc:	65 72       	andi	r22, 0x25	; 37
  be:	49 6e       	ori	r20, 0xE9	; 233
  c0:	70 75       	andi	r23, 0x50	; 80
  c2:	74 46       	sbci	r23, 0x64	; 100
  c4:	69 6c       	ori	r22, 0xC9	; 201
  c6:	65 73       	andi	r22, 0x35	; 53
  c8:	5c 52       	subi	r21, 0x2C	; 44
  ca:	61 77       	andi	r22, 0x71	; 113
  cc:	41 72       	andi	r20, 0x21	; 33
  ce:	64 75       	andi	r22, 0x54	; 84
  d0:	69 6e       	ori	r22, 0xE9	; 233
  d2:	6f 46       	sbci	r22, 0x6F	; 111
  d4:	69 6c       	ori	r22, 0xC9	; 201
  d6:	65 73       	andi	r22, 0x35	; 53
  d8:	5c 4c       	sbci	r21, 0xCC	; 204
  da:	41 44       	sbci	r20, 0x41	; 65
  dc:	53 5f       	subi	r21, 0xF3	; 243
  de:	4d 61       	ori	r20, 0x1D	; 29
  e0:	74 68       	ori	r23, 0x84	; 132
  e2:	5f 6c       	ori	r21, 0xCF	; 207
  e4:	6f 6f       	ori	r22, 0xFF	; 255
  e6:	70 00       	.word	0x0070	; ????
  e8:	63 3a       	cpi	r22, 0xA3	; 163
  ea:	5c 70       	andi	r21, 0x0C	; 12
  ec:	72 6f       	ori	r23, 0xF2	; 242
  ee:	67 72       	andi	r22, 0x27	; 39
  f0:	61 6d       	ori	r22, 0xD1	; 209
  f2:	20 66       	ori	r18, 0x60	; 96
  f4:	69 6c       	ori	r22, 0xC9	; 201
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  f6:	65 73       	andi	r22, 0x35	; 53
  f8:	20 28       	or	r2, r0
  fa:	78 38       	cpi	r23, 0x88	; 136
	uint8_t bit = digitalPinToBitMask(pin);
  fc:	36 29       	or	r19, r6
  fe:	5c 61       	ori	r21, 0x1C	; 28
 100:	72 64       	ori	r23, 0x42	; 66
	uint8_t port = digitalPinToPort(pin);
 102:	75 69       	ori	r23, 0x95	; 149
 104:	6e 6f       	ori	r22, 0xFE	; 254
 106:	5c 68       	ori	r21, 0x8C	; 140
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 108:	61 72       	andi	r22, 0x21	; 33
 10a:	64 77       	andi	r22, 0x74	; 116

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 10c:	61 72       	andi	r22, 0x21	; 33
 10e:	65 5c       	subi	r22, 0xC5	; 197
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 110:	74 6f       	ori	r23, 0xF4	; 244
 112:	6f 6c       	ori	r22, 0xCF	; 207
 114:	73 5c       	subi	r23, 0xC3	; 195
 116:	61 76       	andi	r22, 0x61	; 97
 118:	72 5c       	subi	r23, 0xC2	; 194
 11a:	61 76       	andi	r22, 0x61	; 97
 11c:	72 5c       	subi	r23, 0xC2	; 194

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 11e:	69 6e       	ori	r22, 0xE9	; 233
 120:	63 6c       	ori	r22, 0xC3	; 195
 122:	75 64       	ori	r23, 0x45	; 69
 124:	65 00       	.word	0x0065	; ????
 126:	43 3a       	cpi	r20, 0xA3	; 163
 128:	5c 50       	subi	r21, 0x0C	; 12
 12a:	72 6f       	ori	r23, 0xF2	; 242

	uint8_t oldSREG = SREG;
 12c:	67 72       	andi	r22, 0x27	; 39
	cli();
 12e:	61 6d       	ori	r22, 0xD1	; 209

	if (val == LOW) {
		*out &= ~bit;
 130:	20 46       	sbci	r18, 0x60	; 96
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 132:	69 6c       	ori	r22, 0xC9	; 201
 134:	65 73       	andi	r22, 0x35	; 53
		*out &= ~bit;
 136:	20 28       	or	r2, r0
 138:	78 38       	cpi	r23, 0x88	; 136
	} else {
		*out |= bit;
 13a:	36 29       	or	r19, r6
	}

	SREG = oldSREG;
 13c:	5c 41       	sbci	r21, 0x1C	; 28
}
 13e:	72 64       	ori	r23, 0x42	; 66
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 140:	75 69       	ori	r23, 0x95	; 149
 142:	6e 6f       	ori	r22, 0xFE	; 254
 144:	5c 68       	ori	r21, 0x8C	; 140
 146:	61 72       	andi	r22, 0x21	; 33
 148:	64 77       	andi	r22, 0x74	; 116
 14a:	61 72       	andi	r22, 0x21	; 33
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 14c:	65 5c       	subi	r22, 0xC5	; 197
 14e:	61 72       	andi	r22, 0x21	; 33
 150:	64 75       	andi	r22, 0x54	; 84
 152:	69 6e       	ori	r22, 0xE9	; 233
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 154:	6f 5c       	subi	r22, 0xCF	; 207
 156:	61 76       	andi	r22, 0x61	; 97
 158:	72 5c       	subi	r23, 0xC2	; 194
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 15a:	76 61       	ori	r23, 0x16	; 22
 15c:	72 69       	ori	r23, 0x92	; 146
 15e:	61 6e       	ori	r22, 0xE1	; 225
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 160:	74 73       	andi	r23, 0x34	; 52
 162:	5c 73       	andi	r21, 0x3C	; 60
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 164:	74 61       	ori	r23, 0x14	; 20
 166:	6e 64       	ori	r22, 0x4E	; 78
 168:	61 72       	andi	r22, 0x21	; 33
 16a:	64 00       	.word	0x0064	; ????
 16c:	00 77       	andi	r16, 0x70	; 112
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 16e:	69 72       	andi	r22, 0x29	; 41
 170:	69 6e       	ori	r22, 0xE9	; 233
 172:	67 5f       	subi	r22, 0xF7	; 247
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 174:	64 69       	ori	r22, 0x94	; 148
 176:	67 69       	ori	r22, 0x97	; 151
 178:	74 61       	ori	r23, 0x14	; 20
 17a:	6c 2e       	mov	r6, r28
 17c:	63 00       	.word	0x0063	; ????
 17e:	01 00       	.word	0x0001	; ????
 180:	00 77       	andi	r16, 0x70	; 112
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 182:	69 72       	andi	r22, 0x29	; 41
 184:	69 6e       	ori	r22, 0xE9	; 233
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 186:	67 2e       	mov	r6, r23
 188:	63 00       	.word	0x0063	; ????
 18a:	01 00       	.word	0x0001	; ????
 18c:	00 6d       	ori	r16, 0xD0	; 208
 18e:	61 69       	ori	r22, 0x91	; 145
 190:	6e 2e       	mov	r6, r30
 192:	63 70       	andi	r22, 0x03	; 3
 194:	70 00       	.word	0x0070	; ????
 196:	01 00       	.word	0x0001	; ????
 198:	00 4c       	sbci	r16, 0xC0	; 192
 19a:	41 44       	sbci	r20, 0x41	; 65
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 19c:	53 5f       	subi	r21, 0xF3	; 243
 19e:	4d 61       	ori	r20, 0x1D	; 29
 1a0:	74 68       	ori	r23, 0x84	; 132
 1a2:	5f 6c       	ori	r21, 0xCF	; 207
 1a4:	6f 6f       	ori	r22, 0xFF	; 255
 1a6:	70 2e       	mov	r7, r16
 1a8:	69 6e       	ori	r22, 0xE9	; 233
 1aa:	6f 00       	.word	0x006f	; ????
	unsigned char f = timer0_fract;
 1ac:	02 00       	.word	0x0002	; ????
 1ae:	00 57       	subi	r16, 0x70	; 112

	m += MILLIS_INC;
	f += FRACT_INC;
 1b0:	4d 61       	ori	r20, 0x1D	; 29
 1b2:	74 68       	ori	r23, 0x84	; 132
	if (f >= FRACT_MAX) {
 1b4:	2e 63       	ori	r18, 0x3E	; 62
 1b6:	70 70       	andi	r23, 0x00	; 0
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 1b8:	00 01       	movw	r0, r0
 1ba:	00 00       	nop
 1bc:	73 74       	andi	r23, 0x43	; 67
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 1be:	64 69       	ori	r22, 0x94	; 148
 1c0:	6e 74       	andi	r22, 0x4E	; 78
	timer0_millis = m;
 1c2:	2e 68       	ori	r18, 0x8E	; 142
 1c4:	00 03       	mulsu	r16, r16
 1c6:	00 00       	nop
 1c8:	70 69       	ori	r23, 0x90	; 144
 1ca:	6e 73       	andi	r22, 0x3E	; 62
 1cc:	5f 61       	ori	r21, 0x1F	; 31
 1ce:	72 64       	ori	r23, 0x42	; 66
 1d0:	75 69       	ori	r23, 0x95	; 149
	timer0_overflow_count++;
 1d2:	6e 6f       	ori	r22, 0xFE	; 254
 1d4:	2e 68       	ori	r18, 0x8E	; 142
 1d6:	00 04       	cpc	r0, r0
 1d8:	00 00       	nop
 1da:	00 00       	nop
 1dc:	05 02       	muls	r16, r21
 1de:	f6 00       	.word	0x00f6	; ????
 1e0:	00 00       	nop
 1e2:	03 89       	ldd	r16, Z+19	; 0x13
 1e4:	01 01       	movw	r0, r2
 1e6:	03 02       	muls	r16, r19
 1e8:	09 00       	.word	0x0009	; ????
 1ea:	00 01       	movw	r0, r0
 1ec:	03 01       	movw	r0, r6
 1ee:	09 06       	cpc	r0, r25
 1f0:	00 01       	movw	r0, r0
 1f2:	03 01       	movw	r0, r6
 1f4:	09 06       	cpc	r0, r25
 1f6:	00 01       	movw	r0, r0
}
 1f8:	03 03       	mulsu	r16, r19
 1fa:	09 06       	cpc	r0, r25
 1fc:	00 01       	movw	r0, r0
 1fe:	03 04       	cpc	r0, r3
 200:	09 04       	cpc	r0, r9
 202:	00 01       	movw	r0, r0
 204:	03 b8       	out	0x03, r0	; 3
 206:	7f 09       	sbc	r23, r15
 208:	04 00       	.word	0x0004	; ????
 20a:	01 03       	mulsu	r16, r17
 20c:	ca 00       	.word	0x00ca	; ????
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 20e:	09 0e       	add	r0, r25
 210:	00 01       	movw	r0, r0
		m += 1;
 212:	03 02       	muls	r16, r19
 214:	09 0e       	add	r0, r25
 216:	00 01       	movw	r0, r0
 218:	03 01       	movw	r0, r6

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 21a:	09 02       	muls	r16, r25
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 21c:	00 01       	movw	r0, r0
 21e:	03 03       	mulsu	r16, r19
 220:	09 02       	muls	r16, r25
	sbi(TCCR0A, WGM00);
 222:	00 01       	movw	r0, r0
 224:	03 7f       	andi	r16, 0xF3	; 243
 226:	09 02       	muls	r16, r25
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 228:	00 01       	movw	r0, r0
 22a:	03 01       	movw	r0, r6
 22c:	09 04       	cpc	r0, r9
	sbi(TCCR0B, CS00);
 22e:	00 01       	movw	r0, r0
 230:	03 02       	muls	r16, r19
 232:	09 04       	cpc	r0, r9

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 234:	00 01       	movw	r0, r0
 236:	03 03       	mulsu	r16, r19
 238:	09 02       	muls	r16, r25
 23a:	00 01       	movw	r0, r0
 23c:	03 01       	movw	r0, r6
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 23e:	09 02       	muls	r16, r25
 240:	00 01       	movw	r0, r0

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 242:	03 aa       	std	Z+51, r0	; 0x33
 244:	7f 09       	sbc	r23, r15
 246:	02 00       	.word	0x0002	; ????
 248:	01 03       	mulsu	r16, r17
 24a:	06 09       	sbc	r16, r6
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 24c:	0c 00       	.word	0x000c	; ????
 24e:	01 03       	mulsu	r16, r17
 250:	7d 09       	sbc	r23, r13
 252:	08 00       	.word	0x0008	; ????
 254:	01 03       	mulsu	r16, r17
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 256:	03 09       	sbc	r16, r3
 258:	06 00       	.word	0x0006	; ????
 25a:	01 03       	mulsu	r16, r17
 25c:	0b 09       	sbc	r16, r11
 25e:	06 00       	.word	0x0006	; ????

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 260:	01 03       	mulsu	r16, r17
 262:	04 09       	sbc	r16, r4
 264:	04 00       	.word	0x0004	; ????
 266:	01 03       	mulsu	r16, r17
 268:	03 09       	sbc	r16, r3

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 26a:	0a 00       	.word	0x000a	; ????
 26c:	01 03       	mulsu	r16, r17
 26e:	03 09       	sbc	r16, r3
 270:	06 00       	.word	0x0006	; ????
 272:	01 03       	mulsu	r16, r17
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 274:	37 09       	sbc	r19, r7
 276:	0e 00       	.word	0x000e	; ????
 278:	01 04       	cpc	r0, r1
 27a:	02 03       	mulsu	r16, r18
 27c:	90 7f       	andi	r25, 0xF0	; 240
		sbi(ADCSRA, ADPS1);
 27e:	09 04       	cpc	r0, r9
 280:	00 01       	movw	r0, r0
 282:	03 03       	mulsu	r16, r19
 284:	09 16       	cp	r0, r25
 286:	00 01       	movw	r0, r0
		sbi(ADCSRA, ADPS0);
 288:	03 01       	movw	r0, r6
 28a:	09 10       	cpse	r0, r9
 28c:	00 01       	movw	r0, r0
 28e:	03 03       	mulsu	r16, r19
 290:	09 04       	cpc	r0, r9
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 292:	00 01       	movw	r0, r0
 294:	03 01       	movw	r0, r6
 296:	09 04       	cpc	r0, r9
 298:	00 01       	movw	r0, r0
 29a:	03 7e       	andi	r16, 0xE3	; 227
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 29c:	09 04       	cpc	r0, r9
 29e:	00 01       	movw	r0, r0
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 2a0:	03 07       	cpc	r16, r19
 2a2:	09 06       	cpc	r0, r25
 2a4:	00 01       	movw	r0, r0
	uint8_t port = digitalPinToPort(pin);
 2a6:	03 01       	movw	r0, r6
 2a8:	09 04       	cpc	r0, r9
 2aa:	00 01       	movw	r0, r0
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 2ac:	03 01       	movw	r0, r6
 2ae:	09 10       	cpse	r0, r9

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 2b0:	00 01       	movw	r0, r0
 2b2:	03 01       	movw	r0, r6
 2b4:	09 26       	eor	r0, r25
 2b6:	00 01       	movw	r0, r0
 2b8:	03 79       	andi	r16, 0x93	; 147
 2ba:	09 16       	cp	r0, r25
 2bc:	00 01       	movw	r0, r0
 2be:	03 01       	movw	r0, r6
	out = portOutputRegister(port);
 2c0:	09 04       	cpc	r0, r9
 2c2:	00 01       	movw	r0, r0
 2c4:	09 08       	sbc	r0, r9
 2c6:	00 00       	nop
 2c8:	01 01       	movw	r0, r2
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 2ca:	04 03       	mulsu	r16, r20
                cli();
 2cc:	00 05       	cpc	r16, r0
		*reg |= bit;
 2ce:	02 1a       	sub	r0, r18
 2d0:	02 00       	.word	0x0002	; ????
 2d2:	00 03       	mulsu	r16, r16
		SREG = oldSREG;
 2d4:	21 01       	movw	r4, r2
 2d6:	04 02       	muls	r16, r20
 2d8:	03 d3       	rcall	.+1542   	; 0x8e0 <__data_load_end+0x3ce>
void loop() {
  // put your main code here, to run repeatedly:
  // Create trigger
  int randNumber1, randNumber2;
  randomSeed(0);
  noInterrupts();
 2da:	01 09       	sbc	r16, r1
  digitalWrite(LED_BUILTIN, LOW);   
 2dc:	00 00       	nop
 2de:	01 03       	mulsu	r16, r17
 2e0:	06 09       	sbc	r16, r6
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
 2e2:	02 00       	.word	0x0002	; ????
 2e4:	01 03       	mulsu	r16, r17
 2e6:	01 09       	sbc	r16, r1
 2e8:	06 00       	.word	0x0006	; ????
 2ea:	01 03       	mulsu	r16, r17
 2ec:	0d 09       	sbc	r16, r13
 2ee:	06 00       	.word	0x0006	; ????
  //Code goes here
  randNumber1 = random(65535);
  randNumber2 = random(65535);
  interrupts();
 2f0:	01 03       	mulsu	r16, r17
 2f2:	01 09       	sbc	r16, r1
 2f4:	06 00       	.word	0x0006	; ????
 2f6:	01 03       	mulsu	r16, r17
 2f8:	0d 09       	sbc	r16, r13
 2fa:	06 00       	.word	0x0006	; ????
 2fc:	01 03       	mulsu	r16, r17
 2fe:	0b 09       	sbc	r16, r11
 300:	0a 00       	.word	0x000a	; ????
 302:	01 03       	mulsu	r16, r17
 304:	03 09       	sbc	r16, r3
 306:	04 00       	.word	0x0004	; ????
 308:	01 03       	mulsu	r16, r17
 30a:	02 09       	sbc	r16, r2
 30c:	0a 00       	.word	0x000a	; ????
 30e:	01 03       	mulsu	r16, r17
 310:	0a 09       	sbc	r16, r10
 312:	0a 00       	.word	0x000a	; ????
 314:	01 03       	mulsu	r16, r17
 316:	07 09       	sbc	r16, r7
 318:	0a 00       	.word	0x000a	; ????
 31a:	01 03       	mulsu	r16, r17
 31c:	09 09       	sbc	r16, r9
 31e:	0a 00       	.word	0x000a	; ????
 320:	01 03       	mulsu	r16, r17
 322:	23 09       	sbc	r18, r3
 324:	0a 00       	.word	0x000a	; ????
 326:	01 03       	mulsu	r16, r17
 328:	01 09       	sbc	r16, r1
 32a:	0a 00       	.word	0x000a	; ????
 32c:	01 03       	mulsu	r16, r17
 32e:	01 09       	sbc	r16, r1
 330:	0a 00       	.word	0x000a	; ????
 332:	01 03       	mulsu	r16, r17
 334:	17 09       	sbc	r17, r7
 336:	0a 00       	.word	0x000a	; ????
 338:	01 03       	mulsu	r16, r17
 33a:	09 09       	sbc	r16, r9
 33c:	0a 00       	.word	0x000a	; ????
 33e:	01 04       	cpc	r0, r1
 340:	01 03       	mulsu	r16, r17
 342:	99 7d       	andi	r25, 0xD9	; 217
 344:	09 04       	cpc	r0, r9
 346:	00 01       	movw	r0, r0
 348:	03 01       	movw	r0, r6
 34a:	09 06       	cpc	r0, r25
 34c:	00 01       	movw	r0, r0
 34e:	03 03       	mulsu	r16, r19
 350:	09 06       	cpc	r0, r25
 352:	00 01       	movw	r0, r0
 354:	03 03       	mulsu	r16, r19
 356:	09 04       	cpc	r0, r9
 358:	00 01       	movw	r0, r0
 35a:	03 01       	movw	r0, r6
 35c:	09 10       	cpse	r0, r9
 35e:	00 01       	movw	r0, r0
 360:	03 0f       	add	r16, r19
 362:	09 0a       	sbc	r0, r25
 364:	00 01       	movw	r0, r0
 366:	03 01       	movw	r0, r6
 368:	09 02       	muls	r16, r25
 36a:	00 01       	movw	r0, r0
 36c:	03 01       	movw	r0, r6
 36e:	09 02       	muls	r16, r25
 370:	00 01       	movw	r0, r0
 372:	03 01       	movw	r0, r6
 374:	09 06       	cpc	r0, r25
 376:	00 01       	movw	r0, r0
 378:	04 03       	mulsu	r16, r20
 37a:	03 76       	andi	r16, 0x63	; 99
 37c:	09 02       	muls	r16, r25
 37e:	00 01       	movw	r0, r0
 380:	04 04       	cpc	r0, r4
 382:	03 5d       	subi	r16, 0xD3	; 211
 384:	09 04       	cpc	r0, r9
 386:	00 01       	movw	r0, r0
 388:	03 01       	movw	r0, r6
 38a:	09 02       	muls	r16, r25
 38c:	00 01       	movw	r0, r0
 38e:	03 01       	movw	r0, r6
 390:	09 06       	cpc	r0, r25
 392:	00 01       	movw	r0, r0
 394:	04 05       	cpc	r16, r4
 396:	03 1a       	sub	r0, r19
 398:	09 06       	cpc	r0, r25
 39a:	00 01       	movw	r0, r0
 39c:	04 04       	cpc	r0, r4
 39e:	03 6a       	ori	r16, 0xA3	; 163
 3a0:	09 08       	sbc	r0, r9
 3a2:	00 01       	movw	r0, r0
 3a4:	04 03       	mulsu	r16, r20
 3a6:	03 1d       	adc	r16, r3
 3a8:	09 02       	muls	r16, r25
 3aa:	00 01       	movw	r0, r0
 3ac:	09 0a       	sbc	r0, r25
 3ae:	00 00       	nop
 3b0:	01 01       	movw	r0, r2
 3b2:	5e 00       	.word	0x005e	; ????
 3b4:	00 00       	nop
 3b6:	02 00       	.word	0x0002	; ????
 3b8:	41 00       	.word	0x0041	; ????
 3ba:	00 00       	nop
 3bc:	02 01       	movw	r0, r4
 3be:	fb 0e       	add	r15, r27
 3c0:	0a 00       	.word	0x000a	; ????
 3c2:	01 01       	movw	r0, r2
 3c4:	01 01       	movw	r0, r2
 3c6:	00 00       	nop
 3c8:	00 01       	movw	r0, r0
 3ca:	2e 2e       	mov	r2, r30
 3cc:	2f 2e       	mov	r2, r31
 3ce:	2e 2f       	mov	r18, r30
 3d0:	2e 2e       	mov	r2, r30
 3d2:	2f 2e       	mov	r2, r31
 3d4:	2e 2f       	mov	r18, r30
 3d6:	67 63       	ori	r22, 0x37	; 55
 3d8:	63 2f       	mov	r22, r19
 3da:	6c 69       	ori	r22, 0x9C	; 156
 3dc:	62 67       	ori	r22, 0x72	; 114
 3de:	63 63       	ori	r22, 0x33	; 51
 3e0:	2f 63       	ori	r18, 0x3F	; 63
 3e2:	6f 6e       	ori	r22, 0xEF	; 239
 3e4:	66 69       	ori	r22, 0x96	; 150
 3e6:	67 2f       	mov	r22, r23
 3e8:	61 76       	andi	r22, 0x61	; 97
 3ea:	72 00       	.word	0x0072	; ????
 3ec:	00 6c       	ori	r16, 0xC0	; 192
 3ee:	69 62       	ori	r22, 0x29	; 41
 3f0:	31 66       	ori	r19, 0x61	; 97
 3f2:	75 6e       	ori	r23, 0xE5	; 229
 3f4:	63 73       	andi	r22, 0x33	; 51
 3f6:	2e 53       	subi	r18, 0x3E	; 62
 3f8:	00 01       	movw	r0, r0
 3fa:	00 00       	nop
 3fc:	00 00       	nop
 3fe:	05 02       	muls	r16, r21
 400:	0a 05       	cpc	r16, r10
 402:	00 00       	nop
 404:	03 e5       	ldi	r16, 0x53	; 83
 406:	11 01       	movw	r2, r2
 408:	03 02       	muls	r16, r19
 40a:	09 02       	muls	r16, r25
 40c:	00 01       	movw	r0, r0
 40e:	09 02       	muls	r16, r25
 410:	00 00       	nop
 412:	01 01       	movw	r0, r2
 414:	ca 00       	.word	0x00ca	; ????
 416:	00 00       	nop
 418:	02 00       	.word	0x0002	; ????
 41a:	41 00       	.word	0x0041	; ????
 41c:	00 00       	nop
 41e:	02 01       	movw	r0, r4
 420:	fb 0e       	add	r15, r27
 422:	0a 00       	.word	0x000a	; ????
 424:	01 01       	movw	r0, r2
 426:	01 01       	movw	r0, r2
 428:	00 00       	nop
 42a:	00 01       	movw	r0, r0
 42c:	2e 2e       	mov	r2, r30
 42e:	2f 2e       	mov	r2, r31
 430:	2e 2f       	mov	r18, r30
 432:	2e 2e       	mov	r2, r30
 434:	2f 2e       	mov	r2, r31
 436:	2e 2f       	mov	r18, r30
 438:	67 63       	ori	r22, 0x37	; 55
 43a:	63 2f       	mov	r22, r19
 43c:	6c 69       	ori	r22, 0x9C	; 156
 43e:	62 67       	ori	r22, 0x72	; 114
 440:	63 63       	ori	r22, 0x33	; 51
 442:	2f 63       	ori	r18, 0x3F	; 63
 444:	6f 6e       	ori	r22, 0xEF	; 239
 446:	66 69       	ori	r22, 0x96	; 150
 448:	67 2f       	mov	r22, r23
 44a:	61 76       	andi	r22, 0x61	; 97
 44c:	72 00       	.word	0x0072	; ????
 44e:	00 6c       	ori	r16, 0xC0	; 192
 450:	69 62       	ori	r22, 0x29	; 41
 452:	31 66       	ori	r19, 0x61	; 97
 454:	75 6e       	ori	r23, 0xE5	; 229
 456:	63 73       	andi	r22, 0x33	; 51
 458:	2e 53       	subi	r18, 0x3E	; 62
 45a:	00 01       	movw	r0, r0
 45c:	00 00       	nop
 45e:	00 00       	nop
 460:	05 02       	muls	r16, r21
 462:	44 04       	cpc	r4, r4
 464:	00 00       	nop
 466:	03 95       	inc	r16
 468:	0d 01       	movw	r0, r26
 46a:	03 01       	movw	r0, r6
 46c:	09 02       	muls	r16, r25
 46e:	00 01       	movw	r0, r0
 470:	03 01       	movw	r0, r6
 472:	09 02       	muls	r16, r25
 474:	00 01       	movw	r0, r0
 476:	03 01       	movw	r0, r6
 478:	09 02       	muls	r16, r25
 47a:	00 01       	movw	r0, r0
 47c:	03 01       	movw	r0, r6
 47e:	09 02       	muls	r16, r25
 480:	00 01       	movw	r0, r0
 482:	03 02       	muls	r16, r19
 484:	09 04       	cpc	r0, r9
 486:	00 01       	movw	r0, r0
 488:	03 01       	movw	r0, r6
 48a:	09 02       	muls	r16, r25
 48c:	00 01       	movw	r0, r0
 48e:	03 01       	movw	r0, r6
 490:	09 02       	muls	r16, r25
 492:	00 01       	movw	r0, r0
 494:	03 01       	movw	r0, r6
 496:	09 04       	cpc	r0, r9
 498:	00 01       	movw	r0, r0
 49a:	03 01       	movw	r0, r6
 49c:	09 02       	muls	r16, r25
 49e:	00 01       	movw	r0, r0
 4a0:	03 01       	movw	r0, r6
 4a2:	09 02       	muls	r16, r25
 4a4:	00 01       	movw	r0, r0
 4a6:	03 01       	movw	r0, r6
 4a8:	09 02       	muls	r16, r25
 4aa:	00 01       	movw	r0, r0
 4ac:	03 03       	mulsu	r16, r19
 4ae:	09 04       	cpc	r0, r9
 4b0:	00 01       	movw	r0, r0
 4b2:	03 01       	movw	r0, r6
 4b4:	09 02       	muls	r16, r25
 4b6:	00 01       	movw	r0, r0
 4b8:	03 01       	movw	r0, r6
 4ba:	09 02       	muls	r16, r25
 4bc:	00 01       	movw	r0, r0
 4be:	03 01       	movw	r0, r6
 4c0:	09 02       	muls	r16, r25
 4c2:	00 01       	movw	r0, r0
 4c4:	03 01       	movw	r0, r6
 4c6:	09 02       	muls	r16, r25
 4c8:	00 01       	movw	r0, r0
 4ca:	03 01       	movw	r0, r6
 4cc:	09 02       	muls	r16, r25
 4ce:	00 01       	movw	r0, r0
 4d0:	03 01       	movw	r0, r6
 4d2:	09 02       	muls	r16, r25
 4d4:	00 01       	movw	r0, r0
 4d6:	03 02       	muls	r16, r19
 4d8:	09 02       	muls	r16, r25
 4da:	00 01       	movw	r0, r0
 4dc:	09 02       	muls	r16, r25
 4de:	00 00       	nop
 4e0:	01 01       	movw	r0, r2
 4e2:	5e 00       	.word	0x005e	; ????
 4e4:	00 00       	nop
 4e6:	02 00       	.word	0x0002	; ????
 4e8:	41 00       	.word	0x0041	; ????
 4ea:	00 00       	nop
 4ec:	02 01       	movw	r0, r4
 4ee:	fb 0e       	add	r15, r27
 4f0:	0a 00       	.word	0x000a	; ????
 4f2:	01 01       	movw	r0, r2
 4f4:	01 01       	movw	r0, r2
 4f6:	00 00       	nop
 4f8:	00 01       	movw	r0, r0
 4fa:	2e 2e       	mov	r2, r30
 4fc:	2f 2e       	mov	r2, r31
 4fe:	2e 2f       	mov	r18, r30
 500:	2e 2e       	mov	r2, r30
 502:	2f 2e       	mov	r2, r31
 504:	2e 2f       	mov	r18, r30
 506:	67 63       	ori	r22, 0x37	; 55
 508:	63 2f       	mov	r22, r19
 50a:	6c 69       	ori	r22, 0x9C	; 156
 50c:	62 67       	ori	r22, 0x72	; 114
 50e:	63 63       	ori	r22, 0x33	; 51
 510:	2f 63       	ori	r18, 0x3F	; 63
 512:	6f 6e       	ori	r22, 0xEF	; 239
 514:	66 69       	ori	r22, 0x96	; 150
 516:	67 2f       	mov	r22, r23
 518:	61 76       	andi	r22, 0x61	; 97
 51a:	72 00       	.word	0x0072	; ????
 51c:	00 6c       	ori	r16, 0xC0	; 192
 51e:	69 62       	ori	r22, 0x29	; 41
 520:	31 66       	ori	r19, 0x61	; 97
 522:	75 6e       	ori	r23, 0xE5	; 229
 524:	63 73       	andi	r22, 0x33	; 51
 526:	2e 53       	subi	r18, 0x3E	; 62
 528:	00 01       	movw	r0, r0
 52a:	00 00       	nop
 52c:	00 00       	nop
 52e:	05 02       	muls	r16, r21
 530:	72 04       	cpc	r7, r2
 532:	00 00       	nop
 534:	03 b5       	in	r16, 0x23	; 35
 536:	0d 01       	movw	r0, r26
 538:	03 01       	movw	r0, r6
 53a:	09 0e       	add	r0, r25
 53c:	00 01       	movw	r0, r0
 53e:	09 02       	muls	r16, r25
 540:	00 00       	nop
 542:	01 01       	movw	r0, r2
 544:	94 00       	.word	0x0094	; ????
 546:	00 00       	nop
 548:	02 00       	.word	0x0002	; ????
 54a:	41 00       	.word	0x0041	; ????
 54c:	00 00       	nop
 54e:	02 01       	movw	r0, r4
 550:	fb 0e       	add	r15, r27
 552:	0a 00       	.word	0x000a	; ????
 554:	01 01       	movw	r0, r2
 556:	01 01       	movw	r0, r2
 558:	00 00       	nop
 55a:	00 01       	movw	r0, r0
 55c:	2e 2e       	mov	r2, r30
 55e:	2f 2e       	mov	r2, r31
 560:	2e 2f       	mov	r18, r30
 562:	2e 2e       	mov	r2, r30
 564:	2f 2e       	mov	r2, r31
 566:	2e 2f       	mov	r18, r30
 568:	67 63       	ori	r22, 0x37	; 55
 56a:	63 2f       	mov	r22, r19
 56c:	6c 69       	ori	r22, 0x9C	; 156
 56e:	62 67       	ori	r22, 0x72	; 114
 570:	63 63       	ori	r22, 0x33	; 51
 572:	2f 63       	ori	r18, 0x3F	; 63
 574:	6f 6e       	ori	r22, 0xEF	; 239
 576:	66 69       	ori	r22, 0x96	; 150
 578:	67 2f       	mov	r22, r23
 57a:	61 76       	andi	r22, 0x61	; 97
 57c:	72 00       	.word	0x0072	; ????
 57e:	00 6c       	ori	r16, 0xC0	; 192
 580:	69 62       	ori	r22, 0x29	; 41
 582:	31 66       	ori	r19, 0x61	; 97
 584:	75 6e       	ori	r23, 0xE5	; 229
 586:	63 73       	andi	r22, 0x33	; 51
 588:	2e 53       	subi	r18, 0x3E	; 62
 58a:	00 01       	movw	r0, r0
 58c:	00 00       	nop
 58e:	00 00       	nop
 590:	05 02       	muls	r16, r21
 592:	c4 00       	.word	0x00c4	; ????
 594:	00 00       	nop
 596:	03 e8       	ldi	r16, 0x83	; 131
 598:	12 01       	movw	r2, r4
 59a:	03 01       	movw	r0, r6
 59c:	09 02       	muls	r16, r25
 59e:	00 01       	movw	r0, r0
 5a0:	03 01       	movw	r0, r6
 5a2:	09 02       	muls	r16, r25
 5a4:	00 01       	movw	r0, r0
 5a6:	03 01       	movw	r0, r6
 5a8:	09 02       	muls	r16, r25
 5aa:	00 01       	movw	r0, r0
 5ac:	03 01       	movw	r0, r6
 5ae:	09 02       	muls	r16, r25
 5b0:	00 01       	movw	r0, r0
 5b2:	03 01       	movw	r0, r6
 5b4:	09 02       	muls	r16, r25
 5b6:	00 01       	movw	r0, r0
 5b8:	03 03       	mulsu	r16, r19
 5ba:	09 02       	muls	r16, r25
 5bc:	00 01       	movw	r0, r0
 5be:	03 05       	cpc	r16, r3
 5c0:	09 02       	muls	r16, r25
 5c2:	00 01       	movw	r0, r0
 5c4:	03 02       	muls	r16, r19
 5c6:	09 02       	muls	r16, r25
 5c8:	00 01       	movw	r0, r0
 5ca:	03 01       	movw	r0, r6
 5cc:	09 02       	muls	r16, r25
 5ce:	00 01       	movw	r0, r0
 5d0:	03 01       	movw	r0, r6
 5d2:	09 02       	muls	r16, r25
 5d4:	00 01       	movw	r0, r0
 5d6:	09 02       	muls	r16, r25
 5d8:	00 00       	nop
 5da:	01 01       	movw	r0, r2
 5dc:	8e 00       	.word	0x008e	; ????
 5de:	00 00       	nop
 5e0:	02 00       	.word	0x0002	; ????
 5e2:	41 00       	.word	0x0041	; ????
 5e4:	00 00       	nop
 5e6:	02 01       	movw	r0, r4
 5e8:	fb 0e       	add	r15, r27
 5ea:	0a 00       	.word	0x000a	; ????
 5ec:	01 01       	movw	r0, r2
 5ee:	01 01       	movw	r0, r2
 5f0:	00 00       	nop
 5f2:	00 01       	movw	r0, r0
 5f4:	2e 2e       	mov	r2, r30
 5f6:	2f 2e       	mov	r2, r31
 5f8:	2e 2f       	mov	r18, r30
 5fa:	2e 2e       	mov	r2, r30
 5fc:	2f 2e       	mov	r2, r31
 5fe:	2e 2f       	mov	r18, r30
 600:	67 63       	ori	r22, 0x37	; 55
 602:	63 2f       	mov	r22, r19
 604:	6c 69       	ori	r22, 0x9C	; 156
 606:	62 67       	ori	r22, 0x72	; 114
 608:	63 63       	ori	r22, 0x33	; 51
 60a:	2f 63       	ori	r18, 0x3F	; 63
 60c:	6f 6e       	ori	r22, 0xEF	; 239
 60e:	66 69       	ori	r22, 0x96	; 150
 610:	67 2f       	mov	r22, r23
 612:	61 76       	andi	r22, 0x61	; 97
 614:	72 00       	.word	0x0072	; ????
 616:	00 6c       	ori	r16, 0xC0	; 192
 618:	69 62       	ori	r22, 0x29	; 41
 61a:	31 66       	ori	r19, 0x61	; 97
 61c:	75 6e       	ori	r23, 0xE5	; 229
 61e:	63 73       	andi	r22, 0x33	; 51
 620:	2e 53       	subi	r18, 0x3E	; 62
 622:	00 01       	movw	r0, r0
 624:	00 00       	nop
 626:	00 00       	nop
 628:	05 02       	muls	r16, r21
 62a:	82 04       	cpc	r8, r2
 62c:	00 00       	nop
 62e:	03 f1       	brvs	.+64     	; 0x670 <__data_load_end+0x15e>
 630:	04 01       	movw	r0, r8
 632:	03 01       	movw	r0, r6
 634:	09 04       	cpc	r0, r9
 636:	00 01       	movw	r0, r0
 638:	03 01       	movw	r0, r6
 63a:	09 02       	muls	r16, r25
 63c:	00 01       	movw	r0, r0
 63e:	03 01       	movw	r0, r6
 640:	09 02       	muls	r16, r25
 642:	00 01       	movw	r0, r0
 644:	03 01       	movw	r0, r6
 646:	09 02       	muls	r16, r25
 648:	00 01       	movw	r0, r0
 64a:	03 01       	movw	r0, r6
 64c:	09 02       	muls	r16, r25
 64e:	00 01       	movw	r0, r0
 650:	03 01       	movw	r0, r6
 652:	09 02       	muls	r16, r25
 654:	00 01       	movw	r0, r0
 656:	03 01       	movw	r0, r6
 658:	09 02       	muls	r16, r25
 65a:	00 01       	movw	r0, r0
 65c:	03 01       	movw	r0, r6
 65e:	09 02       	muls	r16, r25
 660:	00 01       	movw	r0, r0
 662:	03 01       	movw	r0, r6
 664:	09 02       	muls	r16, r25
 666:	00 01       	movw	r0, r0
 668:	09 02       	muls	r16, r25
 66a:	00 00       	nop
 66c:	01 01       	movw	r0, r2
 66e:	76 00       	.word	0x0076	; ????
 670:	00 00       	nop
 672:	02 00       	.word	0x0002	; ????
 674:	41 00       	.word	0x0041	; ????
 676:	00 00       	nop
 678:	02 01       	movw	r0, r4
 67a:	fb 0e       	add	r15, r27
 67c:	0a 00       	.word	0x000a	; ????
 67e:	01 01       	movw	r0, r2
 680:	01 01       	movw	r0, r2
 682:	00 00       	nop
 684:	00 01       	movw	r0, r0
 686:	2e 2e       	mov	r2, r30
 688:	2f 2e       	mov	r2, r31
 68a:	2e 2f       	mov	r18, r30
 68c:	2e 2e       	mov	r2, r30
 68e:	2f 2e       	mov	r2, r31
 690:	2e 2f       	mov	r18, r30
 692:	67 63       	ori	r22, 0x37	; 55
 694:	63 2f       	mov	r22, r19
 696:	6c 69       	ori	r22, 0x9C	; 156
 698:	62 67       	ori	r22, 0x72	; 114
 69a:	63 63       	ori	r22, 0x33	; 51
 69c:	2f 63       	ori	r18, 0x3F	; 63
 69e:	6f 6e       	ori	r22, 0xEF	; 239
 6a0:	66 69       	ori	r22, 0x96	; 150
 6a2:	67 2f       	mov	r22, r23
 6a4:	61 76       	andi	r22, 0x61	; 97
 6a6:	72 00       	.word	0x0072	; ????
 6a8:	00 6c       	ori	r16, 0xC0	; 192
 6aa:	69 62       	ori	r22, 0x29	; 41
 6ac:	31 66       	ori	r19, 0x61	; 97
 6ae:	75 6e       	ori	r23, 0xE5	; 229
 6b0:	63 73       	andi	r22, 0x33	; 51
 6b2:	2e 53       	subi	r18, 0x3E	; 62
 6b4:	00 01       	movw	r0, r0
 6b6:	00 00       	nop
 6b8:	00 00       	nop
 6ba:	05 02       	muls	r16, r21
 6bc:	98 04       	cpc	r9, r8
 6be:	00 00       	nop
 6c0:	03 da       	rcall	.-3066   	; 0xfffffac8 <__eeprom_end+0xff7efac8>
 6c2:	04 01       	movw	r0, r8
 6c4:	03 02       	muls	r16, r19
 6c6:	09 02       	muls	r16, r25
 6c8:	00 01       	movw	r0, r0
 6ca:	03 08       	sbc	r0, r3
 6cc:	09 04       	cpc	r0, r9
 6ce:	00 01       	movw	r0, r0
 6d0:	03 02       	muls	r16, r19
 6d2:	09 04       	cpc	r0, r9
 6d4:	00 01       	movw	r0, r0
 6d6:	03 01       	movw	r0, r6
 6d8:	09 02       	muls	r16, r25
 6da:	00 01       	movw	r0, r0
 6dc:	03 01       	movw	r0, r6
 6de:	09 02       	muls	r16, r25
 6e0:	00 01       	movw	r0, r0
 6e2:	09 02       	muls	r16, r25
 6e4:	00 00       	nop
 6e6:	01 01       	movw	r0, r2
 6e8:	1e 01       	movw	r2, r28
 6ea:	00 00       	nop
 6ec:	02 00       	.word	0x0002	; ????
 6ee:	41 00       	.word	0x0041	; ????
 6f0:	00 00       	nop
 6f2:	02 01       	movw	r0, r4
 6f4:	fb 0e       	add	r15, r27
 6f6:	0a 00       	.word	0x000a	; ????
 6f8:	01 01       	movw	r0, r2
 6fa:	01 01       	movw	r0, r2
 6fc:	00 00       	nop
 6fe:	00 01       	movw	r0, r0
 700:	2e 2e       	mov	r2, r30
 702:	2f 2e       	mov	r2, r31
 704:	2e 2f       	mov	r18, r30
 706:	2e 2e       	mov	r2, r30
 708:	2f 2e       	mov	r2, r31
 70a:	2e 2f       	mov	r18, r30
 70c:	67 63       	ori	r22, 0x37	; 55
 70e:	63 2f       	mov	r22, r19
 710:	6c 69       	ori	r22, 0x9C	; 156
 712:	62 67       	ori	r22, 0x72	; 114
 714:	63 63       	ori	r22, 0x33	; 51
 716:	2f 63       	ori	r18, 0x3F	; 63
 718:	6f 6e       	ori	r22, 0xEF	; 239
 71a:	66 69       	ori	r22, 0x96	; 150
 71c:	67 2f       	mov	r22, r23
 71e:	61 76       	andi	r22, 0x61	; 97
 720:	72 00       	.word	0x0072	; ????
 722:	00 6c       	ori	r16, 0xC0	; 192
 724:	69 62       	ori	r22, 0x29	; 41
 726:	31 66       	ori	r19, 0x61	; 97
 728:	75 6e       	ori	r23, 0xE5	; 229
 72a:	63 73       	andi	r22, 0x33	; 51
 72c:	2e 53       	subi	r18, 0x3E	; 62
 72e:	00 01       	movw	r0, r0
 730:	00 00       	nop
 732:	00 00       	nop
 734:	05 02       	muls	r16, r21
 736:	a8 04       	cpc	r10, r8
 738:	00 00       	nop
 73a:	03 e5       	ldi	r16, 0x53	; 83
 73c:	0c 01       	movw	r0, r24
 73e:	03 01       	movw	r0, r6
 740:	09 02       	muls	r16, r25
 742:	00 01       	movw	r0, r0
 744:	03 01       	movw	r0, r6
 746:	09 02       	muls	r16, r25
 748:	00 01       	movw	r0, r0
 74a:	03 01       	movw	r0, r6
 74c:	09 02       	muls	r16, r25
 74e:	00 01       	movw	r0, r0
 750:	03 01       	movw	r0, r6
 752:	09 02       	muls	r16, r25
 754:	00 01       	movw	r0, r0
 756:	03 02       	muls	r16, r19
 758:	09 02       	muls	r16, r25
 75a:	00 01       	movw	r0, r0
 75c:	03 02       	muls	r16, r19
 75e:	09 02       	muls	r16, r25
 760:	00 01       	movw	r0, r0
 762:	03 01       	movw	r0, r6
 764:	09 02       	muls	r16, r25
 766:	00 01       	movw	r0, r0
 768:	03 01       	movw	r0, r6
 76a:	09 02       	muls	r16, r25
 76c:	00 01       	movw	r0, r0
 76e:	03 01       	movw	r0, r6
 770:	09 02       	muls	r16, r25
 772:	00 01       	movw	r0, r0
 774:	03 01       	movw	r0, r6
 776:	09 02       	muls	r16, r25
 778:	00 01       	movw	r0, r0
 77a:	03 01       	movw	r0, r6
 77c:	09 02       	muls	r16, r25
 77e:	00 01       	movw	r0, r0
 780:	03 01       	movw	r0, r6
 782:	09 02       	muls	r16, r25
 784:	00 01       	movw	r0, r0
 786:	03 01       	movw	r0, r6
 788:	09 02       	muls	r16, r25
 78a:	00 01       	movw	r0, r0
 78c:	03 01       	movw	r0, r6
 78e:	09 02       	muls	r16, r25
 790:	00 01       	movw	r0, r0
 792:	03 01       	movw	r0, r6
 794:	09 02       	muls	r16, r25
 796:	00 01       	movw	r0, r0
 798:	03 01       	movw	r0, r6
 79a:	09 02       	muls	r16, r25
 79c:	00 01       	movw	r0, r0
 79e:	03 01       	movw	r0, r6
 7a0:	09 02       	muls	r16, r25
 7a2:	00 01       	movw	r0, r0
 7a4:	03 01       	movw	r0, r6
 7a6:	09 02       	muls	r16, r25
 7a8:	00 01       	movw	r0, r0
 7aa:	03 02       	muls	r16, r19
 7ac:	09 02       	muls	r16, r25
 7ae:	00 01       	movw	r0, r0
 7b0:	03 01       	movw	r0, r6
 7b2:	09 02       	muls	r16, r25
 7b4:	00 01       	movw	r0, r0
 7b6:	03 01       	movw	r0, r6
 7b8:	09 02       	muls	r16, r25
 7ba:	00 01       	movw	r0, r0
 7bc:	03 01       	movw	r0, r6
 7be:	09 02       	muls	r16, r25
 7c0:	00 01       	movw	r0, r0
 7c2:	03 01       	movw	r0, r6
 7c4:	09 02       	muls	r16, r25
 7c6:	00 01       	movw	r0, r0
 7c8:	03 01       	movw	r0, r6
 7ca:	09 02       	muls	r16, r25
 7cc:	00 01       	movw	r0, r0
 7ce:	03 02       	muls	r16, r19
 7d0:	09 02       	muls	r16, r25
 7d2:	00 01       	movw	r0, r0
 7d4:	03 01       	movw	r0, r6
 7d6:	09 02       	muls	r16, r25
 7d8:	00 01       	movw	r0, r0
 7da:	03 01       	movw	r0, r6
 7dc:	09 02       	muls	r16, r25
 7de:	00 01       	movw	r0, r0
 7e0:	03 01       	movw	r0, r6
 7e2:	09 02       	muls	r16, r25
 7e4:	00 01       	movw	r0, r0
 7e6:	03 02       	muls	r16, r19
 7e8:	09 02       	muls	r16, r25
 7ea:	00 01       	movw	r0, r0
 7ec:	03 02       	muls	r16, r19
 7ee:	09 02       	muls	r16, r25
 7f0:	00 01       	movw	r0, r0
 7f2:	03 02       	muls	r16, r19
 7f4:	09 02       	muls	r16, r25
 7f6:	00 01       	movw	r0, r0
 7f8:	03 02       	muls	r16, r19
 7fa:	09 02       	muls	r16, r25
 7fc:	00 01       	movw	r0, r0
 7fe:	03 02       	muls	r16, r19
 800:	09 02       	muls	r16, r25
 802:	00 01       	movw	r0, r0
 804:	09 02       	muls	r16, r25
 806:	00 00       	nop
 808:	01 01       	movw	r0, r2
 80a:	ac 00       	.word	0x00ac	; ????
 80c:	00 00       	nop
 80e:	02 00       	.word	0x0002	; ????
 810:	41 00       	.word	0x0041	; ????
 812:	00 00       	nop
 814:	02 01       	movw	r0, r4
 816:	fb 0e       	add	r15, r27
 818:	0a 00       	.word	0x000a	; ????
 81a:	01 01       	movw	r0, r2
 81c:	01 01       	movw	r0, r2
 81e:	00 00       	nop
 820:	00 01       	movw	r0, r0
 822:	2e 2e       	mov	r2, r30
 824:	2f 2e       	mov	r2, r31
 826:	2e 2f       	mov	r18, r30
 828:	2e 2e       	mov	r2, r30
 82a:	2f 2e       	mov	r2, r31
 82c:	2e 2f       	mov	r18, r30
 82e:	67 63       	ori	r22, 0x37	; 55
 830:	63 2f       	mov	r22, r19
 832:	6c 69       	ori	r22, 0x9C	; 156
 834:	62 67       	ori	r22, 0x72	; 114
 836:	63 63       	ori	r22, 0x33	; 51
 838:	2f 63       	ori	r18, 0x3F	; 63
 83a:	6f 6e       	ori	r22, 0xEF	; 239
 83c:	66 69       	ori	r22, 0x96	; 150
 83e:	67 2f       	mov	r22, r23
 840:	61 76       	andi	r22, 0x61	; 97
 842:	72 00       	.word	0x0072	; ????
 844:	00 6c       	ori	r16, 0xC0	; 192
 846:	69 62       	ori	r22, 0x29	; 41
 848:	31 66       	ori	r19, 0x61	; 97
 84a:	75 6e       	ori	r23, 0xE5	; 229
 84c:	63 73       	andi	r22, 0x33	; 51
 84e:	2e 53       	subi	r18, 0x3E	; 62
 850:	00 01       	movw	r0, r0
 852:	00 00       	nop
 854:	00 00       	nop
 856:	05 02       	muls	r16, r21
 858:	ec 04       	cpc	r14, r12
 85a:	00 00       	nop
 85c:	03 b3       	in	r16, 0x13	; 19
 85e:	04 01       	movw	r0, r8
 860:	03 01       	movw	r0, r6
 862:	09 02       	muls	r16, r25
 864:	00 01       	movw	r0, r0
 866:	03 01       	movw	r0, r6
 868:	09 02       	muls	r16, r25
 86a:	00 01       	movw	r0, r0
 86c:	03 01       	movw	r0, r6
 86e:	09 02       	muls	r16, r25
 870:	00 01       	movw	r0, r0
 872:	03 01       	movw	r0, r6
 874:	09 02       	muls	r16, r25
 876:	00 01       	movw	r0, r0
 878:	03 05       	cpc	r16, r3
 87a:	09 02       	muls	r16, r25
 87c:	00 01       	movw	r0, r0
 87e:	03 01       	movw	r0, r6
 880:	09 02       	muls	r16, r25
 882:	00 01       	movw	r0, r0
 884:	03 01       	movw	r0, r6
 886:	09 02       	muls	r16, r25
 888:	00 01       	movw	r0, r0
 88a:	03 01       	movw	r0, r6
 88c:	09 02       	muls	r16, r25
 88e:	00 01       	movw	r0, r0
 890:	03 04       	cpc	r0, r3
 892:	09 02       	muls	r16, r25
 894:	00 01       	movw	r0, r0
 896:	03 01       	movw	r0, r6
 898:	09 02       	muls	r16, r25
 89a:	00 01       	movw	r0, r0
 89c:	03 01       	movw	r0, r6
 89e:	09 02       	muls	r16, r25
 8a0:	00 01       	movw	r0, r0
 8a2:	03 01       	movw	r0, r6
 8a4:	09 02       	muls	r16, r25
 8a6:	00 01       	movw	r0, r0
 8a8:	03 01       	movw	r0, r6
 8aa:	09 02       	muls	r16, r25
 8ac:	00 01       	movw	r0, r0
 8ae:	03 01       	movw	r0, r6
 8b0:	09 02       	muls	r16, r25
 8b2:	00 01       	movw	r0, r0
 8b4:	09 02       	muls	r16, r25
 8b6:	00 00       	nop
 8b8:	01 01       	movw	r0, r2
 8ba:	82 00       	.word	0x0082	; ????
 8bc:	00 00       	nop
 8be:	02 00       	.word	0x0002	; ????
 8c0:	41 00       	.word	0x0041	; ????
 8c2:	00 00       	nop
 8c4:	02 01       	movw	r0, r4
 8c6:	fb 0e       	add	r15, r27
 8c8:	0a 00       	.word	0x000a	; ????
 8ca:	01 01       	movw	r0, r2
 8cc:	01 01       	movw	r0, r2
 8ce:	00 00       	nop
 8d0:	00 01       	movw	r0, r0
 8d2:	2e 2e       	mov	r2, r30
 8d4:	2f 2e       	mov	r2, r31
 8d6:	2e 2f       	mov	r18, r30
 8d8:	2e 2e       	mov	r2, r30
 8da:	2f 2e       	mov	r2, r31
 8dc:	2e 2f       	mov	r18, r30
 8de:	67 63       	ori	r22, 0x37	; 55
 8e0:	63 2f       	mov	r22, r19
 8e2:	6c 69       	ori	r22, 0x9C	; 156
 8e4:	62 67       	ori	r22, 0x72	; 114
 8e6:	63 63       	ori	r22, 0x33	; 51
 8e8:	2f 63       	ori	r18, 0x3F	; 63
 8ea:	6f 6e       	ori	r22, 0xEF	; 239
 8ec:	66 69       	ori	r22, 0x96	; 150
 8ee:	67 2f       	mov	r22, r23
 8f0:	61 76       	andi	r22, 0x61	; 97
 8f2:	72 00       	.word	0x0072	; ????
 8f4:	00 6c       	ori	r16, 0xC0	; 192
 8f6:	69 62       	ori	r22, 0x29	; 41
 8f8:	31 66       	ori	r19, 0x61	; 97
 8fa:	75 6e       	ori	r23, 0xE5	; 229
 8fc:	63 73       	andi	r22, 0x33	; 51
 8fe:	2e 53       	subi	r18, 0x3E	; 62
 900:	00 01       	movw	r0, r0
 902:	00 00       	nop
 904:	00 00       	nop
 906:	05 02       	muls	r16, r21
 908:	da 00       	.word	0x00da	; ????
 90a:	00 00       	nop
 90c:	03 88       	ldd	r0, Z+19	; 0x13
 90e:	13 01       	movw	r2, r6
 910:	03 01       	movw	r0, r6
 912:	09 02       	muls	r16, r25
 914:	00 01       	movw	r0, r0
 916:	03 01       	movw	r0, r6
 918:	09 02       	muls	r16, r25
 91a:	00 01       	movw	r0, r0
 91c:	03 01       	movw	r0, r6
 91e:	09 02       	muls	r16, r25
 920:	00 01       	movw	r0, r0
 922:	03 02       	muls	r16, r19
 924:	09 02       	muls	r16, r25
 926:	00 01       	movw	r0, r0
 928:	03 02       	muls	r16, r19
 92a:	09 02       	muls	r16, r25
 92c:	00 01       	movw	r0, r0
 92e:	03 01       	movw	r0, r6
 930:	09 02       	muls	r16, r25
 932:	00 01       	movw	r0, r0
 934:	03 01       	movw	r0, r6
 936:	09 02       	muls	r16, r25
 938:	00 01       	movw	r0, r0
 93a:	09 02       	muls	r16, r25
 93c:	00 00       	nop
 93e:	01 01       	movw	r0, r2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	10 00       	.word	0x0010	; ????
   2:	00 00       	nop
   4:	ff ff       	.word	0xffff	; ????
   6:	ff ff       	.word	0xffff	; ????
   8:	01 00       	.word	0x0001	; ????
   a:	02 7f       	andi	r16, 0xF2	; 242
   c:	24 0c       	add	r2, r4
   e:	20 02       	muls	r18, r16
  10:	a4 01       	movw	r20, r8
  12:	00 00       	nop
  14:	0c 00       	.word	0x000c	; ????
  16:	00 00       	nop
  18:	00 00       	nop
  1a:	00 00       	nop
  1c:	f6 00       	.word	0x00f6	; ????
  1e:	00 00       	nop
  20:	90 00       	.word	0x0090	; ????
  22:	00 00       	nop
  24:	34 00       	.word	0x0034	; ????
  26:	00 00       	nop
  28:	00 00       	nop
  2a:	00 00       	nop
  2c:	86 01       	movw	r16, r12
  2e:	00 00       	nop
  30:	94 00       	.word	0x0094	; ????
  32:	00 00       	nop
  34:	41 0e       	add	r4, r17
  36:	03 81       	ldd	r16, Z+3	; 0x03
  38:	02 41       	sbci	r16, 0x12	; 18
  3a:	0e 04       	cpc	r0, r14
  3c:	80 03       	fmuls	r16, r16
  3e:	44 0e       	add	r4, r20
  40:	05 92       	las	Z, r0
  42:	04 41       	sbci	r16, 0x14	; 20
  44:	0e 06       	cpc	r0, r30
  46:	93 05       	cpc	r25, r3
  48:	41 0e       	add	r4, r17
  4a:	07 98       	cbi	0x00, 7	; 0
  4c:	06 41       	sbci	r16, 0x16	; 22
  4e:	0e 08       	sbc	r0, r14
  50:	99 07       	cpc	r25, r25
  52:	41 0e       	add	r4, r17
  54:	09 9a       	sbi	0x01, 1	; 1
  56:	08 41       	sbci	r16, 0x18	; 24
  58:	0e 0a       	sbc	r0, r30
  5a:	9b 09       	sbc	r25, r11
  5c:	0c 00       	.word	0x000c	; ????
  5e:	00 00       	nop
  60:	00 00       	nop
  62:	00 00       	nop
  64:	1a 02       	muls	r17, r26
  66:	00 00       	nop
  68:	e2 00       	.word	0x00e2	; ????
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	61 76       	andi	r22, 0x61	; 97
   2:	72 2d       	mov	r23, r2
   4:	6c 69       	ori	r22, 0x9C	; 156
   6:	62 63       	ori	r22, 0x32	; 50
   8:	20 32       	cpi	r18, 0x20	; 32
   a:	2e 30       	cpi	r18, 0x0E	; 14
   c:	2e 30       	cpi	r18, 0x0E	; 14
   e:	00 75       	andi	r16, 0x50	; 80
  10:	69 6e       	ori	r22, 0xE9	; 233
  12:	74 38       	cpi	r23, 0x84	; 132
  14:	5f 74       	andi	r21, 0x4F	; 79
  16:	00 75       	andi	r16, 0x50	; 80
  18:	69 6e       	ori	r22, 0xE9	; 233
  1a:	74 31       	cpi	r23, 0x14	; 20
  1c:	36 5f       	subi	r19, 0xF6	; 246
  1e:	74 00       	.word	0x0074	; ????
  20:	5f 5f       	subi	r21, 0xFF	; 255
  22:	65 65       	ori	r22, 0x55	; 85
  24:	70 72       	andi	r23, 0x20	; 32
  26:	6f 6d       	ori	r22, 0xDF	; 223
  28:	00 55       	subi	r16, 0x50	; 80
  2a:	44 52       	subi	r20, 0x24	; 36
  2c:	30 00       	.word	0x0030	; ????
  2e:	55 43       	sbci	r21, 0x35	; 53
  30:	53 52       	subi	r21, 0x23	; 35
  32:	30 41       	sbci	r19, 0x10	; 16
  34:	00 55       	subi	r16, 0x50	; 80
  36:	43 53       	subi	r20, 0x33	; 51
  38:	52 30       	cpi	r21, 0x02	; 2
  3a:	42 00       	.word	0x0042	; ????
  3c:	55 43       	sbci	r21, 0x35	; 53
  3e:	53 52       	subi	r21, 0x23	; 35
  40:	30 43       	sbci	r19, 0x30	; 48
  42:	00 55       	subi	r16, 0x50	; 80
  44:	42 52       	subi	r20, 0x22	; 34
  46:	52 30       	cpi	r21, 0x02	; 2
  48:	00 54       	subi	r16, 0x40	; 64
  4a:	57 41       	sbci	r21, 0x17	; 23
  4c:	4d 52       	subi	r20, 0x2D	; 45
  4e:	00 54       	subi	r16, 0x40	; 64
  50:	57 42       	sbci	r21, 0x27	; 39
  52:	52 00       	.word	0x0052	; ????
  54:	54 57       	subi	r21, 0x74	; 116
  56:	43 52       	subi	r20, 0x23	; 35
  58:	00 54       	subi	r16, 0x40	; 64
  5a:	57 53       	subi	r21, 0x37	; 55
  5c:	52 00       	.word	0x0052	; ????
  5e:	54 57       	subi	r21, 0x74	; 116
  60:	44 52       	subi	r20, 0x24	; 36
  62:	00 54       	subi	r16, 0x40	; 64
  64:	57 41       	sbci	r21, 0x17	; 23
  66:	52 00       	.word	0x0052	; ????
  68:	54 49       	sbci	r21, 0x94	; 148
  6a:	4d 53       	subi	r20, 0x3D	; 61
  6c:	4b 31       	cpi	r20, 0x1B	; 27
  6e:	00 54       	subi	r16, 0x40	; 64
  70:	49 46       	sbci	r20, 0x69	; 105
  72:	52 31       	cpi	r21, 0x12	; 18
  74:	00 54       	subi	r16, 0x40	; 64
  76:	43 43       	sbci	r20, 0x33	; 51
  78:	52 31       	cpi	r21, 0x12	; 18
  7a:	41 00       	.word	0x0041	; ????
  7c:	54 43       	sbci	r21, 0x34	; 52
  7e:	43 52       	subi	r20, 0x23	; 35
  80:	31 42       	sbci	r19, 0x21	; 33
  82:	00 54       	subi	r16, 0x40	; 64
  84:	43 43       	sbci	r20, 0x33	; 51
  86:	52 31       	cpi	r21, 0x12	; 18
  88:	43 00       	.word	0x0043	; ????
  8a:	54 43       	sbci	r21, 0x34	; 52
  8c:	4e 54       	subi	r20, 0x4E	; 78
  8e:	31 00       	.word	0x0031	; ????
  90:	4f 43       	sbci	r20, 0x3F	; 63
  92:	52 31       	cpi	r21, 0x12	; 18
  94:	41 00       	.word	0x0041	; ????
  96:	4f 43       	sbci	r20, 0x3F	; 63
  98:	52 31       	cpi	r21, 0x12	; 18
  9a:	42 00       	.word	0x0042	; ????
  9c:	49 43       	sbci	r20, 0x39	; 57
  9e:	52 31       	cpi	r21, 0x12	; 18
  a0:	00 47       	sbci	r16, 0x70	; 112
  a2:	54 43       	sbci	r21, 0x34	; 52
  a4:	43 52       	subi	r20, 0x23	; 35
  a6:	00 54       	subi	r16, 0x40	; 64
  a8:	49 4d       	sbci	r20, 0xD9	; 217
  aa:	53 4b       	sbci	r21, 0xB3	; 179
  ac:	32 00       	.word	0x0032	; ????
  ae:	54 49       	sbci	r21, 0x94	; 148
  b0:	46 52       	subi	r20, 0x26	; 38
  b2:	32 00       	.word	0x0032	; ????
  b4:	54 43       	sbci	r21, 0x34	; 52
  b6:	43 52       	subi	r20, 0x23	; 35
  b8:	32 41       	sbci	r19, 0x12	; 18
  ba:	00 54       	subi	r16, 0x40	; 64
  bc:	43 43       	sbci	r20, 0x33	; 51
  be:	52 32       	cpi	r21, 0x22	; 34
  c0:	42 00       	.word	0x0042	; ????
  c2:	54 43       	sbci	r21, 0x34	; 52
  c4:	4e 54       	subi	r20, 0x4E	; 78
  c6:	32 00       	.word	0x0032	; ????
  c8:	4f 43       	sbci	r20, 0x3F	; 63
  ca:	52 32       	cpi	r21, 0x22	; 34
  cc:	42 00       	.word	0x0042	; ????
  ce:	4f 43       	sbci	r20, 0x3F	; 63
  d0:	52 32       	cpi	r21, 0x22	; 34
  d2:	41 00       	.word	0x0041	; ????
  d4:	41 53       	subi	r20, 0x31	; 49
  d6:	53 52       	subi	r21, 0x23	; 35
  d8:	00 47       	sbci	r16, 0x70	; 112
  da:	54 43       	sbci	r21, 0x34	; 52
  dc:	43 52       	subi	r20, 0x23	; 35
  de:	00 41       	sbci	r16, 0x10	; 16
  e0:	44 4d       	sbci	r20, 0xD4	; 212
  e2:	55 58       	subi	r21, 0x85	; 133
  e4:	00 41       	sbci	r16, 0x10	; 16
  e6:	44 43       	sbci	r20, 0x34	; 52
  e8:	00 41       	sbci	r16, 0x10	; 16
  ea:	44 43       	sbci	r20, 0x34	; 52
  ec:	53 52       	subi	r21, 0x23	; 35
  ee:	41 00       	.word	0x0041	; ????
  f0:	41 44       	sbci	r20, 0x41	; 65
  f2:	43 53       	subi	r20, 0x33	; 51
  f4:	52 42       	sbci	r21, 0x22	; 34
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  f6:	00 44       	sbci	r16, 0x40	; 64
  f8:	49 44       	sbci	r20, 0x49	; 73
  fa:	52 30       	cpi	r21, 0x02	; 2
	uint8_t bit = digitalPinToBitMask(pin);
  fc:	00 41       	sbci	r16, 0x10	; 16
  fe:	43 53       	subi	r20, 0x33	; 51
 100:	52 00       	.word	0x0052	; ????
	uint8_t port = digitalPinToPort(pin);
 102:	44 49       	sbci	r20, 0x94	; 148
 104:	44 52       	subi	r20, 0x24	; 36
 106:	31 00       	.word	0x0031	; ????
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 108:	50 4f       	sbci	r21, 0xF0	; 240
 10a:	52 54       	subi	r21, 0x42	; 66

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 10c:	42 00       	.word	0x0042	; ????
 10e:	44 44       	sbci	r20, 0x44	; 68
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 110:	52 42       	sbci	r21, 0x22	; 34
 112:	00 50       	subi	r16, 0x00	; 0
 114:	49 4e       	sbci	r20, 0xE9	; 233
 116:	42 00       	.word	0x0042	; ????
 118:	50 4f       	sbci	r21, 0xF0	; 240
 11a:	52 54       	subi	r21, 0x42	; 66
 11c:	43 00       	.word	0x0043	; ????

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 11e:	44 44       	sbci	r20, 0x44	; 68
 120:	52 43       	sbci	r21, 0x32	; 50
 122:	00 50       	subi	r16, 0x00	; 0
 124:	49 4e       	sbci	r20, 0xE9	; 233
 126:	43 00       	.word	0x0043	; ????
 128:	50 4f       	sbci	r21, 0xF0	; 240
 12a:	52 54       	subi	r21, 0x42	; 66

	uint8_t oldSREG = SREG;
 12c:	44 00       	.word	0x0044	; ????
	cli();
 12e:	44 44       	sbci	r20, 0x44	; 68

	if (val == LOW) {
		*out &= ~bit;
 130:	52 44       	sbci	r21, 0x42	; 66
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 132:	00 50       	subi	r16, 0x00	; 0
 134:	49 4e       	sbci	r20, 0xE9	; 233
		*out &= ~bit;
 136:	44 00       	.word	0x0044	; ????
 138:	4f 43       	sbci	r20, 0x3F	; 63
	} else {
		*out |= bit;
 13a:	52 30       	cpi	r21, 0x02	; 2
	}

	SREG = oldSREG;
 13c:	42 00       	.word	0x0042	; ????
}
 13e:	4f 43       	sbci	r20, 0x3F	; 63
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 140:	52 30       	cpi	r21, 0x02	; 2
 142:	41 00       	.word	0x0041	; ????
 144:	54 43       	sbci	r21, 0x34	; 52
 146:	4e 54       	subi	r20, 0x4E	; 78
 148:	30 00       	.word	0x0030	; ????
 14a:	54 43       	sbci	r21, 0x34	; 52
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 14c:	43 52       	subi	r20, 0x23	; 35
 14e:	30 42       	sbci	r19, 0x20	; 32
 150:	00 54       	subi	r16, 0x40	; 64
 152:	43 43       	sbci	r20, 0x33	; 51
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 154:	52 30       	cpi	r21, 0x02	; 2
 156:	41 00       	.word	0x0041	; ????
 158:	54 49       	sbci	r21, 0x94	; 148
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 15a:	4d 53       	subi	r20, 0x3D	; 61
 15c:	4b 30       	cpi	r20, 0x0B	; 11
 15e:	00 54       	subi	r16, 0x40	; 64
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 160:	49 46       	sbci	r20, 0x69	; 105
 162:	52 30       	cpi	r21, 0x02	; 2
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 164:	00 47       	sbci	r16, 0x70	; 112
 166:	54 43       	sbci	r21, 0x34	; 52
 168:	43 52       	subi	r20, 0x23	; 35
 16a:	00 45       	sbci	r16, 0x50	; 80
 16c:	49 43       	sbci	r20, 0x39	; 57
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 16e:	52 41       	sbci	r21, 0x12	; 18
 170:	00 45       	sbci	r16, 0x50	; 80
 172:	49 4d       	sbci	r20, 0xD9	; 217
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 174:	53 4b       	sbci	r21, 0xB3	; 179
 176:	00 45       	sbci	r16, 0x50	; 80
 178:	49 46       	sbci	r20, 0x69	; 105
 17a:	52 00       	.word	0x0052	; ????
 17c:	50 43       	sbci	r21, 0x30	; 48
 17e:	49 43       	sbci	r20, 0x39	; 57
 180:	52 00       	.word	0x0052	; ????
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 182:	50 43       	sbci	r21, 0x30	; 48
 184:	4d 53       	subi	r20, 0x3D	; 61
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 186:	4b 32       	cpi	r20, 0x2B	; 43
 188:	00 50       	subi	r16, 0x00	; 0
 18a:	43 4d       	sbci	r20, 0xD3	; 211
 18c:	53 4b       	sbci	r21, 0xB3	; 179
 18e:	31 00       	.word	0x0031	; ????
 190:	50 43       	sbci	r21, 0x30	; 48
 192:	4d 53       	subi	r20, 0x3D	; 61
 194:	4b 30       	cpi	r20, 0x0B	; 11
 196:	00 50       	subi	r16, 0x00	; 0
 198:	43 49       	sbci	r20, 0x93	; 147
 19a:	46 52       	subi	r20, 0x26	; 38
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 19c:	00 53       	subi	r16, 0x30	; 48
 19e:	50 44       	sbci	r21, 0x40	; 64
 1a0:	52 00       	.word	0x0052	; ????
 1a2:	53 50       	subi	r21, 0x03	; 3
 1a4:	53 52       	subi	r21, 0x23	; 35
 1a6:	00 53       	subi	r16, 0x30	; 48
 1a8:	50 43       	sbci	r21, 0x30	; 48
 1aa:	52 00       	.word	0x0052	; ????
	unsigned char f = timer0_fract;
 1ac:	57 44       	sbci	r21, 0x47	; 71
 1ae:	54 43       	sbci	r21, 0x34	; 52

	m += MILLIS_INC;
	f += FRACT_INC;
 1b0:	53 52       	subi	r21, 0x23	; 35
 1b2:	00 50       	subi	r16, 0x00	; 0
	if (f >= FRACT_MAX) {
 1b4:	52 52       	subi	r21, 0x22	; 34
 1b6:	00 4f       	sbci	r16, 0xF0	; 240
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 1b8:	53 43       	sbci	r21, 0x33	; 51
 1ba:	43 41       	sbci	r20, 0x13	; 19
 1bc:	4c 00       	.word	0x004c	; ????
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 1be:	43 4c       	sbci	r20, 0xC3	; 195
 1c0:	4b 50       	subi	r20, 0x0B	; 11
	timer0_millis = m;
 1c2:	52 00       	.word	0x0052	; ????
 1c4:	53 52       	subi	r21, 0x23	; 35
 1c6:	45 47       	sbci	r20, 0x75	; 117
 1c8:	00 53       	subi	r16, 0x30	; 48
 1ca:	50 00       	.word	0x0050	; ????
 1cc:	53 50       	subi	r21, 0x03	; 3
 1ce:	4d 43       	sbci	r20, 0x3D	; 61
 1d0:	53 52       	subi	r21, 0x23	; 35
	timer0_overflow_count++;
 1d2:	00 4d       	sbci	r16, 0xD0	; 208
 1d4:	43 55       	subi	r20, 0x53	; 83
 1d6:	43 52       	subi	r20, 0x23	; 35
 1d8:	00 4d       	sbci	r16, 0xD0	; 208
 1da:	43 55       	subi	r20, 0x53	; 83
 1dc:	53 52       	subi	r21, 0x23	; 35
 1de:	00 53       	subi	r16, 0x30	; 48
 1e0:	4d 43       	sbci	r20, 0x3D	; 61
 1e2:	52 00       	.word	0x0052	; ????
 1e4:	47 50       	subi	r20, 0x07	; 7
 1e6:	49 4f       	sbci	r20, 0xF9	; 249
 1e8:	52 32       	cpi	r21, 0x22	; 34
 1ea:	00 47       	sbci	r16, 0x70	; 112
 1ec:	50 49       	sbci	r21, 0x90	; 144
 1ee:	4f 52       	subi	r20, 0x2F	; 47
 1f0:	31 00       	.word	0x0031	; ????
 1f2:	47 50       	subi	r20, 0x07	; 7
 1f4:	49 4f       	sbci	r20, 0xF9	; 249
 1f6:	52 30       	cpi	r21, 0x02	; 2
}
 1f8:	00 45       	sbci	r16, 0x50	; 80
 1fa:	45 41       	sbci	r20, 0x15	; 21
 1fc:	52 00       	.word	0x0052	; ????
 1fe:	45 45       	sbci	r20, 0x55	; 85
 200:	44 52       	subi	r20, 0x24	; 36
 202:	00 45       	sbci	r16, 0x50	; 80
 204:	45 43       	sbci	r20, 0x35	; 53
 206:	52 00       	.word	0x0052	; ????
 208:	70 6f       	ori	r23, 0xF0	; 240
 20a:	72 74       	andi	r23, 0x42	; 66
 20c:	5f 74       	andi	r21, 0x4F	; 79
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 20e:	6f 5f       	subi	r22, 0xFF	; 255
 210:	6f 75       	andi	r22, 0x5F	; 95
		m += 1;
 212:	74 70       	andi	r23, 0x04	; 4
 214:	75 74       	andi	r23, 0x45	; 69
 216:	5f 50       	subi	r21, 0x0F	; 15
 218:	47 4d       	sbci	r20, 0xD7	; 215

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 21a:	00 5f       	subi	r16, 0xF0	; 240
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 21c:	5f 61       	ori	r21, 0x1F	; 31
 21e:	64 64       	ori	r22, 0x44	; 68
 220:	72 31       	cpi	r23, 0x12	; 18
	sbi(TCCR0A, WGM00);
 222:	36 00       	.word	0x0036	; ????
 224:	73 65       	ori	r23, 0x53	; 83
 226:	74 75       	andi	r23, 0x54	; 84
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 228:	70 00       	.word	0x0070	; ????
 22a:	72 61       	ori	r23, 0x12	; 18
 22c:	6e 64       	ori	r22, 0x4E	; 78
	sbi(TCCR0B, CS00);
 22e:	4e 75       	andi	r20, 0x5E	; 94
 230:	6d 62       	ori	r22, 0x2D	; 45
 232:	65 72       	andi	r22, 0x25	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 234:	31 00       	.word	0x0031	; ????
 236:	72 61       	ori	r23, 0x12	; 18
 238:	6e 64       	ori	r22, 0x4E	; 78
 23a:	4e 75       	andi	r20, 0x5E	; 94
 23c:	6d 62       	ori	r22, 0x2D	; 45
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 23e:	65 72       	andi	r22, 0x25	; 37
 240:	32 00       	.word	0x0032	; ????

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 242:	69 6e       	ori	r22, 0xE9	; 233
 244:	69 74       	andi	r22, 0x49	; 73
 246:	00 64       	ori	r16, 0x40	; 64
 248:	69 67       	ori	r22, 0x79	; 121
 24a:	69 74       	andi	r22, 0x49	; 73
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 24c:	61 6c       	ori	r22, 0xC1	; 193
 24e:	5f 70       	andi	r21, 0x0F	; 15
 250:	69 6e       	ori	r22, 0xE9	; 233
 252:	5f 74       	andi	r21, 0x4F	; 79
 254:	6f 5f       	subi	r22, 0xFF	; 255
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 256:	70 6f       	ori	r23, 0xF0	; 240
 258:	72 74       	andi	r23, 0x42	; 66
 25a:	5f 50       	subi	r21, 0x0F	; 15
 25c:	47 4d       	sbci	r20, 0xD7	; 215
 25e:	00 72       	andi	r16, 0x20	; 32

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 260:	61 6e       	ori	r22, 0xE1	; 225
 262:	64 6f       	ori	r22, 0xF4	; 244
 264:	6d 00       	.word	0x006d	; ????
 266:	64 69       	ori	r22, 0x94	; 148
 268:	67 69       	ori	r22, 0x97	; 151

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 26a:	74 61       	ori	r23, 0x14	; 20
 26c:	6c 5f       	subi	r22, 0xFC	; 252
 26e:	70 69       	ori	r23, 0x90	; 144
 270:	6e 5f       	subi	r22, 0xFE	; 254
 272:	74 6f       	ori	r23, 0xF4	; 244
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 274:	5f 62       	ori	r21, 0x2F	; 47
 276:	69 74       	andi	r22, 0x49	; 73
 278:	5f 6d       	ori	r21, 0xDF	; 223
 27a:	61 73       	andi	r22, 0x31	; 49
 27c:	6b 5f       	subi	r22, 0xFB	; 251
		sbi(ADCSRA, ADPS1);
 27e:	50 47       	sbci	r21, 0x70	; 112
 280:	4d 00       	.word	0x004d	; ????
 282:	43 3a       	cpi	r20, 0xA3	; 163
 284:	5c 55       	subi	r21, 0x5C	; 92
 286:	73 65       	ori	r23, 0x53	; 83
		sbi(ADCSRA, ADPS0);
 288:	72 73       	andi	r23, 0x32	; 50
 28a:	5c 52       	subi	r21, 0x2C	; 44
 28c:	59 77       	andi	r21, 0x79	; 121
 28e:	6f 72       	andi	r22, 0x2F	; 47
 290:	6b 5c       	subi	r22, 0xCB	; 203
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 292:	44 65       	ori	r20, 0x54	; 84
 294:	73 6b       	ori	r23, 0xB3	; 179
 296:	74 6f       	ori	r23, 0xF4	; 244
 298:	70 5c       	subi	r23, 0xC0	; 192
 29a:	53 70       	andi	r21, 0x03	; 3
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 29c:	72 69       	ori	r23, 0x92	; 146
 29e:	6e 67       	ori	r22, 0x7E	; 126
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 2a0:	20 31       	cpi	r18, 0x10	; 16
 2a2:	39 5c       	subi	r19, 0xC9	; 201
 2a4:	61 73       	andi	r22, 0x31	; 49
	uint8_t port = digitalPinToPort(pin);
 2a6:	73 69       	ori	r23, 0x93	; 147
 2a8:	67 6e       	ori	r22, 0xE7	; 231
 2aa:	6d 65       	ori	r22, 0x5D	; 93
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 2ac:	6e 74       	andi	r22, 0x4E	; 78
 2ae:	34 5c       	subi	r19, 0xC4	; 196

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 2b0:	41 72       	andi	r20, 0x21	; 33
 2b2:	64 75       	andi	r22, 0x54	; 84
 2b4:	69 6e       	ori	r22, 0xE9	; 233
 2b6:	6f 41       	sbci	r22, 0x1F	; 31
 2b8:	73 73       	andi	r23, 0x33	; 51
 2ba:	65 6d       	ori	r22, 0xD5	; 213
 2bc:	62 6c       	ori	r22, 0xC2	; 194
 2be:	79 50       	subi	r23, 0x09	; 9
	out = portOutputRegister(port);
 2c0:	61 72       	andi	r22, 0x21	; 33
 2c2:	73 65       	ori	r23, 0x53	; 83
 2c4:	72 5c       	subi	r23, 0xC2	; 194
 2c6:	50 61       	ori	r21, 0x10	; 16
 2c8:	72 73       	andi	r23, 0x32	; 50
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 2ca:	65 72       	andi	r22, 0x25	; 37
                cli();
 2cc:	49 6e       	ori	r20, 0xE9	; 233
		*reg |= bit;
 2ce:	70 75       	andi	r23, 0x50	; 80
 2d0:	74 46       	sbci	r23, 0x64	; 100
 2d2:	69 6c       	ori	r22, 0xC9	; 201
		SREG = oldSREG;
 2d4:	65 73       	andi	r22, 0x35	; 53
 2d6:	5c 52       	subi	r21, 0x2C	; 44
 2d8:	61 77       	andi	r22, 0x71	; 113
void loop() {
  // put your main code here, to run repeatedly:
  // Create trigger
  int randNumber1, randNumber2;
  randomSeed(0);
  noInterrupts();
 2da:	41 72       	andi	r20, 0x21	; 33
  digitalWrite(LED_BUILTIN, LOW);   
 2dc:	64 75       	andi	r22, 0x54	; 84
 2de:	69 6e       	ori	r22, 0xE9	; 233
 2e0:	6f 46       	sbci	r22, 0x6F	; 111
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
 2e2:	69 6c       	ori	r22, 0xC9	; 201
 2e4:	65 73       	andi	r22, 0x35	; 53
 2e6:	5c 4c       	sbci	r21, 0xCC	; 204
 2e8:	41 44       	sbci	r20, 0x41	; 65
 2ea:	53 5f       	subi	r21, 0xF3	; 243
 2ec:	4d 61       	ori	r20, 0x1D	; 29
 2ee:	74 68       	ori	r23, 0x84	; 132
  //Code goes here
  randNumber1 = random(65535);
  randNumber2 = random(65535);
  interrupts();
 2f0:	5f 6c       	ori	r21, 0xCF	; 207
 2f2:	6f 6f       	ori	r22, 0xFF	; 255
 2f4:	70 00       	.word	0x0070	; ????
 2f6:	5f 5f       	subi	r21, 0xFF	; 255
 2f8:	76 65       	ori	r23, 0x56	; 86
 2fa:	63 74       	andi	r22, 0x43	; 67
 2fc:	6f 72       	andi	r22, 0x2F	; 47
 2fe:	5f 31       	cpi	r21, 0x1F	; 31
 300:	36 00       	.word	0x0036	; ????
 302:	74 69       	ori	r23, 0x94	; 148
 304:	6d 65       	ori	r22, 0x5D	; 93
 306:	72 30       	cpi	r23, 0x02	; 2
 308:	5f 6d       	ori	r21, 0xDF	; 223
 30a:	69 6c       	ori	r22, 0xC9	; 201
 30c:	6c 69       	ori	r22, 0x9C	; 156
 30e:	73 00       	.word	0x0073	; ????
 310:	75 6e       	ori	r23, 0xE5	; 229
 312:	73 69       	ori	r23, 0x93	; 147
 314:	67 6e       	ori	r22, 0xE7	; 231
 316:	65 64       	ori	r22, 0x45	; 69
 318:	20 63       	ori	r18, 0x30	; 48
 31a:	68 61       	ori	r22, 0x18	; 24
 31c:	72 00       	.word	0x0072	; ????
 31e:	64 69       	ori	r22, 0x94	; 148
 320:	67 69       	ori	r22, 0x97	; 151
 322:	74 61       	ori	r23, 0x14	; 20
 324:	6c 57       	subi	r22, 0x7C	; 124
 326:	72 69       	ori	r23, 0x92	; 146
 328:	74 65       	ori	r23, 0x54	; 84
 32a:	00 74       	andi	r16, 0x40	; 64
 32c:	69 6d       	ori	r22, 0xD9	; 217
 32e:	65 72       	andi	r22, 0x25	; 37
 330:	00 69       	ori	r16, 0x90	; 144
 332:	6e 69       	ori	r22, 0x9E	; 158
 334:	74 56       	subi	r23, 0x64	; 100
 336:	61 72       	andi	r22, 0x21	; 33
 338:	69 61       	ori	r22, 0x19	; 25
 33a:	6e 74       	andi	r22, 0x4E	; 78
 33c:	00 6c       	ori	r16, 0xC0	; 192
 33e:	6f 6e       	ori	r22, 0xEF	; 239
 340:	67 20       	and	r6, r7
 342:	75 6e       	ori	r23, 0xE5	; 229
 344:	73 69       	ori	r23, 0x93	; 147
 346:	67 6e       	ori	r22, 0xE7	; 231
 348:	65 64       	ori	r22, 0x45	; 69
 34a:	20 69       	ori	r18, 0x90	; 144
 34c:	6e 74       	andi	r22, 0x4E	; 78
 34e:	00 5f       	subi	r16, 0xF0	; 240
 350:	5f 72       	andi	r21, 0x2F	; 47
 352:	65 73       	andi	r22, 0x35	; 53
 354:	75 6c       	ori	r23, 0xC5	; 197
 356:	74 00       	.word	0x0074	; ????
 358:	6f 6c       	ori	r22, 0xCF	; 207
 35a:	64 53       	subi	r22, 0x34	; 52
 35c:	52 45       	sbci	r21, 0x52	; 82
 35e:	47 00       	.word	0x0047	; ????
 360:	74 75       	andi	r23, 0x54	; 84
 362:	72 6e       	ori	r23, 0xE2	; 226
 364:	4f 66       	ori	r20, 0x6F	; 111
 366:	66 50       	subi	r22, 0x06	; 6
 368:	57 4d       	sbci	r21, 0xD7	; 215
 36a:	2e 70       	andi	r18, 0x0E	; 14
 36c:	61 72       	andi	r22, 0x21	; 33
 36e:	74 2e       	mov	r7, r20
 370:	30 00       	.word	0x0030	; ????
 372:	68 6f       	ori	r22, 0xF8	; 248
 374:	77 62       	ori	r23, 0x27	; 39
 376:	69 67       	ori	r22, 0x79	; 121
 378:	00 6d       	ori	r16, 0xD0	; 208
 37a:	61 69       	ori	r22, 0x91	; 145
 37c:	6e 00       	.word	0x006e	; ????
 37e:	70 69       	ori	r23, 0x90	; 144
 380:	6e 4d       	sbci	r22, 0xDE	; 222
 382:	6f 64       	ori	r22, 0x4F	; 79
 384:	65 00       	.word	0x0065	; ????
 386:	73 65       	ori	r23, 0x53	; 83
 388:	65 64       	ori	r22, 0x45	; 69
 38a:	00 75       	andi	r16, 0x50	; 80
 38c:	69 6e       	ori	r22, 0xE9	; 233
 38e:	74 38       	cpi	r23, 0x84	; 132
 390:	5f 74       	andi	r21, 0x4F	; 79
 392:	00 6d       	ori	r16, 0xD0	; 208
 394:	6f 64       	ori	r22, 0x4F	; 79
 396:	65 00       	.word	0x0065	; ????
 398:	74 75       	andi	r23, 0x54	; 84
 39a:	72 6e       	ori	r23, 0xE2	; 226
 39c:	4f 66       	ori	r20, 0x6F	; 111
 39e:	66 50       	subi	r22, 0x06	; 6
 3a0:	57 4d       	sbci	r21, 0xD7	; 215
 3a2:	00 70       	andi	r16, 0x00	; 0
 3a4:	6f 72       	andi	r22, 0x2F	; 47
 3a6:	74 5f       	subi	r23, 0xF4	; 244
 3a8:	74 6f       	ori	r23, 0xF4	; 244
 3aa:	5f 6d       	ori	r21, 0xDF	; 223
 3ac:	6f 64       	ori	r22, 0x4F	; 79
 3ae:	65 5f       	subi	r22, 0xF5	; 245
 3b0:	50 47       	sbci	r21, 0x70	; 112
 3b2:	4d 00       	.word	0x004d	; ????
 3b4:	70 6f       	ori	r23, 0xF0	; 240
 3b6:	72 74       	andi	r23, 0x42	; 66
 3b8:	00 74       	andi	r16, 0x40	; 64
 3ba:	69 6d       	ori	r22, 0xD9	; 217
 3bc:	65 72       	andi	r22, 0x25	; 37
 3be:	30 5f       	subi	r19, 0xF0	; 240
 3c0:	6f 76       	andi	r22, 0x6F	; 111
 3c2:	65 72       	andi	r22, 0x25	; 37
 3c4:	66 6c       	ori	r22, 0xC6	; 198
 3c6:	6f 77       	andi	r22, 0x7F	; 127
 3c8:	5f 63       	ori	r21, 0x3F	; 63
 3ca:	6f 75       	andi	r22, 0x5F	; 95
 3cc:	6e 74       	andi	r22, 0x4E	; 78
 3ce:	00 64       	ori	r16, 0x40	; 64
 3d0:	69 67       	ori	r22, 0x79	; 121
 3d2:	69 74       	andi	r22, 0x49	; 73
 3d4:	61 6c       	ori	r22, 0xC1	; 193
 3d6:	5f 70       	andi	r21, 0x0F	; 15
 3d8:	69 6e       	ori	r22, 0xE9	; 233
 3da:	5f 74       	andi	r21, 0x4F	; 79
 3dc:	6f 5f       	subi	r22, 0xFF	; 255
 3de:	74 69       	ori	r23, 0x94	; 148
 3e0:	6d 65       	ori	r22, 0x5D	; 93
 3e2:	72 5f       	subi	r23, 0xF2	; 242
 3e4:	50 47       	sbci	r21, 0x70	; 112
 3e6:	4d 00       	.word	0x004d	; ????
 3e8:	75 69       	ori	r23, 0x95	; 149
 3ea:	6e 74       	andi	r22, 0x4E	; 78
 3ec:	31 36       	cpi	r19, 0x61	; 97
 3ee:	5f 74       	andi	r21, 0x4F	; 79
 3f0:	00 47       	sbci	r16, 0x70	; 112
 3f2:	4e 55       	subi	r20, 0x5E	; 94
 3f4:	20 47       	sbci	r18, 0x70	; 112
 3f6:	49 4d       	sbci	r20, 0xD9	; 217
 3f8:	50 4c       	sbci	r21, 0xC0	; 192
 3fa:	45 20       	and	r4, r5
 3fc:	37 2e       	mov	r3, r23
 3fe:	33 2e       	mov	r3, r19
 400:	30 20       	and	r3, r0
 402:	2d 6d       	ori	r18, 0xDD	; 221
 404:	6e 2d       	mov	r22, r14
 406:	66 6c       	ori	r22, 0xC6	; 198
 408:	61 73       	andi	r22, 0x31	; 49
 40a:	68 3d       	cpi	r22, 0xD8	; 216
 40c:	31 20       	and	r3, r1
 40e:	2d 6d       	ori	r18, 0xDD	; 221
 410:	6d 63       	ori	r22, 0x3D	; 61
 412:	75 3d       	cpi	r23, 0xD5	; 213
 414:	61 76       	andi	r22, 0x61	; 97
 416:	72 35       	cpi	r23, 0x52	; 82
 418:	20 2d       	mov	r18, r0
 41a:	6d 6e       	ori	r22, 0xED	; 237
 41c:	2d 66       	ori	r18, 0x6D	; 109
 41e:	6c 61       	ori	r22, 0x1C	; 28
 420:	73 68       	ori	r23, 0x83	; 131
 422:	3d 31       	cpi	r19, 0x1D	; 29
 424:	20 2d       	mov	r18, r0
 426:	6d 6e       	ori	r22, 0xED	; 237
 428:	6f 2d       	mov	r22, r15
 42a:	73 6b       	ori	r23, 0xB3	; 179
 42c:	69 70       	andi	r22, 0x09	; 9
 42e:	2d 62       	ori	r18, 0x2D	; 45
 430:	75 67       	ori	r23, 0x75	; 117
 432:	20 2d       	mov	r18, r0
 434:	6d 6d       	ori	r22, 0xDD	; 221
 436:	63 75       	andi	r22, 0x53	; 83
 438:	3d 61       	ori	r19, 0x1D	; 29
 43a:	76 72       	andi	r23, 0x26	; 38
 43c:	35 20       	and	r3, r5
 43e:	2d 67       	ori	r18, 0x7D	; 125
 440:	20 2d       	mov	r18, r0
 442:	4f 73       	andi	r20, 0x3F	; 63
 444:	20 2d       	mov	r18, r0
 446:	4f 73       	andi	r20, 0x3F	; 63
 448:	20 2d       	mov	r18, r0
 44a:	66 6d       	ori	r22, 0xD6	; 214
 44c:	61 74       	andi	r22, 0x41	; 65
 44e:	68 2d       	mov	r22, r8
 450:	65 72       	andi	r22, 0x25	; 37
 452:	72 6e       	ori	r23, 0xE2	; 226
 454:	6f 20       	and	r6, r15
 456:	2d 66       	ori	r18, 0x6D	; 109
 458:	73 69       	ori	r23, 0x93	; 147
 45a:	67 6e       	ori	r22, 0xE7	; 231
 45c:	65 64       	ori	r22, 0x45	; 69
 45e:	2d 7a       	andi	r18, 0xAD	; 173
 460:	65 72       	andi	r22, 0x25	; 37
 462:	6f 73       	andi	r22, 0x3F	; 63
 464:	20 2d       	mov	r18, r0
 466:	66 74       	andi	r22, 0x46	; 70
 468:	72 61       	ori	r23, 0x12	; 18
 46a:	70 70       	andi	r23, 0x00	; 0
 46c:	69 6e       	ori	r22, 0xE9	; 233
 46e:	67 2d       	mov	r22, r7
 470:	6d 61       	ori	r22, 0x1D	; 29
 472:	74 68       	ori	r23, 0x84	; 132
 474:	20 2d       	mov	r18, r0
 476:	66 6e       	ori	r22, 0xE6	; 230
 478:	6f 2d       	mov	r22, r15
 47a:	74 72       	andi	r23, 0x24	; 36
 47c:	61 70       	andi	r22, 0x01	; 1
 47e:	76 20       	and	r7, r6
 480:	2d 66       	ori	r18, 0x6D	; 109
 482:	6e 6f       	ori	r22, 0xFE	; 254
 484:	2d 6f       	ori	r18, 0xFD	; 253
 486:	70 65       	ori	r23, 0x50	; 80
 488:	6e 6d       	ori	r22, 0xDE	; 222
 48a:	70 20       	and	r7, r0
 48c:	2d 66       	ori	r18, 0x6D	; 109
 48e:	6e 6f       	ori	r22, 0xFE	; 254
 490:	2d 6f       	ori	r18, 0xFD	; 253
 492:	70 65       	ori	r23, 0x50	; 80
 494:	6e 61       	ori	r22, 0x1E	; 30
 496:	63 63       	ori	r22, 0x33	; 51
 498:	20 2d       	mov	r18, r0
 49a:	66 6e       	ori	r22, 0xE6	; 230
 49c:	6f 2d       	mov	r22, r15
 49e:	65 78       	andi	r22, 0x85	; 133
 4a0:	63 65       	ori	r22, 0x53	; 83
 4a2:	70 74       	andi	r23, 0x40	; 64
 4a4:	69 6f       	ori	r22, 0xF9	; 249
 4a6:	6e 73       	andi	r22, 0x3E	; 62
 4a8:	20 2d       	mov	r18, r0
 4aa:	66 75       	andi	r22, 0x56	; 86
 4ac:	73 65       	ori	r23, 0x53	; 83
 4ae:	2d 6c       	ori	r18, 0xCD	; 205
 4b0:	69 6e       	ori	r22, 0xE9	; 233
 4b2:	6b 65       	ori	r22, 0x5B	; 91
 4b4:	72 2d       	mov	r23, r2
 4b6:	70 6c       	ori	r23, 0xC0	; 192
 4b8:	75 67       	ori	r23, 0x75	; 117
 4ba:	69 6e       	ori	r22, 0xE9	; 233
 4bc:	20 2d       	mov	r18, r0
 4be:	66 6c       	ori	r22, 0xC6	; 198
 4c0:	74 72       	andi	r23, 0x24	; 36
 4c2:	61 6e       	ori	r22, 0xE1	; 225
 4c4:	73 00       	.word	0x0073	; ????
 4c6:	3c 61       	ori	r19, 0x1C	; 28
 4c8:	72 74       	andi	r23, 0x42	; 66
 4ca:	69 66       	ori	r22, 0x69	; 105
 4cc:	69 63       	ori	r22, 0x39	; 57
 4ce:	69 61       	ori	r22, 0x19	; 25
 4d0:	6c 3e       	cpi	r22, 0xEC	; 236
 4d2:	00 6c       	ori	r16, 0xC0	; 192
 4d4:	6f 6e       	ori	r22, 0xEF	; 239
 4d6:	67 20       	and	r6, r7
 4d8:	69 6e       	ori	r22, 0xE9	; 233
 4da:	74 00       	.word	0x0074	; ????
 4dc:	74 69       	ori	r23, 0x94	; 148
 4de:	6d 65       	ori	r22, 0x5D	; 93
 4e0:	72 30       	cpi	r23, 0x02	; 2
 4e2:	5f 66       	ori	r21, 0x6F	; 111
 4e4:	72 61       	ori	r23, 0x12	; 18
 4e6:	63 74       	andi	r22, 0x43	; 67
 4e8:	00 72       	andi	r16, 0x20	; 32
 4ea:	61 6e       	ori	r22, 0xE1	; 225
 4ec:	64 6f       	ori	r22, 0xF4	; 244
 4ee:	6d 53       	subi	r22, 0x3D	; 61
 4f0:	65 65       	ori	r22, 0x55	; 85
 4f2:	64 00       	.word	0x0064	; ????

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	fc 00       	.word	0x00fc	; ????
   2:	00 00       	nop
   4:	1e 01       	movw	r2, r28
   6:	00 00       	nop
   8:	01 00       	.word	0x0001	; ????
   a:	62 40       	sbci	r22, 0x02	; 2
   c:	01 00       	.word	0x0001	; ????
   e:	00 50       	subi	r16, 0x00	; 0
  10:	01 00       	.word	0x0001	; ????
  12:	00 01       	movw	r0, r0
  14:	00 62       	ori	r16, 0x20	; 32
  16:	54 01       	movw	r10, r8
  18:	00 00       	nop
  1a:	58 01       	movw	r10, r16
  1c:	00 00       	nop
  1e:	01 00       	.word	0x0001	; ????
  20:	62 60       	ori	r22, 0x02	; 2
  22:	01 00       	.word	0x0001	; ????
  24:	00 62       	ori	r16, 0x20	; 32
  26:	01 00       	.word	0x0001	; ????
  28:	00 01       	movw	r0, r0
  2a:	00 62       	ori	r16, 0x20	; 32
  2c:	68 01       	movw	r12, r16
  2e:	00 00       	nop
  30:	6a 01       	movw	r12, r20
  32:	00 00       	nop
  34:	01 00       	.word	0x0001	; ????
  36:	62 6e       	ori	r22, 0xE2	; 226
  38:	01 00       	.word	0x0001	; ????
  3a:	00 72       	andi	r16, 0x20	; 32
  3c:	01 00       	.word	0x0001	; ????
  3e:	00 01       	movw	r0, r0
  40:	00 62       	ori	r16, 0x20	; 32
  42:	7a 01       	movw	r14, r20
  44:	00 00       	nop
  46:	7e 01       	movw	r14, r28
  48:	00 00       	nop
  4a:	01 00       	.word	0x0001	; ????
  4c:	62 00       	.word	0x0062	; ????
  4e:	00 00       	nop
  50:	00 00       	nop
  52:	00 00       	nop
  54:	00 02       	muls	r16, r16
  56:	01 00       	.word	0x0001	; ????
  58:	00 38       	cpi	r16, 0x80	; 128
  5a:	01 00       	.word	0x0001	; ????
  5c:	00 01       	movw	r0, r0
  5e:	00 69       	ori	r16, 0x90	; 144
  60:	38 01       	movw	r6, r16
  62:	00 00       	nop
  64:	3a 01       	movw	r6, r20
  66:	00 00       	nop
  68:	04 00       	.word	0x0004	; ????
  6a:	89 00       	.word	0x0089	; ????
  6c:	20 9f       	mul	r18, r16
  6e:	40 01       	movw	r8, r0
  70:	00 00       	nop
  72:	84 01       	movw	r16, r8
  74:	00 00       	nop
  76:	01 00       	.word	0x0001	; ????
  78:	69 00       	.word	0x0069	; ????
  7a:	00 00       	nop
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	00 08       	sbc	r0, r0
  82:	01 00       	.word	0x0001	; ????
  84:	00 24       	eor	r0, r0
  86:	01 00       	.word	0x0001	; ????
  88:	00 01       	movw	r0, r0
  8a:	00 6e       	ori	r16, 0xE0	; 224
  8c:	40 01       	movw	r8, r0
  8e:	00 00       	nop
  90:	82 01       	movw	r16, r4
  92:	00 00       	nop
  94:	01 00       	.word	0x0001	; ????
  96:	6e 00       	.word	0x006e	; ????
  98:	00 00       	nop
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	00 2c       	mov	r0, r0
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 3e       	cpi	r16, 0xE0	; 224
  a4:	01 00       	.word	0x0001	; ????
  a6:	00 06       	cpc	r0, r16
  a8:	00 6a       	ori	r16, 0xA0	; 160
  aa:	93 01       	movw	r18, r6
  ac:	6b 93       	.word	0x936b	; ????
  ae:	01 82       	std	Z+1, r0	; 0x01
  b0:	01 00       	.word	0x0001	; ????
  b2:	00 86       	std	Z+8, r0	; 0x08
  b4:	01 00       	.word	0x0001	; ????
  b6:	00 06       	cpc	r0, r16
  b8:	00 6a       	ori	r16, 0xA0	; 160
  ba:	93 01       	movw	r18, r6
  bc:	6b 93       	.word	0x936b	; ????
  be:	01 00       	.word	0x0001	; ????
  c0:	00 00       	nop
  c2:	00 00       	nop
  c4:	00 00       	nop
  c6:	00 2e       	mov	r0, r16
  c8:	01 00       	.word	0x0001	; ????
  ca:	00 3e       	cpi	r16, 0xE0	; 224
  cc:	01 00       	.word	0x0001	; ????
  ce:	00 01       	movw	r0, r0
  d0:	00 62       	ori	r16, 0x20	; 32
  d2:	82 01       	movw	r16, r4
  d4:	00 00       	nop
  d6:	86 01       	movw	r16, r12
  d8:	00 00       	nop
  da:	01 00       	.word	0x0001	; ????
  dc:	62 00       	.word	0x0062	; ????
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	00 00       	nop
  e4:	00 fa       	bst	r0, 0
  e6:	00 00       	nop
  e8:	00 00       	nop
  ea:	01 00       	.word	0x0001	; ????
  ec:	00 06       	cpc	r0, r16
  ee:	00 6e       	ori	r16, 0xE0	; 224
  f0:	93 01       	movw	r18, r6
  f2:	6f 93       	push	r22
  f4:	01 00       	.word	0x0001	; ????
	...
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
  fe:	01 00       	.word	0x0001	; ????
 100:	00 06       	cpc	r0, r16
	uint8_t port = digitalPinToPort(pin);
 102:	01 00       	.word	0x0001	; ????
 104:	00 06       	cpc	r0, r16
 106:	00 6e       	ori	r16, 0xE0	; 224
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 108:	93 01       	movw	r18, r6
 10a:	6f 93       	push	r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 10c:	01 00       	.word	0x0001	; ????
 10e:	00 00       	nop
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 110:	00 00       	nop
 112:	00 00       	nop
 114:	00 06       	cpc	r0, r16
 116:	01 00       	.word	0x0001	; ????
 118:	00 08       	sbc	r0, r0
 11a:	01 00       	.word	0x0001	; ????
 11c:	00 06       	cpc	r0, r16

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 11e:	00 6e       	ori	r16, 0xE0	; 224
 120:	93 01       	movw	r18, r6
 122:	6f 93       	push	r22
 124:	01 00       	.word	0x0001	; ????
 126:	00 00       	nop
 128:	00 00       	nop
 12a:	00 00       	nop

	uint8_t oldSREG = SREG;
 12c:	00 10       	cpse	r0, r0
	cli();
 12e:	01 00       	.word	0x0001	; ????

	if (val == LOW) {
		*out &= ~bit;
 130:	00 1e       	adc	r0, r16
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 132:	01 00       	.word	0x0001	; ????
 134:	00 01       	movw	r0, r0
		*out &= ~bit;
 136:	00 62       	ori	r16, 0x20	; 32
 138:	40 01       	movw	r8, r0
	} else {
		*out |= bit;
 13a:	00 00       	nop
	}

	SREG = oldSREG;
 13c:	50 01       	movw	r10, r0
}
 13e:	00 00       	nop
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 140:	01 00       	.word	0x0001	; ????
 142:	62 54       	subi	r22, 0x42	; 66
 144:	01 00       	.word	0x0001	; ????
 146:	00 58       	subi	r16, 0x80	; 128
 148:	01 00       	.word	0x0001	; ????
 14a:	00 01       	movw	r0, r0
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 14c:	00 62       	ori	r16, 0x20	; 32
 14e:	60 01       	movw	r12, r0
 150:	00 00       	nop
 152:	62 01       	movw	r12, r4
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 154:	00 00       	nop
 156:	01 00       	.word	0x0001	; ????
 158:	62 68       	ori	r22, 0x82	; 130
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 15a:	01 00       	.word	0x0001	; ????
 15c:	00 6a       	ori	r16, 0xA0	; 160
 15e:	01 00       	.word	0x0001	; ????
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 160:	00 01       	movw	r0, r0
 162:	00 62       	ori	r16, 0x20	; 32
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 164:	6e 01       	movw	r12, r28
 166:	00 00       	nop
 168:	72 01       	movw	r14, r4
 16a:	00 00       	nop
 16c:	01 00       	.word	0x0001	; ????
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 16e:	62 7a       	andi	r22, 0xA2	; 162
 170:	01 00       	.word	0x0001	; ????
 172:	00 7e       	andi	r16, 0xE0	; 224
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 174:	01 00       	.word	0x0001	; ????
 176:	00 01       	movw	r0, r0
 178:	00 62       	ori	r16, 0x20	; 32
	...
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 182:	28 01       	movw	r4, r16
 184:	00 00       	nop
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 186:	2c 01       	movw	r4, r24
 188:	00 00       	nop
 18a:	06 00       	.word	0x0006	; ????
 18c:	6e 93       	st	-X, r22
 18e:	01 6f       	ori	r16, 0xF1	; 241
 190:	93 01       	movw	r18, r6
	...
 19a:	86 01       	movw	r16, r12
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 19c:	00 00       	nop
 19e:	88 01       	movw	r16, r16
 1a0:	00 00       	nop
 1a2:	03 00       	.word	0x0003	; ????
 1a4:	92 20       	and	r9, r2
 1a6:	02 88       	ldd	r0, Z+18	; 0x12
 1a8:	01 00       	.word	0x0001	; ????
 1aa:	00 8a       	std	Z+16, r0	; 0x10
	unsigned char f = timer0_fract;
 1ac:	01 00       	.word	0x0001	; ????
 1ae:	00 03       	mulsu	r16, r16

	m += MILLIS_INC;
	f += FRACT_INC;
 1b0:	00 92 20 03 	sts	0x0320, r0	; 0x800320 <__bss_end+0x213>
	if (f >= FRACT_MAX) {
 1b4:	8a 01       	movw	r16, r20
 1b6:	00 00       	nop
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 1b8:	92 01       	movw	r18, r4
 1ba:	00 00       	nop
 1bc:	03 00       	.word	0x0003	; ????
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 1be:	92 20       	and	r9, r2
 1c0:	04 92       	xch	Z, r0
	timer0_millis = m;
 1c2:	01 00       	.word	0x0001	; ????
 1c4:	00 94       	com	r0
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	00 03       	mulsu	r16, r16
 1ca:	00 92 20 05 	sts	0x0520, r0	; 0x800520 <__bss_end+0x413>
 1ce:	94 01       	movw	r18, r8
 1d0:	00 00       	nop
	timer0_overflow_count++;
 1d2:	96 01       	movw	r18, r12
 1d4:	00 00       	nop
 1d6:	03 00       	.word	0x0003	; ????
 1d8:	92 20       	and	r9, r2
 1da:	06 96       	adiw	r24, 0x06	; 6
 1dc:	01 00       	.word	0x0001	; ????
 1de:	00 98       	cbi	0x00, 0	; 0
 1e0:	01 00       	.word	0x0001	; ????
 1e2:	00 03       	mulsu	r16, r16
 1e4:	00 92 20 07 	sts	0x0720, r0	; 0x800720 <__bss_end+0x613>
 1e8:	98 01       	movw	r18, r16
 1ea:	00 00       	nop
 1ec:	9a 01       	movw	r18, r20
 1ee:	00 00       	nop
 1f0:	03 00       	.word	0x0003	; ????
 1f2:	92 20       	and	r9, r2
 1f4:	08 9a       	sbi	0x01, 0	; 1
 1f6:	01 00       	.word	0x0001	; ????
}
 1f8:	00 9c       	mul	r0, r0
 1fa:	01 00       	.word	0x0001	; ????
 1fc:	00 03       	mulsu	r16, r16
 1fe:	00 92 20 09 	sts	0x0920, r0	; 0x800920 <__bss_end+0x813>
 202:	9c 01       	movw	r18, r24
 204:	00 00       	nop
 206:	1a 02       	muls	r17, r26
 208:	00 00       	nop
 20a:	03 00       	.word	0x0003	; ????
 20c:	92 20       	and	r9, r2
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 20e:	0a 00       	.word	0x000a	; ????
 210:	00 00       	nop
		m += 1;
 212:	00 00       	nop
 214:	00 00       	nop
 216:	00 ac       	ldd	r0, Z+56	; 0x38
 218:	01 00       	.word	0x0001	; ????

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 21a:	00 b0       	in	r0, 0x00	; 0
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 21c:	01 00       	.word	0x0001	; ????
 21e:	00 0c       	add	r0, r0
 220:	00 68       	ori	r16, 0x80	; 128
	sbi(TCCR0A, WGM00);
 222:	93 01       	movw	r18, r6
 224:	69 93       	st	Y+, r22
 226:	01 6a       	ori	r16, 0xA1	; 161
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 228:	93 01       	movw	r18, r6
 22a:	6b 93       	.word	0x936b	; ????
 22c:	01 b0       	in	r0, 0x01	; 1
	sbi(TCCR0B, CS00);
 22e:	01 00       	.word	0x0001	; ????
 230:	00 be       	out	0x30, r0	; 48
 232:	01 00       	.word	0x0001	; ????

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 234:	00 03       	mulsu	r16, r16
 236:	00 88       	ldd	r0, Z+16	; 0x10
 238:	01 9f       	mul	r16, r17
 23a:	be 01       	movw	r22, r28
 23c:	00 00       	nop
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 23e:	e2 01       	movw	r28, r4
 240:	00 00       	nop

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 242:	0c 00       	.word	0x000c	; ????
 244:	68 93       	.word	0x9368	; ????
 246:	01 69       	ori	r16, 0x91	; 145
 248:	93 01       	movw	r18, r6
 24a:	6a 93       	st	-Y, r22
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 24c:	01 6b       	ori	r16, 0xB1	; 177
 24e:	93 01       	movw	r18, r6
 250:	e2 01       	movw	r28, r4
 252:	00 00       	nop
 254:	f8 01       	movw	r30, r16
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 256:	00 00       	nop
 258:	05 00       	.word	0x0005	; ????
 25a:	03 09       	sbc	r16, r3
 25c:	01 80       	ldd	r0, Z+1	; 0x01
 25e:	00 0e       	add	r0, r16

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 260:	02 00       	.word	0x0002	; ????
 262:	00 18       	sub	r0, r0
 264:	02 00       	.word	0x0002	; ????
 266:	00 03       	mulsu	r16, r16
 268:	00 88       	ldd	r0, Z+16	; 0x10

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 26a:	01 9f       	mul	r16, r17
 26c:	18 02       	muls	r17, r24
 26e:	00 00       	nop
 270:	1a 02       	muls	r17, r26
 272:	00 00       	nop
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 274:	0c 00       	.word	0x000c	; ????
 276:	68 93       	.word	0x9368	; ????
 278:	01 69       	ori	r16, 0x91	; 145
 27a:	93 01       	movw	r18, r6
 27c:	6a 93       	st	-Y, r22
		sbi(ADCSRA, ADPS1);
 27e:	01 6b       	ori	r16, 0xB1	; 177
 280:	93 01       	movw	r18, r6
	...
		sbi(ADCSRA, ADPS0);
 28a:	b0 01       	movw	r22, r0
 28c:	00 00       	nop
 28e:	b4 01       	movw	r22, r8
 290:	00 00       	nop
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 292:	01 00       	.word	0x0001	; ????
 294:	63 b4       	in	r6, 0x23	; 35
 296:	01 00       	.word	0x0001	; ????
 298:	00 04       	cpc	r0, r0
 29a:	02 00       	.word	0x0002	; ????
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 29c:	00 01       	movw	r0, r0
 29e:	00 62       	ori	r16, 0x20	; 32
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 2a0:	04 02       	muls	r16, r20
 2a2:	00 00       	nop
 2a4:	08 02       	muls	r16, r24
	uint8_t port = digitalPinToPort(pin);
 2a6:	00 00       	nop
 2a8:	05 00       	.word	0x0005	; ????
 2aa:	03 08       	sbc	r0, r3
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 2ac:	01 80       	ldd	r0, Z+1	; 0x01
 2ae:	00 0e       	add	r0, r16

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 2b0:	02 00       	.word	0x0002	; ????
 2b2:	00 10       	cpse	r0, r0
 2b4:	02 00       	.word	0x0002	; ????
 2b6:	00 01       	movw	r0, r0
 2b8:	00 62       	ori	r16, 0x20	; 32
 2ba:	10 02       	muls	r17, r16
 2bc:	00 00       	nop
 2be:	12 02       	muls	r17, r18
	out = portOutputRegister(port);
 2c0:	00 00       	nop
 2c2:	03 00       	.word	0x0003	; ????
 2c4:	83 03       	fmuls	r16, r19
 2c6:	9f 12       	cpse	r9, r31
 2c8:	02 00       	.word	0x0002	; ????
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 2ca:	00 1a       	sub	r0, r16
                cli();
 2cc:	02 00       	.word	0x0002	; ????
		*reg |= bit;
 2ce:	00 01       	movw	r0, r0
 2d0:	00 62       	ori	r16, 0x20	; 32
	...
void loop() {
  // put your main code here, to run repeatedly:
  // Create trigger
  int randNumber1, randNumber2;
  randomSeed(0);
  noInterrupts();
 2da:	a6 02       	muls	r26, r22
  digitalWrite(LED_BUILTIN, LOW);   
 2dc:	00 00       	nop
 2de:	da 02       	muls	r29, r26
 2e0:	00 00       	nop
  digitalWrite(LED_BUILTIN, HIGH);   // Trigger with LED
 2e2:	01 00       	.word	0x0001	; ????
 2e4:	62 00       	.word	0x0062	; ????
 2e6:	00 00       	nop
 2e8:	00 00       	nop
 2ea:	00 00       	nop
 2ec:	00 ac       	ldd	r0, Z+56	; 0x38
 2ee:	02 00       	.word	0x0002	; ????
  //Code goes here
  randNumber1 = random(65535);
  randNumber2 = random(65535);
  interrupts();
 2f0:	00 b6       	in	r0, 0x30	; 48
 2f2:	02 00       	.word	0x0002	; ????
 2f4:	00 01       	movw	r0, r0
 2f6:	00 68       	ori	r16, 0x80	; 128
	...
 300:	c0 02       	muls	r28, r16
 302:	00 00       	nop
 304:	d6 02       	muls	r29, r22
 306:	00 00       	nop
 308:	06 00       	.word	0x0006	; ????
 30a:	6a 93       	st	-Y, r22
 30c:	01 6b       	ori	r16, 0xB1	; 177
 30e:	93 01       	movw	r18, r6
	...
 318:	a4 02       	muls	r26, r20
 31a:	00 00       	nop
 31c:	aa 02       	muls	r26, r26
 31e:	00 00       	nop
 320:	06 00       	.word	0x0006	; ????
 322:	6e 93       	st	-X, r22
 324:	01 6f       	ori	r16, 0xF1	; 241
 326:	93 01       	movw	r18, r6
	...
 330:	aa 02       	muls	r26, r26
 332:	00 00       	nop
 334:	b8 02       	muls	r27, r24
 336:	00 00       	nop
 338:	06 00       	.word	0x0006	; ????
 33a:	6e 93       	st	-X, r22
 33c:	01 6f       	ori	r16, 0xF1	; 241
 33e:	93 01       	movw	r18, r6
	...
 348:	bc 02       	muls	r27, r28
 34a:	00 00       	nop
 34c:	c0 02       	muls	r28, r16
 34e:	00 00       	nop
 350:	06 00       	.word	0x0006	; ????
 352:	6e 93       	st	-X, r22
 354:	01 6f       	ori	r16, 0xF1	; 241
 356:	93 01       	movw	r18, r6
	...
 360:	c6 02       	muls	r28, r22
 362:	00 00       	nop
 364:	ca 02       	muls	r28, r26
 366:	00 00       	nop
 368:	06 00       	.word	0x0006	; ????
 36a:	6e 93       	st	-X, r22
 36c:	01 6f       	ori	r16, 0xF1	; 241
 36e:	93 01       	movw	r18, r6
	...
 378:	cc 02       	muls	r28, r28
 37a:	00 00       	nop
 37c:	d6 02       	muls	r29, r22
 37e:	00 00       	nop
 380:	01 00       	.word	0x0001	; ????
 382:	68 00       	.word	0x0068	; ????
 384:	00 00       	nop
 386:	00 00       	nop
 388:	00 00       	nop
 38a:	00 e8       	ldi	r16, 0x80	; 128
 38c:	02 00       	.word	0x0002	; ????
 38e:	00 ec       	ldi	r16, 0xC0	; 192
 390:	02 00       	.word	0x0002	; ????
 392:	00 04       	cpc	r0, r0
 394:	00 0a       	sbc	r0, r16
 396:	ff ff       	.word	0xffff	; ????
 398:	9f 00       	.word	0x009f	; ????
 39a:	00 00       	nop
 39c:	00 00       	nop
 39e:	00 00       	nop
 3a0:	00 ec       	ldi	r16, 0xC0	; 192
 3a2:	02 00       	.word	0x0002	; ????
 3a4:	00 f0       	brcs	.+0      	; 0x3a6 <random+0x12>
 3a6:	02 00       	.word	0x0002	; ????
 3a8:	00 04       	cpc	r0, r0
 3aa:	00 0a       	sbc	r0, r16
 3ac:	ff ff       	.word	0xffff	; ????
 3ae:	9f 00       	.word	0x009f	; ????
 3b0:	00 00       	nop
 3b2:	00 00       	nop
 3b4:	00 00       	nop
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	10 01       	movw	r2, r0
   2:	00 00       	nop
   4:	1e 01       	movw	r2, r28
   6:	00 00       	nop
   8:	40 01       	movw	r8, r0
   a:	00 00       	nop
   c:	82 01       	movw	r16, r4
	...
  16:	00 00       	nop
  18:	f6 00       	.word	0x00f6	; ????
  1a:	00 00       	nop
  1c:	1a 02       	muls	r17, r26
  1e:	00 00       	nop
  20:	1a 02       	muls	r17, r26
  22:	00 00       	nop
  24:	fc 02       	muls	r31, r28
	...
